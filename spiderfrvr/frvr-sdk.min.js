var FRVRSDK = function (_0x5ccbd3) {
  'use strict';

  function _0x3b74a8(_0x387e52, _0x119678) {
    var _0x4776d1 = {};
    for (var _0x4e8b77 in _0x387e52) {
      if (Object.prototype.hasOwnProperty.call(_0x387e52, _0x4e8b77) && _0x119678.indexOf(_0x4e8b77) < 0) {
        _0x4776d1[_0x4e8b77] = _0x387e52[_0x4e8b77];
      }
    }
    if (_0x387e52 != null && typeof Object.getOwnPropertySymbols == "function") {
      var _0x3fbf64 = 0;
      for (_0x4e8b77 = Object.getOwnPropertySymbols(_0x387e52); _0x3fbf64 < _0x4e8b77.length; _0x3fbf64++) {
        if (_0x119678.indexOf(_0x4e8b77[_0x3fbf64]) < 0 && Object.prototype.propertyIsEnumerable.call(_0x387e52, _0x4e8b77[_0x3fbf64])) {
          _0x4776d1[_0x4e8b77[_0x3fbf64]] = _0x387e52[_0x4e8b77[_0x3fbf64]];
        }
      }
    }
    return _0x4776d1;
  }
  function _0x3d1aad(_0x4fb82e, _0x17a41b, _0xab4b2c, _0x3d839c) {
    return new (_0xab4b2c || (_0xab4b2c = Promise))(function (_0x7c53fd, _0x3bcba9) {
      function _0x4f3215(_0x17ff1) {
        try {
          _0x1f4c6a(_0x3d839c.next(_0x17ff1));
        } catch (_0x3e4519) {
          _0x3bcba9(_0x3e4519);
        }
      }
      function _0x4852d3(_0x375186) {
        try {
          _0x1f4c6a(_0x3d839c.throw(_0x375186));
        } catch (_0x26046d) {
          _0x3bcba9(_0x26046d);
        }
      }
      function _0x1f4c6a(_0x38b95d) {
        var _0x137170;
        if (_0x38b95d.done) {
          _0x7c53fd(_0x38b95d.value);
        } else {
          (_0x137170 = _0x38b95d.value, _0x137170 instanceof _0xab4b2c ? _0x137170 : new _0xab4b2c(function (_0x5ac99a) {
            _0x5ac99a(_0x137170);
          })).then(_0x4f3215, _0x4852d3);
        }
      }
      _0x1f4c6a((_0x3d839c = _0x3d839c.apply(_0x4fb82e, _0x17a41b || [])).next());
    });
  }
  var _0x359a51;
  if (typeof SuppressedError == "function") {
    SuppressedError;
  }
  _0x5ccbd3.Env = undefined;
  (_0x359a51 = _0x5ccbd3.Env || (_0x5ccbd3.Env = {})).DEVELOPMENT = "dev";
  _0x359a51.BETA = "beta";
  _0x359a51.PRODUCTION = "prod";
  const _0x18650f = {
    log: () => {},
    error: () => {},
    warn: () => {},
    info: () => {},
    debug: () => {}
  };
  class _0x284dd1 {
    constructor({
      provider: _0x433c9d,
      logger: _0x4fc939
    }) {
      this.provider = _0x433c9d;
      this.logger = _0x4fc939 || _0x18650f;
    }
    setItems(_0x4ab8d6) {
      const _0x569ca9 = _0x4ab8d6.map(({
        key: _0x4a6747,
        value: _0x2b07ac
      }) => ({
        key: _0x4a6747,
        value: JSON.stringify(_0x2b07ac)
      }));
      return this.provider.setItems(_0x569ca9);
    }
    getItems(_0x13223f) {
      return _0x3d1aad(this, undefined, undefined, function* () {
        const _0xc5703a = yield this.provider.getItems(_0x13223f);
        const _0x751eda = {};
        for (const _0x34aa34 in _0xc5703a) {
          try {
            _0x751eda[_0x34aa34] = JSON.parse(_0xc5703a[_0x34aa34]);
          } catch (_0xfe4ef8) {
            _0x751eda[_0x34aa34] = _0xc5703a[_0x34aa34];
            this.logger.error("[storage] parsing error on key " + _0x34aa34, _0xfe4ef8.message);
          }
        }
        return _0x751eda;
      });
    }
    removeItems(_0x482396) {
      return this.provider.removeItems(_0x482396);
    }
    setItem(_0x156464, _0x39be4b) {
      return this.provider.setItems([{
        key: _0x156464,
        value: JSON.stringify(_0x39be4b)
      }]);
    }
    getItem(_0x52541f, _0x20b03f) {
      return _0x3d1aad(this, undefined, undefined, function* () {
        let _0x261adf;
        const _0x10e5eb = (yield this.provider.getItems([_0x52541f]))[_0x52541f];
        try {
          _0x261adf = _0x10e5eb !== undefined ? JSON.parse(_0x10e5eb) : _0x20b03f;
        } catch (_0x23ac43) {
          _0x261adf = _0x20b03f != null ? _0x20b03f : _0x10e5eb;
          this.logger.error("[storage] parsing error on key " + _0x52541f, _0x23ac43.message);
        }
        return _0x261adf;
      });
    }
    removeItem(_0x2c5d7f) {
      return _0x3d1aad(this, undefined, undefined, function* () {
        return this.provider.removeItems([_0x2c5d7f]);
      });
    }
    isPersistent() {
      return this.provider.isPersistent();
    }
  }
  const _0x3c2a02 = "test-01e0e1c8-2a13-4fe9-b8d0-458a98c4fc89";
  class _0x24b357 {
    static isSupported() {
      try {
        window.localStorage.setItem(_0x3c2a02, "test");
        window.localStorage.removeItem(_0x3c2a02);
        return true;
      } catch (_0x981985) {
        return false;
      }
    }
    setItems(_0xdf7791) {
      return _0x3d1aad(this, undefined, undefined, function* () {
        for (const _0x45c898 of _0xdf7791) {
          window.localStorage.setItem(_0x45c898.key, _0x45c898.value);
        }
      });
    }
    getItems(_0xb506ab) {
      return _0x3d1aad(this, undefined, undefined, function* () {
        const _0x19712e = {};
        for (const _0x44d793 of _0xb506ab) {
          const _0x1fb2e9 = window.localStorage.getItem(_0x44d793);
          if (_0x1fb2e9 !== null) {
            _0x19712e[_0x44d793] = _0x1fb2e9;
          }
        }
        return _0x19712e;
      });
    }
    removeItems(_0x44b726) {
      return _0x3d1aad(this, undefined, undefined, function* () {
        for (const _0x2f532e of _0x44b726) {
          window.localStorage.removeItem(_0x2f532e);
        }
      });
    }
    isPersistent() {
      return true;
    }
  }
  _0x24b357.providerName = "web";
  class _0x39ba3d {
    constructor() {
      this.values = {};
    }
    setItems(_0x23cd00) {
      return _0x3d1aad(this, undefined, undefined, function* () {
        for (const _0x2e17f0 of _0x23cd00) {
          this.values[_0x2e17f0.key] = _0x2e17f0.value;
        }
      });
    }
    getItems(_0x53de9c) {
      return _0x3d1aad(this, undefined, undefined, function* () {
        const _0x316d7d = {};
        for (const _0x5a57c3 of _0x53de9c) {
          const _0x5b1a37 = this.values[_0x5a57c3];
          if (_0x5b1a37 !== undefined) {
            _0x316d7d[_0x5a57c3] = _0x5b1a37;
          }
        }
        return _0x316d7d;
      });
    }
    removeItems(_0x22629c) {
      return _0x3d1aad(this, undefined, undefined, function* () {
        for (const _0x616da5 of _0x22629c) {
          delete this.values[_0x616da5];
        }
      });
    }
    isPersistent() {
      return false;
    }
  }
  _0x39ba3d.providerName = "memory";
  const _0x55f80a = new _0x284dd1({
    provider: new _0x39ba3d()
  });
  const _0x5318f3 = _0x19ba00 => {
    for (const _0x3156c2 of _0x19ba00) {
      switch (_0x3156c2) {
        case _0x24b357.providerName:
          if (_0x24b357.isSupported()) {
            return new _0x24b357();
          }
          break;
        case _0x39ba3d.providerName:
          return new _0x39ba3d();
        default:
          throw new Error("Unsupported Local Storage provider");
      }
    }
    throw new Error("Error initializing Local Storage provider");
  };
  const _0x536feb = {
    init: () => Promise.resolve(),
    setProgress: () => {},
    complete: () => Promise.resolve()
  };
  function _0x13a88b() {
    this.code = "INVALID_OPERATION";
    this.message = "Trying to use an empty interface.";
  }
  const _0x3a49e8 = {
    init: () => _0x3d1aad(undefined, undefined, undefined, function* () {}),
    canCreateShortcut: () => Promise.resolve(false),
    createShortcut: () => Promise.reject(new _0x13a88b())
  };
  function _0x50aeae() {
    this.code = "INVALID_OPERATION";
    this.message = "Trying to use an empty interface.";
  }
  const _0x291858 = {
    needsConfiguration: () => false,
    canMoveToMobile: () => Promise.resolve(false),
    moveToMobile: () => Promise.reject(new _0x50aeae())
  };
  var _0x194e9b;
  _0x5ccbd3.ConsentOptions = undefined;
  (_0x194e9b = _0x5ccbd3.ConsentOptions || (_0x5ccbd3.ConsentOptions = {}))[_0x194e9b.None = 0] = "None";
  _0x194e9b[_0x194e9b.P1StoreInformationOnADevice = 2] = "P1StoreInformationOnADevice";
  _0x194e9b[_0x194e9b.P2SelectBasicAds = 4] = "P2SelectBasicAds";
  _0x194e9b[_0x194e9b.P3PersonalizedAdsProfile = 8] = "P3PersonalizedAdsProfile";
  _0x194e9b[_0x194e9b.P4PersonalizedAds = 16] = "P4PersonalizedAds";
  _0x194e9b[_0x194e9b.P5PersonalizedContentProfile = 32] = "P5PersonalizedContentProfile";
  _0x194e9b[_0x194e9b.P6PersonalizedContent = 64] = "P6PersonalizedContent";
  _0x194e9b[_0x194e9b.P7MeasureAdPerformance = 128] = "P7MeasureAdPerformance";
  _0x194e9b[_0x194e9b.P8MeasureContentPerformance = 256] = "P8MeasureContentPerformance";
  _0x194e9b[_0x194e9b.P9MarketResearchForAudienceInsights = 512] = "P9MarketResearchForAudienceInsights";
  _0x194e9b[_0x194e9b.P10DevelopAndImproveProducts = 1024] = "P10DevelopAndImproveProducts";
  _0x194e9b[_0x194e9b.All = 2046] = "All";
  const _0x2919c9 = {
    consentToTerms: () => {},
    onConsentChanged(_0x3f07fb) {},
    hasConsentForAll: (_0x294267, _0x58f3ca) => false,
    hasConsentForAny: (_0x536b55, _0x374ae1) => false,
    consents: () => _0x5ccbd3.ConsentOptions.None,
    legitimateInterests: () => _0x5ccbd3.ConsentOptions.None,
    hasLoaded: () => true,
    isConsentEditable: () => false,
    supportsAutoInitialization: () => true
  };
  const _0x396f80 = {
    consentToTerms: () => {},
    onConsentChanged(_0x2803d1) {},
    hasConsentForAll: (_0x47bb27, _0x2ea4ea) => true,
    hasConsentForAny: (_0x114e0a, _0x1e815b) => true,
    consents: () => _0x5ccbd3.ConsentOptions.All,
    legitimateInterests: () => _0x5ccbd3.ConsentOptions.All,
    hasLoaded: () => true,
    isConsentEditable: () => false,
    supportsAutoInitialization: () => false
  };
  const _0x52d138 = {
    id: () => "",
    name: () => "",
    nickname: () => "",
    image: () => "",
    loadImage: () => Promise.reject(new Error("EMPTY_PROFILE"))
  };
  const _0x99265f = {
    allowExternalLinks: true,
    allowInternalLinks: true,
    allowNavigation: true,
    allowSendBeacon: true,
    allowThirdPartyDomains: true,
    hasDedicatedLoadingScreen: true
  };
  const _0x4c1655 = {
    getData: () => Promise.reject(new Error("EMPTY_ENTRYPOINT_DATA")),
    getName: () => Promise.reject(new Error("EMPTY_ENTRYPOINT_NAME"))
  };
  const _0x4dee7e = {
    canFollowOfficialPage: () => Promise.resolve(false),
    followOfficialPage: () => Promise.reject(new Error("EMPTY_FOLLOW_OFFICIAL_PAGE")),
    canJoinOfficialGroup: () => Promise.resolve(false),
    joinOfficialGroup: () => Promise.reject(new Error("EMPTY_FOLLOW_OFFICIAL_GROUP"))
  };
  class _0x1acd5f extends Promise {
    constructor(_0x1c7148) {
      let _0x47b0b1;
      let _0x189095;
      super((_0x10e9bb, _0x5bf5d2) => {
        _0x47b0b1 = _0x10e9bb;
        _0x189095 = _0x5bf5d2;
      });
      this._resolve = _0x47b0b1;
      this._reject = _0x189095;
      if (!(_0x1c7148 == null)) {
        _0x1c7148(_0x47b0b1, _0x189095);
      }
    }
    resolve(_0x4f6cda) {
      this._resolve(_0x4f6cda);
    }
    reject(_0x4d22da) {
      this._reject(_0x4d22da);
    }
  }
  const _0x2f3294 = {
    canNavigate: () => false,
    navigate: () => {
      throw new Error("EMPTY_NAVIGATE_IMPLEMENTATION");
    },
    canOpenChannelAppStore: () => false,
    openChannelAppStore: () => {
      throw new Error("EMPTY_OPEN_CHANNEL_STORE_IMPLEMENTATION");
    }
  };
  const _0x50d2af = {
    canCrosspromo: () => Promise.resolve(false),
    openGame: () => {
      throw new Error("Crosspromo not implemented");
    }
  };
  var _0x4bb7a0;
  _0x5ccbd3.AdType = undefined;
  (_0x4bb7a0 = _0x5ccbd3.AdType || (_0x5ccbd3.AdType = {})).INTERSTITIAL = "interstitial";
  _0x4bb7a0.REWARD = "reward";
  _0x4bb7a0.BANNER = "banner";
  _0x4bb7a0.SURVEY = "survey";
  _0x4bb7a0.REWARDED_INTERSTITIAL = "rewarded-interstitial";
  const _0x5b7b7f = {
    [_0x5ccbd3.AdType.INTERSTITIAL]: {
      stopsGameFlow: true,
      throttleable: true
    },
    [_0x5ccbd3.AdType.REWARD]: {
      stopsGameFlow: true,
      throttleable: false
    },
    [_0x5ccbd3.AdType.BANNER]: {
      stopsGameFlow: false,
      throttleable: false
    },
    [_0x5ccbd3.AdType.SURVEY]: {
      stopsGameFlow: true,
      throttleable: true
    },
    [_0x5ccbd3.AdType.REWARDED_INTERSTITIAL]: {
      stopsGameFlow: true,
      throttleable: true
    }
  };
  const _0xd1dd36 = {
    onSuspend: () => {},
    onResume: () => {},
    onAudioSuspend: () => {},
    onAudioResume: () => {}
  };
  var _0x5dddd3;
  var _0x1c05c1;
  var _0x2b37b5;
  _0x5ccbd3.AdSuccess = undefined;
  (_0x5dddd3 = _0x5ccbd3.AdSuccess || (_0x5ccbd3.AdSuccess = {})).DELIVERED = "delivered";
  _0x5dddd3.COMPLETED = "completed";
  _0x5ccbd3.AdError = undefined;
  (_0x1c05c1 = _0x5ccbd3.AdError || (_0x5ccbd3.AdError = {})).ON_LOAD = "on_load";
  _0x1c05c1.ON_SHOW = "on_show";
  _0x1c05c1.BLOCKED = "blocked";
  _0x1c05c1.NOFILL = "nofill";
  _0x1c05c1.TIMED_OUT = "timed_out";
  _0x5ccbd3.AdsThrottlerResult = undefined;
  (_0x2b37b5 = _0x5ccbd3.AdsThrottlerResult || (_0x5ccbd3.AdsThrottlerResult = {}))[_0x2b37b5.NO_THROTTLING = 0] = "NO_THROTTLING";
  _0x2b37b5.INIT_TIME = "INIT_TIME";
  _0x2b37b5.FREQUENCY = "FREQUENCY";
  class _0x4cfbe8 {
    constructor() {
      this.maxfrequency = 0;
      this.initTimeBlock = 0;
      this.forceFirstAd = false;
      this.MAX_FREQUENCY_DEFAULT = 300000;
      this.FIRST_SESSION_AD_SPEED_RATE = 3;
    }
    getFirstIntervalTime(_0x13d9aa) {
      const _0x4a9952 = _0x13d9aa.isFirstAdEver ? this.maxfrequency : this.maxfrequency / this.FIRST_SESSION_AD_SPEED_RATE;
      return _0x13d9aa.initTime - _0x4a9952;
    }
    getInitialisedState(_0x40e5fb) {
      if (_0x40e5fb.lastShownAd) {
        return _0x40e5fb;
      } else {
        return Object.assign(Object.assign({}, _0x40e5fb), {
          lastShownAd: this.getFirstIntervalTime(_0x40e5fb)
        });
      }
    }
    shouldBlockByInitTime(_0x31282d, _0x480433) {
      return _0x480433 - _0x31282d.initTime < this.initTimeBlock;
    }
    shouldBlockByFrequency(_0x2d43a1, _0x18fc3e) {
      const _0x30b5c0 = _0x18fc3e - _0x2d43a1.lastShownAd;
      return this.maxfrequency > 0 && _0x30b5c0 < this.maxfrequency && !(_0x2d43a1.isFirstAd && this.forceFirstAd);
    }
    init(_0x4b0bb2) {
      this.initTimeBlock = _0x4b0bb2.initTimeBlock || 0;
      this.maxfrequency = _0x4b0bb2.maxfrequency === undefined ? this.MAX_FREQUENCY_DEFAULT : _0x4b0bb2.maxfrequency;
      this.forceFirstAd = _0x4b0bb2.forceFirstAd || false;
    }
    mustThrottle(_0x38c1d7, _0x29e24c) {
      _0x29e24c = _0x29e24c === undefined ? new Date().getTime() : _0x29e24c;
      const _0x2a0075 = this.getInitialisedState(_0x38c1d7);
      if (this.shouldBlockByInitTime(_0x2a0075, _0x29e24c)) {
        return _0x5ccbd3.AdsThrottlerResult.INIT_TIME;
      } else if (this.shouldBlockByFrequency(_0x2a0075, _0x29e24c)) {
        return _0x5ccbd3.AdsThrottlerResult.FREQUENCY;
      } else {
        return _0x5ccbd3.AdsThrottlerResult.NO_THROTTLING;
      }
    }
    checkpoint(_0x30f9b9, _0x44aadf) {
      _0x44aadf = _0x44aadf === undefined ? new Date().getTime() : _0x44aadf;
      return Object.assign(Object.assign({}, _0x30f9b9), {
        isFirstAd: false,
        isFirstAdEver: false,
        lastShownAd: _0x44aadf
      });
    }
  }
  const _0x1a0590 = {
    logEvent: () => {}
  };
  var _0x511539;
  var _0xd5da2f;
  _0x5ccbd3.AdResponseStatus = undefined;
  (_0x511539 = _0x5ccbd3.AdResponseStatus || (_0x5ccbd3.AdResponseStatus = {})).AD_CLOSED = "adclosed";
  _0x511539.AD_LEAVING_APPLICATION = "adleavingapplication";
  _0x511539.CANCELED = "canceled";
  _0x511539.ERROR = "error";
  _0x511539.INTERNAL_ERROR = "internalerror";
  _0x511539.INVALID_REQUEST = "invalidrequest";
  _0x511539.NETWORK_ERROR = "networkerror";
  _0x511539.NOFILL = "nofill";
  _0x511539.SUCCESS = "success";
  _0x511539.THROTTLED = "throttled";
  _0x511539.TIMEOUT = "timeout";
  _0x5ccbd3.AdFinishedStatus = undefined;
  (_0xd5da2f = _0x5ccbd3.AdFinishedStatus || (_0x5ccbd3.AdFinishedStatus = {})).ERROR = "error";
  _0xd5da2f.NOFILL = "nofill";
  _0xd5da2f.SKIPPED = "skipped";
  _0xd5da2f.SUCCESS = "success";
  _0xd5da2f.TIMEDOUT = "timedout";
  const _0x3a8bc1 = {
    [_0x5ccbd3.AdType.INTERSTITIAL]: "mandatory",
    [_0x5ccbd3.AdType.REWARD]: "rewarded",
    [_0x5ccbd3.AdType.BANNER]: "banner"
  };
  class _0x5788ec {
    constructor(_0x5af86e, _0x1d83a5) {
      this.tracker = _0x5af86e;
      this.params = _0x1d83a5;
    }
    getEventName(_0x1d6d10) {
      var _0x1f9561;
      return "ad_" + ((_0x1f9561 = _0x3a8bc1[this.params.adType]) !== null && _0x1f9561 !== undefined ? _0x1f9561 : this.params.adType) + "_" + _0x1d6d10;
    }
    logEvent(_0x57c1a2, _0x5f4dc4) {
      this.tracker.logEvent(_0x57c1a2, _0x5f4dc4, _0x5ccbd3.ConsentOptions.None);
    }
    requestingAd(_0x3c2423, _0x2d4ea4) {
      const _0x2f6ea2 = this.getEventName("request");
      this.logEvent(_0x2f6ea2, Object.assign(Object.assign({}, _0x2d4ea4), {
        provider: this.params.provider,
        advertisement_id: _0x3c2423
      }));
    }
    receivedAdResponse(_0x17620b, _0xb1a7c8, _0x4393ad) {
      const _0x19ea9d = this.getEventName("response");
      this.logEvent(_0x19ea9d, Object.assign(Object.assign({}, _0x4393ad), {
        provider: this.params.provider,
        advertisement_id: _0xb1a7c8,
        ad_response: _0x17620b
      }));
    }
    willShowAd(_0x2606b1, _0x4b4a29, _0x558eab) {
      const _0x2bb691 = this.getEventName("show");
      this.logEvent(_0x2bb691, Object.assign(Object.assign({}, _0x558eab), {
        provider: this.params.provider,
        advertisement_id: _0x4b4a29,
        preloaded: _0x2606b1
      }));
    }
    finishedAd(_0x304018, _0x2558ed, _0x366503) {
      const _0x1e3c48 = this.getEventName("finish");
      this.logEvent(_0x1e3c48, Object.assign(Object.assign({}, _0x366503), {
        provider: this.params.provider,
        advertisement_id: _0x2558ed,
        ad_result: _0x304018
      }));
    }
  }
  var _0x5a2339;
  var _0x376b14;
  _0x5ccbd3.AdShowResult = undefined;
  (_0x5a2339 = _0x5ccbd3.AdShowResult || (_0x5ccbd3.AdShowResult = {})).NOT_DISPLAYED = "not_displayed";
  _0x5a2339.DELIVERED = "delivered";
  _0x5a2339.COMPLETED = "completed";
  class _0x261129 {
    constructor({
      env: _0x8536a6,
      logger: _0x3a55d3 = _0x18650f,
      throttler: _0x19bf2c,
      storage: _0x4a6851 = _0x55f80a,
      tracker: _0x37fcc0 = _0x1a0590,
      controls: _0x200819 = _0xd1dd36,
      onBeforeInit: _0x3dec5e = () => Promise.resolve()
    } = {}) {
      this.config = {};
      this.registeredProviders = {};
      this.providers = [];
      this.ADSTORAGE_FIRST_TIME_KEY = "__ads_firstTimeView";
      this.adShownListeners = [];
      this.adShownCount = {
        [_0x5ccbd3.AdType.INTERSTITIAL]: 0,
        [_0x5ccbd3.AdType.REWARD]: 0,
        [_0x5ccbd3.AdType.BANNER]: 0,
        [_0x5ccbd3.AdType.SURVEY]: 0,
        [_0x5ccbd3.AdType.REWARDED_INTERSTITIAL]: 0
      };
      this.AdType = _0x5ccbd3.AdType;
      this.AdSuccess = _0x5ccbd3.AdSuccess;
      this.AdShowResult = _0x5ccbd3.AdShowResult;
      this.env = _0x8536a6;
      this.logger = _0x3a55d3;
      this.throttler = _0x19bf2c || new _0x4cfbe8();
      this.storage = _0x4a6851;
      this.tracker = _0x37fcc0;
      this.controls = _0x200819;
      this.onBeforeInit = _0x3dec5e;
      this.throttlerState = {
        initTime: new Date().getTime(),
        isFirstAd: true,
        isFirstAdEver: false,
        lastShownAd: 0
      };
    }
    register(_0xa6f021) {
      const _0x173097 = _0xa6f021.getName() + "#" + _0xa6f021.getType();
      this.registeredProviders[_0x173097] = _0xa6f021;
    }
    configure(_0x514410) {
      this.config = _0x514410;
    }
    init() {
      return _0x3d1aad(this, undefined, undefined, function* () {
        var _0x52d622;
        yield (_0x52d622 = this.onBeforeInit) === null || _0x52d622 === undefined ? undefined : _0x52d622.call(this);
        this.throttlerState.isFirstAdEver = (yield this.storage.getItem(this.ADSTORAGE_FIRST_TIME_KEY, true)) || false;
        this.logger.log("[ads] first time ever?", this.throttlerState.isFirstAdEver);
        this.throttler.init(this.config.throttling || {});
        const _0x320124 = [...(this.config.providers || [])];
        _0x320124.sort((_0x58e5ee, _0x22ece3) => _0x58e5ee.priority - _0x22ece3.priority);
        const _0x27f043 = _0x320124.map(_0x12edc5 => {
          const _0x47a296 = _0x12edc5.name + "#" + _0x12edc5.type;
          return {
            provider: this.registeredProviders[_0x47a296],
            providerConfig: _0x12edc5,
            key: _0x47a296
          };
        }).filter(({
          provider: _0x22f296
        }) => _0x22f296).map(({
          provider: _0x522cb4,
          providerConfig: _0x392574,
          key: _0x575214
        }) => {
          const _0x31b4f = new _0x5788ec(this.tracker, {
            adType: _0x522cb4.getType(),
            provider: _0x522cb4.getName()
          });
          return _0x522cb4.init(_0x392574, this.controls, _0x31b4f).then(() => _0x522cb4).catch(_0x156280 => {
            this.logger.warn("[ads] Ad provider " + _0x575214 + " could not be initialised", _0x156280);
          });
        });
        const _0x45bd0b = (yield Promise.all(_0x27f043)).filter(_0x198ecf => _0x198ecf !== undefined);
        this.providers = _0x45bd0b;
      });
    }
    getProviders() {
      return this.providers;
    }
    getProvidersByType(_0x4f3b10) {
      return this.providers.filter(_0x5a03fa => _0x5a03fa.getType() === _0x4f3b10);
    }
    isSupported(_0x41c727) {
      return this.getProvidersByType(_0x41c727).length > 0;
    }
    isReady(_0x3b226e) {
      return this.getProvidersByType(_0x3b226e).find(_0x965c18 => _0x965c18.isReady()) !== undefined;
    }
    show(_0x2794e7) {
      return _0x3d1aad(this, undefined, undefined, function* () {
        const _0x31f9b1 = _0x5b7b7f[_0x2794e7].throttleable;
        if (_0x31f9b1) {
          const _0x65377b = this.throttler.mustThrottle(this.throttlerState);
          if (_0x65377b) {
            this.logger.log("[ads] Ad was throttled, reason =", _0x65377b);
            return Promise.resolve(_0x5ccbd3.AdShowResult.NOT_DISPLAYED);
          }
        }
        const _0x93e85d = this.getProvidersByType(_0x2794e7);
        if (_0x93e85d.length === 0) {
          this.logger.error("[ads] no providers for", _0x2794e7);
        }
        let _0x55b25f = false;
        const _0x1a8516 = yield function (_0x43262c, _0x4da7b6) {
          const _0x3afc66 = _0x2ad850 => {
            const _0x326824 = _0x43262c[_0x2ad850];
            if (_0x326824) {
              return _0x4da7b6(_0x326824).then(_0x9cfb2b => _0x9cfb2b === undefined ? _0x3afc66(_0x2ad850 + 1) : _0x9cfb2b);
            } else {
              return Promise.resolve(undefined);
            }
          };
          return _0x3afc66(0);
        }(_0x93e85d, _0x312e3a => _0x3d1aad(this, undefined, undefined, function* () {
          try {
            if (!_0x312e3a.isReady()) {
              this.logger.warn("[ads] provider", _0x312e3a.getName(), "not ready");
              return;
            }
            if (!(_0x55b25f || !_0x5b7b7f[_0x2794e7].stopsGameFlow || _0x312e3a.useManualControl())) {
              this.controls.onSuspend();
              this.controls.onAudioSuspend();
              _0x55b25f = true;
            }
            this.logger.log("[ads] showing", _0x312e3a.getName(), "for", _0x2794e7);
            const _0x259788 = yield _0x312e3a.show();
            if (_0x259788.success === false) {
              this.logger.error("[ads] show error", _0x259788.message);
              this.trackAdError(_0x312e3a, _0x2794e7, _0x259788);
            }
            if (_0x259788.success) {
              return _0x259788.code;
            } else {
              return undefined;
            }
          } catch (_0x5b6c34) {
            this.logger.error("[ads] show error", _0x5b6c34);
          }
        }));
        if (_0x55b25f) {
          this.controls.onAudioResume();
          this.controls.onResume();
        }
        if (_0x1a8516 !== undefined) {
          if (this.env === _0x5ccbd3.Env.DEVELOPMENT) {
            window.focus();
          }
          if (_0x31f9b1) {
            this.throttlerState = this.throttler.checkpoint(this.throttlerState);
            yield this.storage.setItem(this.ADSTORAGE_FIRST_TIME_KEY, false);
          }
          this.adShownCount[_0x2794e7] = (this.adShownCount[_0x2794e7] || 0) + 1;
          this.notifyAdShown(_0x2794e7, _0x1a8516);
          if (_0x1a8516 === _0x5ccbd3.AdSuccess.COMPLETED) {
            return _0x5ccbd3.AdShowResult.COMPLETED;
          } else {
            return _0x5ccbd3.AdShowResult.DELIVERED;
          }
        } else {
          this.logger.warn("[ads] no ad shown for", _0x2794e7);
          return _0x5ccbd3.AdShowResult.NOT_DISPLAYED;
        }
      });
    }
    hide(_0x2b1ee2) {
      return _0x3d1aad(this, undefined, undefined, function* () {
        const _0x3d5aeb = this.getProvidersByType(_0x2b1ee2);
        for (const _0x26d5de of _0x3d5aeb) {
          try {
            yield _0x26d5de.hide();
          } catch (_0x26d7a3) {
            this.logger.error("[ads] hide error", _0x26d7a3);
          }
        }
      });
    }
    setUserConsent(_0x4efe20) {
      this.providers.forEach(_0x47eeab => {
        var _0x13fdf7;
        if ((_0x13fdf7 = _0x47eeab.setUserConsent) === null || _0x13fdf7 === undefined) {
          return undefined;
        } else {
          return _0x13fdf7.call(_0x47eeab, _0x4efe20);
        }
      });
    }
    onAdShown(_0x2d78f5) {
      this.adShownListeners.push(_0x2d78f5);
      return () => {
        const _0x302fe5 = this.adShownListeners.indexOf(_0x2d78f5);
        if (_0x302fe5 >= 0) {
          this.adShownListeners.splice(_0x302fe5, 1);
        }
      };
    }
    notifyAdShown(_0x53c5de, _0x23511d) {
      this.adShownListeners.forEach(_0x37b0a2 => _0x37b0a2(_0x53c5de, this.adShownCount, _0x23511d));
    }
    getAdShownCount() {
      return this.adShownCount;
    }
    trackAdError(_0x1bd4c9, _0xca15fe, _0x5722cf) {
      const _0x11e9cd = {
        provider: _0x1bd4c9.getName(),
        type: _0xca15fe,
        code: _0x5722cf.code
      };
      const _0x107fc3 = {
        msg: _0x5722cf.message + " - " + JSON.stringify(_0x11e9cd),
        line: 0,
        col: 0,
        label: JSON.stringify(_0x11e9cd)
      };
      this.tracker.logEvent("error", _0x107fc3, _0x5ccbd3.ConsentOptions.None);
    }
  }
  class _0x4335ee {
    constructor(_0x108bb5, _0x363cb6) {
      this.auth = _0x363cb6;
      this.baseUrl = _0x108bb5.replace(/\/$/, "");
    }
    getFriends(_0x3854e3) {
      return _0x3d1aad(this, undefined, undefined, function* () {
        var _0x1b11a7;
        const _0x3bcd88 = yield (_0x1b11a7 = this.auth) === null || _0x1b11a7 === undefined ? undefined : _0x1b11a7.authenticatedFetch(this.baseUrl + "/friends/" + _0x3854e3, {
          method: "GET",
          headers: {
            "Content-Type": "application/json"
          }
        });
        if (!(_0x3bcd88 == null ? undefined : _0x3bcd88.ok)) {
          throw new _0x4d7549(_0x3bcd88);
        }
        return yield _0x3bcd88.json();
      });
    }
    addFriend(_0x3ad1ed, _0xab9635) {
      return _0x3d1aad(this, undefined, undefined, function* () {
        var _0x54ed49;
        const _0xf5a4dd = yield (_0x54ed49 = this.auth) === null || _0x54ed49 === undefined ? undefined : _0x54ed49.authenticatedFetch(this.baseUrl + "/friends/" + _0x3ad1ed, {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify(_0xab9635)
        });
        if (!(_0xf5a4dd == null ? undefined : _0xf5a4dd.ok)) {
          throw new _0x4d7549(_0xf5a4dd);
        }
        return yield _0xf5a4dd.json();
      });
    }
    removeFriend(_0x3b3b3b, _0x1787dc) {
      return _0x3d1aad(this, undefined, undefined, function* () {
        var _0x3d5ea5;
        const _0x3c648a = yield (_0x3d5ea5 = this.auth) === null || _0x3d5ea5 === undefined ? undefined : _0x3d5ea5.authenticatedFetch(this.baseUrl + "/friends/" + _0x3b3b3b, {
          method: "DELETE",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify(_0x1787dc)
        });
        if (!(_0x3c648a == null ? undefined : _0x3c648a.ok)) {
          throw new _0x4d7549(_0x3c648a);
        }
      });
    }
    syncFriends(_0x5184bd, _0x5949c5) {
      return _0x3d1aad(this, undefined, undefined, function* () {
        var _0x160c83;
        const _0x3ed760 = yield (_0x160c83 = this.auth) === null || _0x160c83 === undefined ? undefined : _0x160c83.authenticatedFetch(this.baseUrl + "/friends/" + _0x5184bd + "/sync", {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify(_0x5949c5)
        });
        if (!(_0x3ed760 == null ? undefined : _0x3ed760.ok)) {
          throw new _0x4d7549(_0x3ed760);
        }
        return yield _0x3ed760.json();
      });
    }
  }
  class _0x4d7549 extends Error {
    constructor(_0x36dbff) {
      super(_0x36dbff.statusText);
      this.response = _0x36dbff;
      this.response = _0x36dbff;
      this.name = "ResponseError";
    }
  }
  (function (_0xa21bd5) {
    _0xa21bd5[_0xa21bd5.shareMessage = 0] = "shareMessage";
    _0xa21bd5[_0xa21bd5.sendUpdate = 1] = "sendUpdate";
    _0xa21bd5[_0xa21bd5.invite = 2] = "invite";
    _0xa21bd5[_0xa21bd5.getFriends = 3] = "getFriends";
    _0xa21bd5[_0xa21bd5.getContextId = 4] = "getContextId";
    _0xa21bd5[_0xa21bd5.getContextData = 5] = "getContextData";
    _0xa21bd5[_0xa21bd5.getContextPlayers = 6] = "getContextPlayers";
  })(_0x376b14 || (_0x376b14 = {}));
  class _0x139991 {
    constructor({
      provider: _0x59e869
    }) {
      this.API = _0x376b14;
      this.provider = _0x59e869;
    }
    shareMessage(_0x386071) {
      return this.provider.shareMessage(_0x386071);
    }
    sendUpdate(_0x137d93) {
      return this.provider.sendUpdate(_0x137d93);
    }
    canInvite() {
      return this.provider.canInvite();
    }
    invite(_0x5c65c1) {
      return this.provider.invite(_0x5c65c1);
    }
    getFriends() {
      return this.provider.getFriends();
    }
    getContextData() {
      return this.provider.getContextData();
    }
    getContextId() {
      return this.provider.getContextId();
    }
    getContextPlayers() {
      return this.provider.getContextPlayers();
    }
    getSupportedAPIs() {
      return this.provider.getSupportedAPIs();
    }
    isSupportedAPI(_0x3e84ea) {
      return this.provider.getSupportedAPIs().indexOf(_0x3e84ea) !== -1;
    }
  }
  const _0x1eba93 = {
    shareMessage() {
      return _0x3d1aad(this, undefined, undefined, function* () {});
    },
    sendUpdate() {
      return _0x3d1aad(this, undefined, undefined, function* () {});
    },
    canInvite() {
      return _0x3d1aad(this, undefined, undefined, function* () {
        return false;
      });
    },
    invite() {
      return _0x3d1aad(this, undefined, undefined, function* () {});
    },
    getContextId() {
      return _0x3d1aad(this, undefined, undefined, function* () {
        return Promise.resolve("");
      });
    },
    getContextData() {
      return _0x3d1aad(this, undefined, undefined, function* () {
        return Promise.resolve({});
      });
    },
    getContextPlayers() {
      return _0x3d1aad(this, undefined, undefined, function* () {
        return Promise.resolve([]);
      });
    },
    getFriends() {
      return _0x3d1aad(this, undefined, undefined, function* () {
        return Promise.resolve([]);
      });
    },
    getSupportedAPIs: () => []
  };
  var _0x4504c9;
  var _0x5c6854;
  var _0x265ad9;
  (function (_0x16c252) {
    _0x16c252.UPDATE_STATUS = "UPDATE_STATUS";
    _0x16c252.SEND_GAME_INVITE = "SEND_GAME_INVITE";
  })(_0x4504c9 || (_0x4504c9 = {}));
  (function (_0x2ff29b) {
    _0x2ff29b.onFriendStatusUpdated = "FRIEND_STATUS_UPDATED";
    _0x2ff29b.onConnect = "ON_CONNECT";
    _0x2ff29b.onGameInvite = "RECEIVE_GAME_INVITE";
    _0x2ff29b.onError = "ON_ERROR";
  })(_0x5c6854 || (_0x5c6854 = {}));
  (function (_0x4f0479) {
    _0x4f0479.open = "open";
    _0x4f0479.close = "close";
    _0x4f0479.error = "error";
    _0x4f0479.message = "message";
    _0x4f0479.retry = "retry";
  })(_0x265ad9 || (_0x265ad9 = {}));
  class _0x423f6e {
    constructor(_0x4d655e) {
      var _0x3873a8;
      this.retries = 0;
      this.eventListeners = {
        open: [],
        close: [],
        error: [],
        message: [],
        retry: []
      };
      this.closedByUser = false;
      this.RECONNECT_DEFAULT_BACKOFF_MS = 1000;
      this.RECONNECT_RETRY_MS = 500;
      this.onOpen = _0x16da45 => this.handleEvent(_0x265ad9.open, _0x16da45);
      this.onClose = _0x53aa69 => this.handleEvent(_0x265ad9.close, _0x53aa69);
      this.onError = _0x5781f3 => this.handleEvent(_0x265ad9.error, _0x5781f3);
      this.onMessage = _0x322bc5 => this.handleEvent(_0x265ad9.message, _0x322bc5);
      this.url = _0x4d655e.url;
      this.logger = _0x4d655e.logger;
      this.webSocketBuilder = (_0x3873a8 = _0x4d655e.webSocketBuilder) !== null && _0x3873a8 !== undefined ? _0x3873a8 : _0x2970b5 => new WebSocket(_0x2970b5);
    }
    send(_0x1ea379) {
      if (this.websocket) {
        if (this.getConnectionStatus() === WebSocket.OPEN) {
          if (this.closedByUser) {
            this.logger.error("WebsocketClient: Cannot send message, closed by user");
          } else {
            this.websocket.send(_0x1ea379);
          }
        } else {
          this.logger.error("WebsocketClient: Cannot send message, not connected");
        }
      } else {
        this.logger.error("WebsocketClient: Cannot send message, not initialised");
      }
    }
    connect() {
      return _0x3d1aad(this, undefined, undefined, function* () {
        this.closedByUser = false;
        if (this.websocket !== undefined) {
          this.websocket.removeEventListener(_0x265ad9.open, this.onOpen);
          this.websocket.removeEventListener(_0x265ad9.close, this.onClose);
          this.websocket.removeEventListener(_0x265ad9.error, this.onError);
          this.websocket.removeEventListener(_0x265ad9.message, this.onMessage);
          this.websocket.close();
        }
        this.websocket = this.webSocketBuilder(yield this.url());
        this.websocket.addEventListener(_0x265ad9.open, this.onOpen);
        this.websocket.addEventListener(_0x265ad9.close, this.onClose);
        this.websocket.addEventListener(_0x265ad9.error, this.onError);
        this.websocket.addEventListener(_0x265ad9.message, this.onMessage);
      });
    }
    close(_0x5ef49f, _0x51f059) {
      var _0x27f083;
      this.closedByUser = true;
      if (!((_0x27f083 = this.websocket) === null || _0x27f083 === undefined)) {
        _0x27f083.close(_0x5ef49f, _0x51f059);
      }
    }
    addEventListener(_0xf35fd3, _0x328fc9) {
      const _0x89daad = {
        listener: _0x328fc9
      };
      this.eventListeners[_0xf35fd3].push(_0x89daad);
    }
    removeEventListener(_0xd83468, _0xa109ca) {
      this.eventListeners[_0xd83468] = this.eventListeners[_0xd83468].filter(_0x45c28c => _0x45c28c.listener !== _0xa109ca);
    }
    getConnectionStatus() {
      if (this.websocket) {
        return this.websocket.readyState;
      } else {
        return WebSocket.CLOSED;
      }
    }
    handleEvent(_0x2353d5, _0x233a0e) {
      switch (_0x2353d5) {
        case _0x265ad9.close:
          if (!this.closedByUser) {
            this.reconnect();
          }
          break;
        case _0x265ad9.open:
          this.retries = 0;
        case _0x265ad9.error:
        case _0x265ad9.message:
      }
      this.dispatchEvent(_0x2353d5, _0x233a0e);
    }
    reconnect() {
      const _0x4414c1 = this.RECONNECT_RETRY_MS * this.retries + this.RECONNECT_DEFAULT_BACKOFF_MS;
      const _0x2167a4 = {
        detail: {
          retries: this.retries++,
          backoff: _0x4414c1
        }
      };
      // TOLOOK
      setTimeout(() => {
        if (this.closedByUser) {
          return;
        }
        const _0x200af1 = new CustomEvent(_0x265ad9.retry, _0x2167a4);
        this.dispatchEvent(_0x265ad9.retry, _0x200af1);
        this.connect();
      }, _0x4414c1);
    }
    dispatchEvent(_0x392631, _0x5c1b29) {
      this.eventListeners[_0x392631].forEach(_0x200e20 => {
        _0x200e20.listener(_0x5c1b29);
      });
    }
  }
  class _0x34ea78 {
    constructor(_0x481e00, _0x5efefd) {
      this.friendsStatus = new Map();
      this.eventListeners = {
        [_0x5c6854.onFriendStatusUpdated]: [],
        [_0x5c6854.onConnect]: [],
        [_0x5c6854.onGameInvite]: [],
        [_0x5c6854.onError]: []
      };
      this.SocialEvents = _0x5c6854;
      const {
        apiHost: _0x3febdd,
        gameId: _0x27bdcf
      } = _0x481e00;
      this.apiHost = _0x3febdd;
      this.gameId = _0x27bdcf;
      this.logger = _0x5efefd.logger;
      this.auth = _0x5efefd.auth;
      this.websocket = _0x5efefd.webSocketClientBuilder ? _0x5efefd.webSocketClientBuilder() : new _0x423f6e({
        logger: this.logger,
        url: () => this.getFreshUrl(this.apiHost, this.gameId)
      });
      if (!this.websocket) {
        throw new Error("websocket client is not defined");
      }
      this.on(_0x5c6854.onConnect, ({
        data: _0x5b3cb4
      }) => {
        const _0x521beb = _0x5b3cb4.friends;
        for (const _0x20fc66 of _0x521beb) {
          this.friendsStatus.set(_0x20fc66.userId, _0x20fc66);
        }
      });
      this.on(_0x5c6854.onFriendStatusUpdated, ({
        data: _0x1c5fe7
      }) => {
        this.friendsStatus.set(_0x1c5fe7.userId, _0x1c5fe7);
      });
      this.websocket.addEventListener(_0x265ad9.open, () => {
        this.logger.log("connected to social server");
      });
      this.websocket.addEventListener(_0x265ad9.close, _0xad81a8 => {
        this.logger.log("websocket client closed", _0xad81a8);
      });
      this.websocket.addEventListener(_0x265ad9.error, _0x46d89d => {
        this.logger.error("websocket client error", _0x46d89d);
      });
      this.websocket.addEventListener(_0x265ad9.message, _0x5acc75 => {
        const {
          data: _0x2944b6
        } = _0x5acc75;
        const _0x515059 = JSON.parse(_0x2944b6);
        if (Object.values(_0x5c6854).includes(_0x515059.code)) {
          this.dispatchEvent(_0x515059.code, _0x515059);
        } else {
          this.logger.error("event type is not supported");
        }
      });
      this.auth.addStatusChangeListener(_0x4cf920 => this.onAuthStatusChanged(_0x4cf920));
    }
    connect() {
      const _0x22a9a1 = this.connectedUser === this.auth.getFRVRID();
      const _0x3d38e3 = this.websocket.getConnectionStatus();
      if (_0x3d38e3 !== WebSocket.OPEN && _0x3d38e3 !== WebSocket.CONNECTING || !_0x22a9a1) {
        this.connectedUser = this.auth.getFRVRID();
        this.websocket.connect();
      }
    }
    close() {
      this.friendsStatus.clear();
      this.connectedUser = undefined;
      this.websocket.close();
    }
    on(_0x4c3252, _0xf7e77c) {
      const _0x1f93fb = {
        listener: _0xf7e77c
      };
      const _0x354596 = this.eventListeners[_0x4c3252];
      if (!_0x354596) {
        throw new Error("event type \"" + _0x4c3252 + "\" is not supported");
      }
      _0x354596.push(_0x1f93fb);
    }
    getFriendsStatus() {
      return Array.from(this.friendsStatus.values());
    }
    sendGameInvite(_0x45dd56, _0x19dd02, _0x485517) {
      const _0x431c60 = {
        code: _0x4504c9.SEND_GAME_INVITE,
        data: {
          recipientId: _0x45dd56,
          lobbyId: _0x19dd02,
          gameId: this.gameId,
          metadata: _0x485517
        }
      };
      this.send(_0x431c60);
    }
    updateStatus(_0x5c9cd6) {
      const _0x2f0feb = {
        code: _0x4504c9.UPDATE_STATUS,
        data: {
          metadata: _0x5c9cd6,
          gameId: this.gameId
        }
      };
      this.send(_0x2f0feb);
    }
    dispatchEvent(_0x583b33, _0x426d97) {
      this.eventListeners[_0x583b33].forEach(_0x5b5ed8 => {
        _0x5b5ed8.listener(_0x426d97);
      });
    }
    send(_0x3812ff) {
      this.websocket.send(JSON.stringify(_0x3812ff));
    }
    onAuthStatusChanged(_0x465852) {
      return _0x3d1aad(this, undefined, undefined, function* () {
        if (_0x465852) {
          const _0x5ded27 = this.websocket.getConnectionStatus();
          if (!(_0x5ded27 !== WebSocket.OPEN && _0x5ded27 !== WebSocket.CONNECTING)) {
            this.connect();
          }
        } else {
          this.close();
        }
      });
    }
    getFreshUrl(_0x10354f, _0x33f579) {
      return _0x3d1aad(this, undefined, undefined, function* () {
        const _0x1ddb6c = yield this.auth.getFreshAccessToken();
        return "wss://" + _0x10354f + "/ws?token=" + _0x1ddb6c + "&gameId=" + _0x33f579;
      });
    }
  }
  class _0x51e7bb {
    constructor(_0xdcfaa, _0x5f5787) {
      var _0x1e7f9e;
      var _0xb8d0fc;
      var _0x85cdda;
      this.config = _0xdcfaa;
      this.container = _0x5f5787;
      this.syncedFriendsbyFRVRIDCache = {};
      this.syncedFriendsbyChannelIDCache = {};
      this.providerFriendsCache = {};
      this.API = _0x376b14;
      this.auth = _0x5f5787.auth;
      this.provider = (_0x1e7f9e = _0x5f5787.provider) !== null && _0x1e7f9e !== undefined ? _0x1e7f9e : _0x1eba93;
      this.gameId = _0xdcfaa.gameId;
      let _0x22e7fa = (_0xb8d0fc = _0xdcfaa.apiHostOverride) !== null && _0xb8d0fc !== undefined ? _0xb8d0fc : _0xdcfaa.env === _0x5ccbd3.Env.PRODUCTION ? "crucible.frvr.com" : "staging.crucible.frvr.com";
      _0x22e7fa += "/v1/social";
      this.webClient = new _0x4335ee("https://" + _0x22e7fa, this.auth);
      this.wsClient = new _0x34ea78(Object.assign(Object.assign({}, this.config), {
        apiHost: _0x22e7fa
      }), this.container);
      this.socialPlatform = new _0x139991({
        provider: this.provider
      });
      if ((_0x85cdda = _0xdcfaa.syncFriendsOnLogin) === null || _0x85cdda === undefined || _0x85cdda) {
        this.auth.addStatusChangeListener(this.onAuthStatusChange.bind(this));
      }
    }
    get live() {
      return this.wsClient;
    }
    get platform() {
      return this.socialPlatform;
    }
    syncFriends() {
      return _0x3d1aad(this, undefined, undefined, function* () {
        const _0x10e281 = yield this.provider.getFriends();
        const _0x5a297c = _0x10e281.reduce((_0x36d59d, _0xb22399) => {
          var _0x50f437;
          const _0x2e8b5d = (_0x50f437 = _0x36d59d.get(_0xb22399.channel)) !== null && _0x50f437 !== undefined ? _0x50f437 : [];
          _0x2e8b5d.push(_0xb22399.id);
          _0x36d59d.set(_0xb22399.channel, _0x2e8b5d);
          return _0x36d59d;
        }, new Map());
        const _0x21d873 = [];
        const _0x2907e0 = Array.from(_0x5a297c.entries());
        for (const [_0x77ce48, _0x345f54] of _0x2907e0) {
          const _0x520d2c = yield this.webClient.syncFriends(this.getUserId(), {
            channel: _0x77ce48,
            gameId: this.gameId,
            friendIds: _0x345f54
          });
          _0x21d873.push(..._0x520d2c);
        }
        this.syncedFriendsbyFRVRIDCache = _0x21d873.reduce((_0x3d47be, _0x4b6603) => {
          _0x3d47be[_0x4b6603.userId] = _0x4b6603;
          return _0x3d47be;
        }, {});
        this.syncedFriendsbyChannelIDCache = _0x21d873.reduce((_0x18598b, _0x3816ef) => {
          _0x18598b[_0x3816ef.channelUserId] = _0x3816ef;
          return _0x18598b;
        }, {});
        this.providerFriendsCache = _0x10e281.reduce((_0x3696f1, _0x3368a9) => {
          _0x3696f1[_0x3368a9.id] = _0x3368a9;
          return _0x3696f1;
        }, {});
        return _0x21d873;
      });
    }
    getAllFriends() {
      return _0x3d1aad(this, undefined, undefined, function* () {
        return yield this.webClient.getFriends(this.getUserId());
      });
    }
    getFriendByFRVRID(_0xecbdd8) {
      return _0x3d1aad(this, undefined, undefined, function* () {
        const _0x32510e = this.syncedFriendsbyFRVRIDCache[_0xecbdd8];
        if (!_0x32510e) {
          return;
        }
        const _0x5a8d59 = this.providerFriendsCache[_0x32510e.channelUserId];
        return Object.assign(Object.assign({}, _0x32510e), {
          name: _0x5a8d59 == null ? undefined : _0x5a8d59.name,
          image: _0x5a8d59 == null ? undefined : _0x5a8d59.image
        });
      });
    }
    getFriendByChannelId(_0x4c45ae) {
      return _0x3d1aad(this, undefined, undefined, function* () {
        const _0x3d7ae5 = this.syncedFriendsbyChannelIDCache[_0x4c45ae];
        if (!_0x3d7ae5) {
          return;
        }
        const _0x495bbf = this.providerFriendsCache[_0x4c45ae];
        return Object.assign(Object.assign({}, _0x3d7ae5), {
          name: _0x495bbf == null ? undefined : _0x495bbf.name,
          image: _0x495bbf == null ? undefined : _0x495bbf.image
        });
      });
    }
    addFriend(_0x5dc61f) {
      return _0x3d1aad(this, undefined, undefined, function* () {
        return yield this.webClient.addFriend(this.getUserId(), {
          friendId: _0x5dc61f
        });
      });
    }
    removeFriend(_0xd51d60) {
      return _0x3d1aad(this, undefined, undefined, function* () {
        return yield this.webClient.removeFriend(this.getUserId(), {
          friendId: _0xd51d60
        });
      });
    }
    getUserId() {
      const _0x596681 = this.auth.getFRVRID();
      if (_0x596681 === null) {
        throw new _0x1f35aa("not logged in");
      }
      return _0x596681;
    }
    onAuthStatusChange(_0x45f74e) {
      if (_0x45f74e) {
        this.syncFriends();
      }
    }
    shareMessage(_0x3bd1f3) {
      return this.socialPlatform.shareMessage(_0x3bd1f3);
    }
    sendUpdate(_0x44944b) {
      return this.socialPlatform.sendUpdate(_0x44944b);
    }
    invite(_0x25c27b) {
      return this.socialPlatform.invite(_0x25c27b);
    }
    getFriends() {
      return this.socialPlatform.getFriends();
    }
    getSupportedAPIs() {
      return this.socialPlatform.getSupportedAPIs();
    }
    isSupportedAPI(_0xd04a47) {
      return this.socialPlatform.isSupportedAPI(_0xd04a47);
    }
  }
  class _0x1f35aa extends Error {
    constructor(_0x74457f) {
      super(_0x74457f);
    }
  }
  const _0x375b89 = {
    getId: () => "",
    isInRoom() {
      return _0x3d1aad(this, undefined, undefined, function* () {
        return false;
      });
    },
    getRoomData() {
      return _0x3d1aad(this, undefined, undefined, function* () {
        return {};
      });
    },
    getRoomId() {
      return _0x3d1aad(this, undefined, undefined, function* () {
        return "";
      });
    },
    getPlayers() {
      return _0x3d1aad(this, undefined, undefined, function* () {
        return [];
      });
    },
    getSupportedAPIs: () => [],
    isSupportedAPI: _0x4a78b8 => false
  };
  class _0x3515a8 {
    constructor(_0x17db0e) {
      var _0x96f08b;
      this.auth = _0x17db0e.auth;
      this.provider = (_0x96f08b = _0x17db0e.provider) !== null && _0x96f08b !== undefined ? _0x96f08b : _0x375b89;
    }
    isInRoom() {
      return this.provider.isInRoom();
    }
    getRoomId() {
      return this.provider.getRoomId();
    }
    getRoomData() {
      return this.provider.getRoomData();
    }
    getPlayers() {
      return this.provider.getPlayers();
    }
    getSupportedAPIs() {
      return this.provider.getSupportedAPIs();
    }
    isSupportedAPI(_0x2e9b85) {
      return this.provider.isSupportedAPI(_0x2e9b85);
    }
  }
  var _0x41ea46;
  (function (_0x54f345) {
    _0x54f345[_0x54f345.getRoomData = 0] = "getRoomData";
    _0x54f345[_0x54f345.isInRoom = 1] = "isInRoom";
    _0x54f345[_0x54f345.getRoomId = 2] = "getRoomId";
    _0x54f345[_0x54f345.getPlayers = 3] = "getPlayers";
    _0x54f345[_0x54f345.subscribeToPlayerJoined = 4] = "subscribeToPlayerJoined";
    _0x54f345[_0x54f345.subscribeToPlayerLeft = 5] = "subscribeToPlayerLeft";
  })(_0x41ea46 || (_0x41ea46 = {}));
  const _0x552f01 = "coeus.frvr.com/v1/tm5";
  function _0x481fe3(_0x583cd7 = () => new XMLHttpRequest(), _0x1d2cb2) {
    let _0x54ac68;
    const _0x451742 = [];
    let _0x4e34e4 = null;
    const _0x5181a5 = !_0x1d2cb2 && navigator && typeof navigator.sendBeacon == "function";
    let _0x2f7185 = false;
    const _0x3a5020 = {
      protocol_version: "f",
      app_version: "av",
      engine_version: "ev",
      app_build: "ab",
      cohort: "co",
      channel: "ch",
      cmp_consents: "cmpc",
      cmp_legitimateInterests: "cmpl",
      games_played: "gp",
      play_session_id: "pi",
      play_session_count: "pc",
      days_elapsed: "de",
      facebook_player_id: "fi",
      facebook_context_type: "fc",
      facebook_entrypoint: "fe",
      facebook_referral_player_id: "fr",
      utm_source: "us",
      utm_medium: "um",
      utm_campaign: "uc",
      utm_term: "ut",
      utm_content: "uo",
      remote_user_id: "ru",
      global_user_id: "guid",
      device_width: "dw",
      device_height: "dh",
      non_interaction: "ni",
      country: "ct",
      event: "e",
      game: "g",
      user: "u",
      client_time: "t",
      value: "v",
      provider: "ao",
      ad_result: "ar",
      ad_response: "ag",
      ad_point: "ap",
      transport: "tr",
      web_url: "wu",
      retry: "r",
      label: "l",
      advertisement_id: "ai",
      script_version: "xv",
      cache_buster: "n",
      page_session_id: "si"
    };
    function _0x2064e6(_0x4caed2, _0x33eaad, _0x4f027f) {
      _0x4f027f = _0x4f027f !== undefined ? _0x4f027f : 5;
      _0x4caed2(_0x33eaad, function () {
        if (_0x4f027f > 0) {
          const _0x14a95e = (Math.pow(2, 5 - _0x4f027f) + Math.random()) * 5000;
          _0x33eaad.r = 5 - _0x4f027f + 1;
          // TOLOOK
          setTimeout(_0x2064e6.bind(undefined, _0x4caed2, _0x33eaad, --_0x4f027f), _0x14a95e);
        }
      });
    }
    function _0x2318fe(_0x5a7d0f, _0x33174e, _0x3c0e53) {
      if (navigator.sendBeacon(_0x5a7d0f, JSON.stringify(_0x33174e))) {
        return true;
      }
      _0x3c0e53();
    }
    function _0x42f693(_0x14185d, _0x101a6e, _0x38683c) {
      let _0x2b3214 = _0x583cd7();
      if (_0x2b3214.overrideMimeType) {
        _0x2b3214.overrideMimeType("text/plain; charset=UTF-8");
      }
      try {
        _0x2b3214.open("POST", _0x14185d, true);
        _0x2b3214.setRequestHeader("Content-type", "text/plain; charset=UTF-8");
        _0x2b3214.withCredentials = true;
        _0x2b3214.onreadystatechange = function () {
          if (_0x2b3214.readyState == 4) {
            const _0x3f78f5 = _0x2b3214.status;
            _0x2b3214 = _0x2b3214.onreadystatechange = null;
            if (_0x3f78f5 != 200 && _0x3f78f5 != 204) {
              _0x38683c();
            } else {
              _0x2f7185 = true;
            }
          }
        };
        _0x2b3214.send(JSON.stringify(_0x101a6e));
      } catch (_0x18cb8f) {
        _0x38683c();
      }
    }
    function _0x2c1e4d(_0x3d1c41, _0x28ac81, _0xfdd170) {
      _0x28ac81.n = Math.random();
      const _0x303a07 = document.createElement("img");
      _0x303a07.onload = function () {
        _0x2f7185 = true;
        _0x303a07.onerror = _0x303a07.onload = null;
      };
      _0x303a07.onerror = function () {
        _0xfdd170();
        _0x303a07.onerror = null;
      };
      _0x303a07.src = _0x3d1c41 + "?" + function (_0x3a3c5f) {
        const _0x5f1756 = [];
        for (const _0x32f93e in _0x3a3c5f) {
          if (_0x3a3c5f.hasOwnProperty(_0x32f93e)) {
            _0x5f1756.push(encodeURIComponent(_0x32f93e) + "=" + (_0x3a3c5f[_0x32f93e] !== undefined && _0x3a3c5f[_0x32f93e] != null ? encodeURIComponent(_0x3a3c5f[_0x32f93e]) : ""));
          }
        }
        return _0x5f1756.join("&");
      }(_0x28ac81);
      document.body.appendChild(_0x303a07);
    }
    function _0x3c2323(_0xd95050, _0x24dd5c) {
      if (_0x5181a5 && _0x2f7185) {
        _0x24dd5c.transport = "bcn";
        return _0x2318fe.bind(undefined, _0xd95050);
      } else if (XMLHttpRequest) {
        _0x24dd5c.transport = "xhr";
        return _0x42f693.bind(undefined, _0xd95050);
      } else {
        _0x24dd5c.transport = "img";
        return _0x2c1e4d.bind(undefined, _0xd95050 + "/i");
      }
    }
    function _0x699ebb(_0x3fb4c2) {
      const _0x27c0b2 = _0x3fb4c2.channel;
      let _0x4685b7;
      if (document && document.location && document.location.href) {
        _0x4685b7 = document.location.href;
      }
      const _0x23b3ac = _0x54ac68 == null ? undefined : _0x54ac68.getGlobalUserId();
      const _0x55e81 = _0x54ac68 == null ? undefined : _0x54ac68.getUserSource();
      const _0x10f5cd = ["https://", _0x552f01, _0x3fb4c2.context || "_unspecified_", _0x23b3ac || ""].join("/");
      _0x3fb4c2.app_version = _0x3fb4c2.app_version || "0.0.0";
      _0x3fb4c2.app_build = _0x3fb4c2.app_build || "000000";
      _0x3fb4c2.channel = _0x27c0b2 || _0x3fb4c2.channel;
      _0x3fb4c2.web_url = _0x4685b7;
      _0x3fb4c2.script_version = "2.0.1";
      _0x3fb4c2.protocol_version = 5;
      _0x3fb4c2.cache_buster = Math.random();
      _0x3fb4c2.referrer = document.referrer || null;
      if (_0x23b3ac !== undefined) {
        _0x3fb4c2.global_user_id = _0x23b3ac;
      }
      if (_0x55e81 !== undefined) {
        _0x3fb4c2.global_user_id_source = _0x55e81;
      }
      const _0x4803e5 = new Date().getTimezoneOffset() * 60 * 1000;
      _0x3fb4c2.client_time = new Date(Date.now() - _0x4803e5).toISOString().slice(0, -1);
      _0x2064e6(_0x3c2323(_0x10f5cd, _0x3fb4c2), function (_0xad06cf) {
        const _0x4f1de6 = {};
        for (const _0x4df127 in _0xad06cf) {
          if (_0xad06cf.hasOwnProperty(_0x4df127) && _0xad06cf[_0x4df127] !== undefined && _0xad06cf[_0x4df127] != null) {
            _0x4f1de6[_0x3a5020[_0x4df127] || _0x4df127] = _0xad06cf[_0x4df127];
          }
        }
        return _0x4f1de6;
      }(_0x3fb4c2));
    }
    return {
      init(_0xe42d56, _0x31cc49) {
        return _0x3d1aad(this, undefined, undefined, function* () {
          _0x54ac68 = _0x31cc49;
        });
      },
      getName: () => "FRVRAnalytics",
      send(_0x1e9a32, _0x521c8e, _0x457869, _0x18f5c8) {
        var _0x567346;
        _0x457869 = _0x521c8e !== undefined ? Object.assign(Object.assign(Object.assign({
          value: _0x521c8e
        }, _0x457869), _0x18f5c8), {
          event: _0x1e9a32
        }) : Object.assign(Object.assign(Object.assign({}, _0x457869), _0x18f5c8), {
          event: _0x1e9a32
        });
        _0x567346 = _0x457869;
        _0x451742.push(_0x567346);
        if (_0x4e34e4) {
          clearTimeout(_0x4e34e4);
        }
        _0x4e34e4 = // TOLOOK
        setTimeout(function () {
          for (; _0x451742.length > 0;) {
            _0x699ebb(_0x451742.shift());
          }
        }, 1);
      }
    };
  }
  var _0x12d53c;
  _0x5ccbd3.AnalyticsIDProviderStorageType = undefined;
  (_0x12d53c = _0x5ccbd3.AnalyticsIDProviderStorageType || (_0x5ccbd3.AnalyticsIDProviderStorageType = {})).IN_MEMORY = "in-memory";
  _0x12d53c.COOKIE = "cookie";
  _0x12d53c.LOCAL_STORAGE = "localStorage";
  const _0x255fb6 = {
    init: () => _0x3d1aad(undefined, undefined, undefined, function* () {}),
    getName: () => "",
    getUserSource: () => _0x5ccbd3.AnalyticsIDProviderStorageType.IN_MEMORY,
    getPageSessionId: () => "",
    getPlaySessionId: () => "",
    getGlobalUserId: () => "",
    managesUnconsentedIds: () => false
  };
  function _0x2e6752(_0x2ed965) {
    return (_0x2ed965 < 10 ? "0" : "") + _0x2ed965;
  }
  function _0x541f2c(_0x22d94e) {
    const _0x2df3d7 = _0x22d94e || "-";
    function _0x176c5d() {
      return ((1 + Math.random()) * 65536 | 0).toString(16).substring(1);
    }
    const _0xcbfba8 = new Date().getTime().toString(16).slice(0, 11) + ((1 + Math.random()) * 65536 | 0).toString(16).substring(1, 2);
    return _0x176c5d() + _0x176c5d() + _0x2df3d7 + _0x176c5d() + _0x2df3d7 + _0x176c5d() + _0x2df3d7 + _0x176c5d() + _0x2df3d7 + _0xcbfba8;
  }
  class _0x50c383 {
    constructor(_0x46fbb6) {
      this.storage = _0x46fbb6;
      this.PLAY_SESSION_TIMEOUT = 1800000;
      this.globalUserIdSource = _0x5ccbd3.AnalyticsIDProviderStorageType.COOKIE;
      this.canUseCookies = false;
    }
    setCanUseCookies() {
      if (document && document.cookie !== undefined) {
        document.cookie = "can_use_cookies=test;";
        this.canUseCookies = document.cookie.indexOf("can_use_cookies") > -1;
      } else {
        this.canUseCookies = false;
      }
    }
    init() {
      return _0x3d1aad(this, undefined, undefined, function* () {
        this.setCanUseCookies();
        if (this.canUseCookies) {
          this.globalUserIdSource = _0x5ccbd3.AnalyticsIDProviderStorageType.COOKIE;
        } else if (this.storage.isPersistent()) {
          this.globalUserIdSource = _0x5ccbd3.AnalyticsIDProviderStorageType.LOCAL_STORAGE;
        } else {
          this.globalUserIdSource = _0x5ccbd3.AnalyticsIDProviderStorageType.IN_MEMORY;
        }
        const _0x4f11e2 = yield this.storage.getItems(["pageSessionId", "playSessionId", "playSessionIdTimeStamp", "globalUserId"]);
        this.pageSessionId = _0x4f11e2.pageSessionId && String(_0x4f11e2.pageSessionId);
        this.playSessionId = _0x4f11e2.playSessionId && String(_0x4f11e2.playSessionId);
        this.playSessionIdTimeStamp = _0x4f11e2.playSessionIdTimeStamp && parseInt(String(_0x4f11e2.playSessionIdTimeStamp), 10);
        this.globalUserId = _0x4f11e2.globalUserId && String(_0x4f11e2.globalUserId);
      });
    }
    getName() {
      return "FRVRAnalytics";
    }
    getUserSource() {
      return this.globalUserIdSource;
    }
    getPageSessionId() {
      if (!this.pageSessionId) {
        this.pageSessionId = _0x541f2c();
        this.storage.setItem("pageSessionId", this.pageSessionId);
      }
      return this.pageSessionId;
    }
    getPlaySessionId() {
      if (this.playSessionId && this.playSessionIdTimeStamp + this.PLAY_SESSION_TIMEOUT < Date.now()) {
        this.playSessionId = undefined;
      }
      if (!this.playSessionId) {
        this.playSessionId = _0x541f2c();
        this.storage.setItem("playSessionId", this.playSessionId);
      }
      this.playSessionIdTimeStamp = Date.now();
      this.storage.setItem("playSessionIdTimeStamp", this.playSessionIdTimeStamp);
      return this.playSessionId;
    }
    getGlobalUserId() {
      if (this.canUseCookies) {
        return this.getGlobalUserIdFromCookie();
      } else {
        return this.getGlobalUserIdFromStorage();
      }
    }
    getGlobalUserIdFromStorage() {
      if (!this.globalUserId) {
        this.globalUserId = _0x541f2c();
        this.storage.setItem("globalUserId", this.globalUserId);
      }
      return this.globalUserId;
    }
    getGlobalUserIdFromCookie() {
      const _0x21df3a = document.cookie.match("^(?:.*_frvr=([^;]*)).*$");
      this.globalUserId = _0x21df3a && _0x21df3a[1] || _0x541f2c();
      this.refreshUserIdCookie(this.globalUserId);
      return this.globalUserId;
    }
    refreshUserIdCookie(_0x270143) {
      const _0x49c559 = new Date();
      _0x49c559.setDate(_0x49c559.getDate() + 730);
      document.cookie = "_frvr=" + _0x270143 + "; path=/; expires=" + new Date(_0x49c559).toUTCString() + "; domain=" + function () {
        const _0x296221 = document.location.hostname.split(".");
        for (let _0x139b8b = _0x296221.length - 1; _0x139b8b >= 0; _0x139b8b--) {
          const _0x3b8c72 = _0x296221.slice(_0x139b8b).join(".");
          document.cookie = "get_tld=test;domain=." + _0x3b8c72 + ";";
          if (document.cookie.indexOf("get_tld") > -1) {
            document.cookie = "get_tld=;domain=." + _0x3b8c72 + ";expires=Thu, 01 Jan 1970 00:00:01 GMT;";
            return _0x3b8c72;
          }
        }
        return "";
      }() + ";";
    }
  }
  class _0x24901f {
    constructor(_0x5bcc0d, _0x4fe9ba) {
      this.consentsBitSet = _0x5ccbd3.ConsentOptions.None;
      this.legitimateInterestsBitSet = _0x5ccbd3.ConsentOptions.None;
      this.consentIsLoaded = false;
      this.getName = () => "TcfV2ConsentProvider";
      this.logger = _0x4fe9ba;
      this.onConsentChangedHandlers = [];
      this.loadConsentManagementPlatform(_0x5bcc0d);
    }
    tcfDataBitSet2ConsentOptionsBitSet(_0x2d3acb) {
      let _0x539aee = 0;
      for (const _0x4fa44f in _0x2d3acb) {
        if (_0x2d3acb[_0x4fa44f]) {
          _0x539aee |= 1 << Number(_0x4fa44f);
        }
      }
      return _0x539aee;
    }
    onLoad() {
      var _0x523a8c;
      if (window.__tcfapi) {
        if (!((_0x523a8c = this.logger) === null || _0x523a8c === undefined)) {
          _0x523a8c.log(this.getName() + "::onLoad()");
        }
        const _0xff60fd = (_0x1b8c6f, _0x173ea3) => {
          var _0x296827;
          var _0x117bf5;
          var _0xa9545b;
          if (_0x173ea3) {
            if (!(_0x1b8c6f.eventStatus !== "useractioncomplete" && _0x1b8c6f.eventStatus !== "tcloaded")) {
              this.consentIsLoaded = true;
              this.consentsBitSet = this.tcfDataBitSet2ConsentOptionsBitSet((_0x117bf5 = _0x1b8c6f.purpose.consents) !== null && _0x117bf5 !== undefined ? _0x117bf5 : {});
              this.legitimateInterestsBitSet = this.tcfDataBitSet2ConsentOptionsBitSet((_0xa9545b = _0x1b8c6f.purpose.legitimateInterests) !== null && _0xa9545b !== undefined ? _0xa9545b : {});
              this.dispatchConsentChanged(this.consentsBitSet, this.legitimateInterestsBitSet);
            }
          } else if (!((_0x296827 = this.logger) === null || _0x296827 === undefined)) {
            _0x296827.warn(this.getName() + "::onLoad::updateConsentCallback:!success");
          }
        };
        window.__tcfapi("addEventListener", 2, _0xff60fd);
      }
    }
    dispatchConsentChanged(_0x4c37f6, _0x404c3e) {
      for (let _0x5a03fd = 0; _0x5a03fd < this.onConsentChangedHandlers.length; _0x5a03fd++) {
        this.onConsentChangedHandlers[_0x5a03fd](_0x4c37f6, _0x404c3e);
      }
    }
    hasLoaded() {
      return this.consentIsLoaded;
    }
    isConsentEditable() {
      return true;
    }
    loadConsentManagementPlatform(_0x15eb1e) {
      let _0x5333fa = 1;
      const _0x236d25 = () => {
        if (window.__tcfapi) {
          this.onLoad();
        } else {
          // TOLOOK
          setTimeout(_0x236d25, _0x5333fa);
          _0x5333fa *= 2;
          if (_0x5333fa > 4000) {
            _0x5333fa = 4000;
          }
        }
      };
      _0x236d25();
    }
    consentToTerms() {
      var _0xa5b765;
      if (!((_0xa5b765 = this.logger) === null || _0xa5b765 === undefined)) {
        _0xa5b765.warn(this.getName() + "::consentToTerms(NoOpImpl)");
      }
    }
    supportsAutoInitialization() {
      return true;
    }
    onConsentChanged(_0x41e166) {
      this.onConsentChangedHandlers.push(_0x41e166);
      if (this.consentIsLoaded) {
        _0x41e166(this.consentsBitSet, this.legitimateInterestsBitSet);
      }
    }
    hasConsentForAny(_0x18326a, _0x20445c = _0x5ccbd3.ConsentOptions.None) {
      return this.hasLoaded() && (this.consentsBitSet & _0x18326a) != 0;
    }
    hasConsentForAll(_0xff6d37, _0x4ce3d8 = _0x5ccbd3.ConsentOptions.None) {
      return this.hasLoaded() && (this.consentsBitSet & _0xff6d37) == _0xff6d37;
    }
    consents() {
      return this.consentsBitSet;
    }
    legitimateInterests() {
      return this.legitimateInterestsBitSet;
    }
  }
  class _0x7b52d4 {
    constructor(_0x20d4b8) {
      this.decode(_0x20d4b8);
    }
    getRightmost1Index() {
      return this.bits.lastIndexOf("1");
    }
    is1AtIndex(_0x463718) {
      return _0x463718 >= 0 && this.bits.substr(_0x463718, 1) === "1";
    }
    set1AtIndex(_0x1676e8) {
      this.bits = this.bits.substr(0, _0x1676e8) + "1" + this.bits.substr(_0x1676e8 + 1);
    }
    decode(_0x1fe968) {
      if (!/^0x[a-f0-9]*$/i.test(_0x1fe968)) {
        _0x1fe968 = "0x" + (Number(_0x1fe968) || 0).toString(2).split("").reverse().join("").toString();
      }
      _0x1fe968 = _0x1fe968.substring(2);
      return this.bits = _0x1fe968.split("").map(function (_0x2fea90) {
        let _0x1a08e6 = parseInt(_0x2fea90, 16).toString(2);
        for (; _0x1a08e6.length < 4;) {
          _0x1a08e6 = "0" + _0x1a08e6;
        }
        return _0x1a08e6;
      }).join("");
    }
    encode() {
      return "0x" + this.bits.match(/(.{1,4})/g).map(function (_0x413bbf) {
        for (; _0x413bbf.length < 4;) {
          _0x413bbf += "0";
        }
        return parseInt(_0x413bbf, 2).toString(16);
      }).join("");
    }
  }
  class _0x5df181 {
    constructor() {
      this.PLAY_SESSION_TIMEOUT = 1800000;
      this.randomPageSessionId = _0x541f2c();
      this.randomPlaySessionId = _0x541f2c();
      this.randomGlobalUserId = _0x541f2c();
      this.randomPlaySessionIdTimeStamp = Date.now();
    }
    init() {
      return _0x3d1aad(this, undefined, undefined, function* () {});
    }
    getName() {
      return "random";
    }
    getUserSource() {
      return _0x5ccbd3.AnalyticsIDProviderStorageType.IN_MEMORY;
    }
    getPageSessionId() {
      return this.randomPageSessionId;
    }
    getPlaySessionId() {
      if (this.randomPlaySessionIdTimeStamp + this.PLAY_SESSION_TIMEOUT < Date.now()) {
        this.randomPlaySessionId = _0x541f2c();
      }
      this.randomPlaySessionIdTimeStamp = Date.now();
      return this.randomPlaySessionId;
    }
    getGlobalUserId() {
      return this.randomGlobalUserId;
    }
  }
  class _0x5b8058 {
    constructor({
      analyticsProviders: _0x1e605d,
      idProvider: _0x57e1ff,
      consentProvider: _0x14443b,
      contextProvider: _0x283084,
      storage: _0x270c51,
      logger: _0x321d19,
      appContextFields: _0x5bb884
    } = {}) {
      this.ANALYTICS_STORAGE_KEY = "__frvr_analytics_storage";
      this.FTUE_STEPS_DONE_KEY = "__frvr_ftue_steps_done";
      this.data = {};
      this.extraFieldFunctions = [];
      this.MAX_PRE_CONSENT_LOAD_EVENT_QUEUE = 100;
      this.preConsentLoadEventQueue = [];
      this.randomIdProvider = new _0x5df181();
      this.qatoolEnabled = false;
      this.analyticsProviders = _0x1e605d != null ? _0x1e605d : [];
      this.idProvider = _0x57e1ff != null ? _0x57e1ff : _0x255fb6;
      this.consentProvider = _0x14443b != null ? _0x14443b : new _0x24901f();
      this.storage = _0x270c51 != null ? _0x270c51 : _0x55f80a;
      this.logger = _0x321d19 != null ? _0x321d19 : _0x18650f;
      this.contextProvider = _0x283084;
      this.timeStart = Date.now();
      this.appContextFields = _0x5bb884 != null ? _0x5bb884 : {};
      this.qatoolEnabled = new URLSearchParams(window.location.search).has("qatoolEnabled");
    }
    loadStorage() {
      return _0x3d1aad(this, undefined, undefined, function* () {
        this.data = yield this.storage.getItem(this.ANALYTICS_STORAGE_KEY, {});
      });
    }
    updateStorage() {
      this.storage.setItem(this.ANALYTICS_STORAGE_KEY, Object.assign({}, this.data));
    }
    getContextFields() {
      const _0x4fe3b7 = this.data.game_start_time;
      const _0x5ca726 = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, this.appContextFields), this.contextProvider(this)), this.getConsentContextFields()), {
        page_session_id: this.getConsentedIdProvider().getPageSessionId(),
        play_session_id: this.getConsentedIdProvider().getPlaySessionId()
      }), this.data), {
        game_duration: _0x4fe3b7 !== undefined ? _0x4fe3b7 === -1 ? 0 : Date.now() - _0x4fe3b7 : undefined,
        loading_time: this.timeLoaded === undefined ? undefined : this.timeLoaded - this.timeStart
      });
      for (const _0x9bafee of this.extraFieldFunctions) {
        _0x9bafee(_0x5ca726);
      }
      return _0x5ca726;
    }
    dispatchOutstandingEvents() {
      const _0x3714cf = this.preConsentLoadEventQueue;
      for (; _0x3714cf.length > 0;) {
        const {
          event: _0x3046c8,
          value: _0x3074c7,
          fields: _0x47d0d4,
          context: _0x591a25,
          requiredConsents: _0x3a1189,
          requiredLegitimateInterests: _0x1075a7
        } = _0x3714cf.shift();
        this.dispatchEvent(_0x3046c8, _0x3074c7, _0x47d0d4, Object.assign(Object.assign({}, _0x591a25), this.getConsentContextFields()), _0x3a1189, _0x1075a7);
      }
    }
    dispatchEvent(_0x40d4a7, _0x5f3563, _0x46ef49, _0x5ebbcc, _0x11c99f, _0x3988bc) {
      for (const _0x351f38 of this.analyticsProviders) {
        try {
          if (this.consentProvider.hasConsentForAll(_0x11c99f, _0x3988bc) || this.qatoolEnabled && _0x351f38.getName() === "post-message") {
            _0x351f38.send(_0x40d4a7, _0x5f3563, _0x46ef49, _0x5ebbcc);
          }
        } catch (_0x3a890a) {
          this.logger.error("[frvr-tracker] error sending event via provider " + _0x351f38.getName(), _0x3a890a);
        }
      }
    }
    getConsentContextFields() {
      return {
        cmp_consents: this.consentProvider.consents(),
        cmp_legitimateInterests: this.consentProvider.legitimateInterests()
      };
    }
    send(_0x3b35b9, _0x1287fa, _0x310175, _0x5cd9c9, _0x17efc3) {
      const _0x34ca5d = this.getContextFields();
      for (const _0x5b58df in _0x310175) {
        if (_0x310175[_0x5b58df] === undefined) {
          delete _0x310175[_0x5b58df];
        }
      }
      for (const _0x2b2ea0 in _0x34ca5d) {
        if (_0x34ca5d[_0x2b2ea0] === undefined) {
          delete _0x34ca5d[_0x2b2ea0];
        }
      }
      this.logger.log("[frvr-tracker] event", _0x3b35b9, _0x310175, _0x34ca5d);
      if (this.consentProvider.hasLoaded() || this.qatoolEnabled) {
        this.dispatchOutstandingEvents();
        this.dispatchEvent(_0x3b35b9, _0x1287fa, _0x310175, Object.assign(Object.assign({}, _0x34ca5d), this.getConsentContextFields()), _0x5cd9c9, _0x17efc3);
      } else if (this.preConsentLoadEventQueue.length < this.MAX_PRE_CONSENT_LOAD_EVENT_QUEUE) {
        this.preConsentLoadEventQueue.push({
          event: _0x3b35b9,
          value: _0x1287fa,
          fields: _0x310175,
          context: _0x34ca5d,
          requiredConsents: _0x5cd9c9,
          requiredLegitimateInterests: _0x17efc3
        });
      }
    }
    init() {
      return _0x3d1aad(this, undefined, undefined, function* () {
        (function (_0x2b2c69) {
          const _0x309cec = window.onerror;
          window.onerror = (_0x18c43f, _0x992187, _0x312063, _0x441835, _0x52908f) => {
            if (_0x309cec) {
              try {
                _0x309cec(_0x18c43f, _0x992187, _0x312063, _0x441835, _0x52908f);
              } catch (_0x2a4d2b) {}
            }
            _0x18c43f = String(_0x18c43f);
            if (_0x52908f = _0x52908f || new Error(_0x18c43f)) {
              try {
                _0x2b2c69({
                  msg: _0x18c43f,
                  line: _0x312063,
                  col: _0x441835,
                  label: _0x52908f.stack || JSON.stringify(_0x52908f)
                });
              } catch (_0x5439b1) {}
            }
            return false;
          };
          const _0x5bd29e = window.onunhandledrejection ? window.onunhandledrejection.bind(window) : null;
          window.onunhandledrejection = _0x54024f => {
            if (_0x5bd29e) {
              try {
                _0x5bd29e(_0x54024f);
              } catch (_0x3602cd) {}
            }
            try {
              const _0x514efe = _0x54024f && _0x54024f.reason || {};
              _0x2b2c69({
                msg: _0x514efe.message,
                line: 0,
                col: 0,
                label: "unhandled_rejection: " + (_0x514efe.stack || JSON.stringify(_0x514efe))
              });
            } catch (_0x361571) {}
          };
        })(_0x20ec84 => this.logEvent("error", _0x20ec84, _0x5ccbd3.ConsentOptions.None));
        yield this.loadStorage();
        yield Promise.all([this.idProvider.init(), this.randomIdProvider.init()]);
        yield Promise.all(this.analyticsProviders.map(_0xd2f52f => _0xd2f52f.init(this.consentProvider, this)));
      });
    }
    loaded() {
      this.timeLoaded = Date.now();
      this.logEvent("game_loaded", {}, _0x5ccbd3.ConsentOptions.P10DevelopAndImproveProducts);
    }
    set(_0x252c22, _0x3b01b9) {
      this.data[_0x252c22] = _0x3b01b9;
      this.updateStorage();
      return _0x3b01b9;
    }
    inc(_0x2e0629, _0x58bfaf) {
      const _0x294a94 = (this.data[_0x2e0629] || 0) + (_0x58bfaf === undefined ? 1 : _0x58bfaf);
      this.set(_0x2e0629, _0x294a94);
      return _0x294a94;
    }
    logEvent(_0x89328d, _0x3fbfe9, _0x36eb3c = _0x5ccbd3.ConsentOptions.None, _0x45af78 = _0x5ccbd3.ConsentOptions.None) {
      this.send(_0x89328d, undefined, _0x3fbfe9, _0x36eb3c, _0x45af78);
    }
    logValuedEvent(_0x283f99, _0xa576fe, _0xade4c, _0x4998e4 = _0x5ccbd3.ConsentOptions.None, _0x1ac811 = _0x5ccbd3.ConsentOptions.None) {
      this.send(_0x283f99, _0xa576fe, _0xade4c, _0x4998e4, _0x1ac811);
    }
    logDiscoveryPageView(_0x26aac6) {
      this.send("discovery_page_view", undefined, _0x26aac6, _0x5ccbd3.ConsentOptions.None, _0x5ccbd3.ConsentOptions.None);
    }
    getPlaySessionId() {
      return this.getConsentedIdProvider().getPlaySessionId();
    }
    getGlobalUserId() {
      return this.getConsentedIdProvider().getGlobalUserId();
    }
    getUserSource() {
      return this.getConsentedIdProvider().getUserSource();
    }
    addExtraFieldFunction(_0x7f1546) {
      this.extraFieldFunctions.push(_0x7f1546);
      return () => {
        const _0x2d4638 = this.extraFieldFunctions.indexOf(_0x7f1546);
        if (_0x2d4638 !== -1) {
          this.extraFieldFunctions.splice(_0x2d4638, 1);
        }
      };
    }
    ftue(_0x52eb89, _0xdfb250, _0x220f7d) {
      const _0x20773c = new _0x7b52d4(this.data.ftuestepsdone);
      if (_0x52eb89 <= _0x20773c.getRightmost1Index()) {
        this.logger.warn("[frvr-tracker] ftue:", "step " + _0x52eb89 + " (" + _0xdfb250 + ") has already been tracked");
        return;
      }
      _0x20773c.set1AtIndex(_0x52eb89);
      this.set("ftuestepsdone", _0x20773c.encode());
      const _0x2992ef = Object.assign(Object.assign({}, _0x220f7d), {
        step_number: _0x52eb89,
        step_name: _0xdfb250
      });
      this.logEvent("ftue", _0x2992ef, _0x5ccbd3.ConsentOptions.P6PersonalizedContent | _0x5ccbd3.ConsentOptions.P5PersonalizedContentProfile | _0x5ccbd3.ConsentOptions.P8MeasureContentPerformance | _0x5ccbd3.ConsentOptions.P9MarketResearchForAudienceInsights | _0x5ccbd3.ConsentOptions.P10DevelopAndImproveProducts);
    }
    ftueUnordered(_0x31d563, _0x123aec, _0x4e1036) {
      return _0x3d1aad(this, undefined, undefined, function* () {
        const _0x2cfd19 = yield this.storage.getItem(this.FTUE_STEPS_DONE_KEY, []);
        if (_0x2cfd19.find(_0x46bef6 => _0x46bef6 === _0x31d563)) {
          this.logger.warn("[frvr-tracker] ftue:", "step " + _0x31d563 + " (" + _0x123aec + ") has already been tracked");
          return;
        }
        _0x2cfd19.push(_0x31d563);
        this.storage.setItem(this.FTUE_STEPS_DONE_KEY, _0x2cfd19);
        const _0x12f23b = Object.assign(Object.assign({}, _0x4e1036), {
          step_number: _0x31d563,
          step_name: _0x123aec
        });
        this.logEvent("ftue", _0x12f23b, _0x5ccbd3.ConsentOptions.P6PersonalizedContent | _0x5ccbd3.ConsentOptions.P5PersonalizedContentProfile | _0x5ccbd3.ConsentOptions.P8MeasureContentPerformance | _0x5ccbd3.ConsentOptions.P9MarketResearchForAudienceInsights | _0x5ccbd3.ConsentOptions.P10DevelopAndImproveProducts);
      });
    }
    levelStart(_0x25ef66, _0x46aacc) {
      const _0x4d3f25 = Object.assign(Object.assign({}, _0x46aacc), {
        level_id: _0x25ef66
      });
      this.set("game_start_time", Date.now());
      this.inc("games_played");
      const _0x31f35e = function () {
        const _0x31a734 = new Date();
        return _0x31a734.getUTCFullYear() + "-" + _0x2e6752(_0x31a734.getUTCMonth() + 1) + "-" + _0x2e6752(_0x31a734.getUTCDate());
      }();
      if (this.data.last_day_played !== _0x31f35e) {
        this.set("last_day_played", _0x31f35e);
        this.inc("days_played");
      }
      const _0x4f7ed8 = this.inc("play_session_count");
      this.logValuedEvent("game_play_start", _0x4f7ed8, _0x4d3f25, _0x5ccbd3.ConsentOptions.P8MeasureContentPerformance | _0x5ccbd3.ConsentOptions.P10DevelopAndImproveProducts);
    }
    levelEnd(_0x1d76b9, _0x4011fa) {
      const _0x2a4d81 = Object.assign(Object.assign({}, _0x4011fa), {
        level_id: _0x1d76b9
      });
      this.logEvent("game_end", _0x2a4d81, _0x5ccbd3.ConsentOptions.P8MeasureContentPerformance | _0x5ccbd3.ConsentOptions.P10DevelopAndImproveProducts);
      this.set("game_start_time", -1);
    }
    getConsentedIdProvider() {
      var _0x31e609;
      var _0x5ed06e;
      if (((_0x5ed06e = (_0x31e609 = this.idProvider).managesUnconsentedIds) === null || _0x5ed06e === undefined ? undefined : _0x5ed06e.call(_0x31e609)) || this.consentProvider.hasConsentForAll(_0x5ccbd3.ConsentOptions.P1StoreInformationOnADevice, _0x5ccbd3.ConsentOptions.None)) {
        return this.idProvider;
      } else {
        return this.randomIdProvider;
      }
    }
  }
  const _0x4ffb85 = {
    chromeWrapper: "chromeos",
    androidWrapper: "android",
    iOSWrapper: "ios",
    rcs: "rcs",
    samsungAppStore: "samsung_galaxy_store",
    facebookInstant: "facebook_instant",
    facebookRooms: "facebook_rooms",
    facebookAppWeb: "facebook_canvasweb",
    facebookApp: "facebook_canvas",
    samsungBixby: "bixby",
    samsungGameLauncher: "samsung_game_launcher",
    samsungInstantPlay: "samsung_instant_play",
    spilGamesWrapper: "spil",
    vkru: "vkru",
    okru: "okru",
    kik: "kik",
    twitter: "twitter",
    twitch: "twitch",
    hago: "hago",
    oppoGlobal: "oppo_global",
    tMobile: "tmobile",
    huawei: "huawei",
    huaweiquickapp: "huawei_quick_app",
    yandex: "yandex",
    crazyGames: "crazy_games",
    lgtv: "lg_tv",
    jioStb: "jio_stb",
    myJio: "jio_my",
    jioGameslite: "jio_gameslite",
    rocketChat: "rocket_chat",
    ufone: "ufone",
    game8: "game8",
    mailonline: "mail_online",
    discord: "discord",
    harman: "harman",
    microsoftPwa: "microsoft_pwa"
  };
  const _0x167dce = "frvr";
  const _0x1c64ca = {
    7978894035: "samsung_game_launcher",
    7640790291: "bixby",
    3704760038: "legacy_samsung_daily",
    4056808137: _0x167dce,
    3238562380: "samsung_instant_play",
    5374938192: _0x167dce,
    5362404538: _0x167dce,
    9165482691: _0x167dce,
    1661744930: _0x167dce,
    1781508157: _0x167dce,
    1526015108: "legacy_samsung_browser_us",
    9152813246: "legacy_samsung_gl_fallback",
    1570234097: "bixby",
    6159024522: "telenorpk",
    9547456458: "huawei_quick_app",
    4901070532: _0x167dce,
    5509479103: _0x167dce,
    4687607673: _0x167dce,
    7772201439: _0x167dce,
    5781080938: _0x167dce,
    7859627468: "bixby",
    6225636036: _0x167dce,
    9257964653: _0x167dce,
    9997971842: "legacy_samsung_gl_pwa",
    1810535265: _0x167dce,
    6879406107: _0x167dce,
    5664912848: _0x167dce,
    7871893264: "oppo_global",
    6905222938: "1001spill",
    1074763396: _0x167dce,
    4822698373: "huawei",
    3917207338: _0x167dce,
    3091839955: _0x167dce,
    9511672440: _0x167dce,
    9609759920: _0x167dce,
    8846287731: _0x167dce,
    1912410415: _0x167dce,
    3463089052: _0x167dce,
    3138478138: "spil",
    3609613151: _0x167dce,
    7259516105: _0x167dce,
    8260783143: _0x167dce,
    4791934430: _0x167dce,
    5304245228: _0x167dce,
    4196077731: _0x167dce,
    7517011737: "ga",
    1420430092: _0x167dce,
    6341560802: _0x167dce,
    3188724532: _0x167dce,
    7430391555: "samsung_galaxy_store_pwa",
    6142190935: _0x167dce,
    2410146000: "spil",
    6238202936: _0x167dce,
    2165771095: _0x167dce,
    7169566203: _0x167dce,
    7116648941: _0x167dce,
    9484119302: _0x167dce,
    8289067739: "crazy_games",
    4942292965: _0x167dce,
    4111954147: "samsung_instant_daily",
    9508446909: "mozilla_lite",
    6581072258: _0x167dce,
    6305391737: _0x167dce,
    7721350107: _0x167dce,
    5689634745: _0x167dce,
    4407671492: _0x167dce,
    8793151713: "mynet",
    6701854007: _0x167dce,
    8166612510: _0x167dce,
    1204043211: _0x167dce,
    8540348735: _0x167dce,
    8092992494: _0x167dce,
    3050063345: _0x167dce,
    6105016100: _0x167dce,
    5383746593: _0x167dce,
    2155121367: _0x167dce,
    4481639214: _0x167dce,
    9167804042: _0x167dce,
    2633738716: _0x167dce,
    5732840388: _0x167dce,
    1136474154: _0x167dce,
    3868538934: _0x167dce,
    6791411817: _0x167dce,
    4001058104: "spil",
    8323344707: _0x167dce,
    1511956590: _0x167dce,
    5337609782: _0x167dce,
    7647348124: _0x167dce,
    9465676615: _0x167dce,
    8699389853: _0x167dce,
    8288405339: "ga",
    1601204168: _0x167dce,
    6738957149: _0x167dce,
    3143968130: "spil",
    3660984936: "legacy_all_samsung_browser",
    6672071330: "ga",
    9944902462: _0x167dce,
    4216099801: "ga",
    9810477030: _0x167dce,
    4127083129: _0x167dce,
    9831349735: "mediatrust",
    1651142765: _0x167dce,
    2402315798: _0x167dce,
    3217022605: "rcs",
    8209630496: _0x167dce,
    7348809119: _0x167dce,
    1907949320: _0x167dce,
    7711130568: _0x167dce,
    6682900564: _0x167dce,
    8220757253: _0x167dce,
    9226003469: _0x167dce,
    6459119768: "ga",
    3297429215: _0x167dce,
    2066412442: _0x167dce,
    9610826637: "spil",
    5428378892: _0x167dce,
    3718604937: "ga",
    7010263033: _0x167dce,
    5533541335: "spil",
    5393940535: "spil",
    6680931602: _0x167dce,
    8135642444: _0x167dce,
    5195338130: "ga",
    2443106993: _0x167dce,
    9841433446: _0x167dce,
    9471076165: "spil",
    8645981334: "clickjogos",
    9750454053: "spil",
    5496116299: "spil",
    9095657336: "spil",
    5196972230: _0x167dce,
    1711991335: "spil",
    1463804937: "plonga",
    6650691459: _0x167dce,
    7854536931: "spil",
    4185858062: _0x167dce,
    1559694722: _0x167dce,
    4196397436: "ga",
    5791200697: _0x167dce,
    8838890658: _0x167dce,
    6592001260: _0x167dce,
    8990371880: "rocketchat",
    3078524176: _0x167dce,
    1414057592: "spil",
    1721816412: "spil",
    7627870781: "samsung_instant_browser_us",
    7257814137: "spil",
    6687910134: "mfogs",
    6388800833: _0x167dce,
    6794212012: "mailonline",
    2719344539: "spil",
    6005657456: _0x167dce,
    4761469737: "spil",
    8260978605: _0x167dce,
    4899645641: _0x167dce,
    5570875049: "tron",
    3275762232: "spil",
    1433925895: "spil",
    7925670440: "taboola",
    3587369568: "squid",
    3982547231: _0x167dce,
    4388062450: "spil",
    8471269857: "bixby",
    1323020937: "spil",
    3605255281: "bixby",
    9085283107: _0x167dce,
    1873844328: "legacy_samsung_browser_m4s",
    8924310391: "bixby",
    7269966843: "tmobile",
    1075554580: "adsenseforgamestest2",
    1098459098: _0x167dce,
    8199816817: "xiaomi"
  };
  const _0x2b1e12 = typeof window == "undefined" ? "" : window.location.href;
  const _0x552844 = function (_0x3be752, _0x6669e) {
    let _0x815e43 = "frvr";
    for (const _0x5059ed in _0x4ffb85) {
      if (_0x3be752[_0x5059ed]) {
        _0x815e43 = _0x4ffb85[_0x5059ed];
      }
    }
    const _0xbb2dee = _0x6669e();
    if (_0xbb2dee) {
      const _0xce8d73 = _0x1c64ca[_0xbb2dee];
      if (_0xce8d73) {
        _0x815e43 = _0xce8d73;
      }
    }
    if (window.location && window.location.host && window.location.host === "krunker.io" || window.location.host === "internal.krunker.io") {
      _0x815e43 = "krunker_io";
    }
    if (window.location && window.location.host && window.location.host.includes("discord")) {
      _0x815e43 = "discord";
    }
    return _0x815e43;
  };
  const _0x31b721 = function (_0x145f0c, _0x39fe88) {
    if (!(_0x145f0c != null)) {
      _0x145f0c = window.location.href;
    }
    _0x39fe88 = _0x39fe88.replace(/[\[\]]/g, "\\$&");
    const _0xe6dbb7 = new RegExp("[?&]" + _0x39fe88 + "(=([^&#]*)|&|#|$)", "i").exec(_0x145f0c);
    if (_0xe6dbb7) {
      if (_0xe6dbb7[2]) {
        return decodeURIComponent(_0xe6dbb7[2].replace(/\+/g, " "));
      } else {
        return "";
      }
    } else {
      return null;
    }
  };
  const _0x5bbcd4 = (_0x33e6b4, _0x5a87a2) => function (_0x424a17, _0x4f38f1, _0x13e129, _0x4cd629) {
    const _0x3c5e24 = {};
    if (_0x33e6b4) {
      _0x3c5e24[_0x33e6b4] = true;
    }
    _0x3c5e24.android = /(android)/i.test(_0x13e129) && !/(Windows)/i.test(_0x13e129);
    _0x3c5e24.androidVersion = function () {
      const _0x5d9fc6 = navigator.userAgent.toLowerCase().match(/android\s([0-9\.]*)/);
      return parseFloat(_0x5d9fc6 ? _0x5d9fc6[1] : "0");
    }();
    _0x3c5e24.firefoxMobile = /(Mobile)/i.test(_0x13e129) && /(Firefox)/i.test(_0x13e129);
    _0x3c5e24.slow = _0x3c5e24.android && _0x3c5e24.androidVersion < 6;
    _0x3c5e24.iOS = /(ipod|iphone|ipad)/i.test(_0x13e129) || /(Macintosh)/i.test(_0x13e129) && "ontouchend" in document;
    _0x3c5e24.windowsMobile = /(IEMobile)/i.test(_0x13e129);
    _0x3c5e24.silk = /(silk)/i.test(_0x13e129);
    _0x3c5e24.clay = /(clay\.io)/i.test(_0x4cd629);
    _0x3c5e24.facebookApp = /(fb_canvas)/i.test(_0x4cd629);
    _0x3c5e24.facebookAppWeb = /(fb_canvas_web)/i.test(_0x4cd629);
    _0x3c5e24.iframed = _0x424a17.top !== _0x424a17.self;
    _0x3c5e24.standalone = "standalone" in _0x4f38f1 && _0x4f38f1.standalone;
    _0x3c5e24.mobileiOSDevice = Boolean(_0x13e129.match(/iPhone/i) || _0x13e129.match(/iPod/i));
    _0x3c5e24.kongregate = /(kongregateiframe)/i.test(_0x4cd629);
    _0x3c5e24.kik = /(kik_canvas)/i.test(_0x4cd629);
    _0x3c5e24.twitter = /(twitter)/gi.test(_0x13e129);
    _0x3c5e24.chrome = /Chrome\//.test(_0x13e129);
    _0x3c5e24.safari = !!navigator.userAgent.match(/Version\/[\d\.]+.*Safari/);
    _0x3c5e24.secureConnection = window.location.protocol.indexOf("https") == 0;
    _0x3c5e24.facebookInstant = !!window.FBInstant;
    _0x3c5e24.facebookRooms = !!window.isFacebookRooms;
    _0x3c5e24.spilGamesWrapper = /(spilgames)/i.test(_0x4cd629);
    _0x3c5e24.social = _0x31b721(_0x5a87a2, "social") == "on";
    _0x3c5e24.advertisementIsDisabled = _0x31b721(_0x5a87a2, "ads") == "off";
    _0x3c5e24.advertisementInterstitialDisabled = _0x31b721(_0x5a87a2, "int") == "off";
    _0x3c5e24.advertisementOverlayEnabled = !_0x3c5e24.iframed || _0x3c5e24.spilGamesWrapper || Boolean(_0x31b721(_0x5a87a2, "partnerid"));
    _0x3c5e24.nosoc = _0x31b721(_0x5a87a2, "nosoc") == "1";
    _0x3c5e24.facebookAd = /(\/\?fb)/i.test(_0x4cd629);
    _0x3c5e24.mobile = _0x3c5e24.android || _0x3c5e24.windowsMobile || _0x3c5e24.iOS || _0x3c5e24.silk || _0x3c5e24.firefoxMobile;
    _0x3c5e24.iOSWrapper = !!_0x424a17.iOSWrapper;
    _0x3c5e24.iPhoneXOrLater = _0x31b721(_0x5a87a2, "iPhoneXOrLater") == "true";
    _0x3c5e24.iMessageContext = _0x31b721(_0x5a87a2, "iMessage") == "true";
    _0x3c5e24.androidWrapper = !!_0x424a17.androidWrapper;
    _0x3c5e24.chromeWrapper = !!_0x424a17.isChromeWrapper;
    _0x3c5e24.samsungAppStore = _0x31b721(_0x5a87a2, "androidStore") == "samsung";
    _0x3c5e24.appWrapper = Boolean(_0x424a17.iOSWrapper || _0x424a17.androidWrapper || _0x3c5e24.samsungAppStore);
    _0x3c5e24.usingWebGLRenderer = false;
    _0x3c5e24.usingCanvasRenderer = false;
    _0x3c5e24.jioStb = !!_0x3c5e24["jio-stb"];
    _0x3c5e24.myJio = !!_0x3c5e24.myjio;
    _0x3c5e24.jioGameslite = !!_0x3c5e24["jio-gameslite"];
    _0x3c5e24.jio = _0x3c5e24.jioStb || _0x3c5e24.myJio || _0x3c5e24.jioGameslite;
    _0x3c5e24.twitch = _0x31b721(_0x5a87a2, "twitch") == "";
    _0x3c5e24.vkru = _0x31b721(_0x5a87a2, "vkru") == "";
    _0x3c5e24.okru = _0x31b721(_0x5a87a2, "okru") == "";
    _0x3c5e24.tMobile = _0x31b721(_0x5a87a2, "tmobile") == "";
    _0x3c5e24.pwa = _0x31b721(_0x5a87a2, "pwa") == "";
    _0x3c5e24.windowsApp = _0x31b721(_0x5a87a2, "windowsapp") == "";
    _0x3c5e24.enableAppStoreLinks = true;
    _0x3c5e24.samsungGalaxyStorePWA = _0x31b721(_0x5a87a2, "samsung") == "" && _0x31b721(_0x5a87a2, "source") == "galaxystore";
    _0x3c5e24.samsungGameLauncherPWA = (_0x31b721(_0x5a87a2, "pwa") == "" || _0x31b721(_0x5a87a2, "samsung") == "") && _0x31b721(_0x5a87a2, "source") == "gamelauncher";
    _0x3c5e24.samsungGameLauncher = !!window.FRVRInstant || _0x31b721(_0x5a87a2, "gamelauncher") == "" || _0x31b721(_0x5a87a2, "source") == "gamelauncher";
    _0x3c5e24.samsungBixby = _0x31b721(_0x5a87a2, "samsung") == "" && !_0x3c5e24.samsungGalaxyStorePWA;
    _0x3c5e24.samsungBrowserUK = _0x31b721(_0x5a87a2, "samsungbuk") == "";
    _0x3c5e24.samsungBrowserUS = _0x31b721(_0x5a87a2, "samsungbus") == "";
    _0x3c5e24.samsungBrowserSEA = _0x31b721(_0x5a87a2, "samsungbsea") == "";
    _0x3c5e24.samsungBrowser = _0x31b721(_0x5a87a2, "samsungbrowser") == "";
    _0x3c5e24.samsungGLFallback = _0x31b721(_0x5a87a2, "gl_fallback") == "";
    _0x3c5e24.samsungInstantPlay = !!window.GSInstant;
    _0x3c5e24.samsung = _0x3c5e24.samsungGalaxyStorePWA || _0x3c5e24.samsungGameLauncherPWA || _0x3c5e24.samsungGameLauncher || _0x3c5e24.samsungBixby || _0x3c5e24.samsungBrowserUK || _0x3c5e24.samsungBrowserUK || _0x3c5e24.samsungBrowserUS || _0x3c5e24.samsungBrowserSEA || _0x3c5e24.samsungBrowser || _0x3c5e24.samsungGLFallback || _0x3c5e24.samsungInstantPlay;
    _0x3c5e24.rcs = Boolean(_0x31b721(_0x5a87a2, "rcsid"));
    _0x3c5e24.rcsKr = _0x31b721(_0x5a87a2, "rcskr") == "";
    _0x3c5e24.huaweiquickapp = _0x31b721(_0x5a87a2, "huaweiquickapp") == "";
    _0x3c5e24.huawei = _0x31b721(_0x5a87a2, "huawei") == "" || _0x3c5e24.huaweiquickapp;
    _0x3c5e24.mozilla = _0x31b721(_0x5a87a2, "mozilla") == "";
    _0x3c5e24.miniclip = _0x31b721(_0x5a87a2, "miniclip") == "";
    _0x3c5e24.chromeOSDevice = _0x31b721(_0x5a87a2, "isChromeOSDevice") == "true";
    _0x3c5e24.opera = !!_0x424a17.opr && !!_0x424a17.opr.addons || !!_0x424a17.opera || _0x13e129.indexOf(" OPR/") >= 0;
    _0x3c5e24.yandex = !!window.YaGames;
    _0x3c5e24.firefox = _0x424a17.InstallTrigger !== undefined;
    _0x3c5e24.edge = /(edge|edgios|edga)\/((\d+)?[\w\.]+)/i.test(_0x13e129);
    _0x3c5e24.oppoGlobal = _0x31b721(_0x5a87a2, "oppo") == "";
    _0x3c5e24.lgtv = _0x31b721(_0x5a87a2, "lgtv") == "";
    _0x3c5e24.crazyGames = _0x31b721(_0x5a87a2, "partnerid") == "8289067739";
    _0x3c5e24.mynet = _0x31b721(_0x5a87a2, "mynet") == "";
    _0x3c5e24.ufone = _0x31b721(_0x5a87a2, "partnerid") == "8416254215";
    _0x3c5e24.game8 = _0x31b721(_0x5a87a2, "game8") == "";
    _0x3c5e24.mailonline = _0x31b721(_0x5a87a2, "partnerid") == "6794212012";
    _0x3c5e24.disableNativeBridge = _0x31b721(_0x5a87a2, "disableNativeBridge") == "";
    _0x3c5e24.partnerWrapper = !_0x3c5e24.disableNativeBridge && (_0x3c5e24.mynet || _0x3c5e24.tMobile || _0x3c5e24.ufone || _0x3c5e24.mailonline) && (_0x3c5e24.iOS || _0x3c5e24.android);
    _0x3c5e24.rocketChat = _0x31b721(_0x5a87a2, "rocketchat") == "";
    _0x3c5e24.discord = _0x33e6b4 === "discord";
    _0x3c5e24.harman = _0x31b721(_0x5a87a2, "harman") == "";
    _0x3c5e24.progressiveWebAppEnabled = !(_0x3c5e24.chromeOSDevice || _0x3c5e24.iframed || _0x3c5e24.appWrapper || _0x3c5e24.twitch || _0x3c5e24.vkru || _0x3c5e24.okru || _0x3c5e24.facebookInstant || _0x3c5e24.partnerWrapper);
    _0x3c5e24.tv = _0x3c5e24.jioStb || _0x3c5e24.lgTV;
    _0x3c5e24.microsoftPwa = _0x31b721(_0x5a87a2, "mspwa") == "" || !!_0x31b721(_0x5a87a2, "msstart_sdk_init");
    return _0x3c5e24;
  }(window, navigator, navigator.userAgent, String(window.location));
  const _0x52ef1a = {
    getChannel: function (_0x361f61, _0x32e1e1, _0x417f2a) {
      let _0x926642;
      let _0x3afa5b;
      return () => {
        if (_0x926642) {
          return _0x926642;
        }
        var _0xe74911;
        var _0x5c086a;
        var _0x56186f;
        if (!(_0x3afa5b != null)) {
          _0x3afa5b = _0x5bbcd4(_0x361f61, _0x2b1e12);
        }
        if (!(_0x417f2a != null)) {
          _0xe74911 = _0x2b1e12;
          _0x5c086a = _0x3afa5b;
          _0x56186f = _0x32e1e1 || {};
          _0x417f2a = () => function (_0x1a4a42, _0x157c01, _0x5af560) {
            const _0x2bde73 = _0x31b721(_0x1a4a42, "partnerid");
            if (_0x2bde73) {
              return _0x2bde73;
            }
            const _0x26dd5e = [["samsungBrowser", "3660984936"], ["rcs", "3217022605"], ["huaweiquickapp", "9547456458"], ["huawei", "4822698373"], ["tMobile", "7269966843"], ["miniclip", "8532226134"], ["samsungBrowserSEA", "2765561693"], ["samsungBrowserUS", "1526015108"], ["samsungBrowserUK", "2961002817"], ["mozilla", "9508446909"], ["samsungBixby", "7640790291"], ["samsungGalaxyStorePWA", "7430391555"], ["samsungGameLauncherPWA", "9997971842"], ["samsungInstantPlay", "3238562380"]];
            for (const [_0x345c12, _0x51915a] of _0x26dd5e) {
              if (_0x157c01[_0x345c12]) {
                return _0x51915a;
              }
            }
            const _0x3122fe = {
              ft_daily: "4111954147",
              ft_bixby: "7859627468",
              ft_browser_us: "7627870781",
              ft_browser_uk: "8436188448",
              default: "7978894035"
            };
            const _0x271c10 = {
              ft_daily: "3704760038",
              ft_bixby: "7640790291",
              ft_browser_us: "1526015108",
              ft_browser_uk: "2961002817",
              default: "9152813246"
            };
            if (_0x157c01.samsungGameLauncher) {
              return _0x3122fe[_0x31b721(_0x1a4a42, "source")] || _0x3122fe.default;
            } else if (_0x31b721(_0x1a4a42, "gl_fallback") || _0x31b721(_0x1a4a42, "gl_fallback") === "") {
              return _0x271c10[_0x31b721(_0x1a4a42, "source")] || _0x271c10.default;
            } else if (_0x157c01.spilGamesWrapper && _0x5af560.googleAdSpilgamesId) {
              return _0x5af560.googleAdSpilgamesId;
            } else {
              return !!_0x5af560.googleAdSiteId && _0x5af560.googleAdSiteId;
            }
          }(_0xe74911, _0x5c086a, _0x56186f);
        }
        const _0x130fe1 = _0x552844(_0x3afa5b, _0x417f2a);
        _0x926642 = _0x130fe1;
        return _0x130fe1;
      };
    }("", {})
  };
  const _0x74f945 = {
    getName: () => "Empty Provider",
    init: () => _0x3d1aad(undefined, undefined, undefined, function* () {}),
    configure: () => _0x3d1aad(undefined, undefined, undefined, function* () {}),
    isReady: () => false,
    getCatalog: () => ({}),
    getProductById: () => {},
    purchase: () => _0x3d1aad(undefined, undefined, undefined, function* () {
      throw new Error("no products");
    }),
    consumePurchase: () => {
      throw new Error("no products");
    },
    getUnconsumedPurchases: () => _0x3d1aad(undefined, undefined, undefined, function* () {
      return [];
    }),
    onIsReadyChanged: function () {}
  };
  const _0x405f00 = {
    logEvent: () => {},
    logValuedEvent: () => {}
  };
  class _0xe97100 {
    constructor(_0x4918ad, _0x4ce03c) {
      this.analytics = _0x4918ad;
      this.providerName = _0x4ce03c;
    }
    logRequestPaymentError(_0x40ad43, _0x6a8561) {
      this.analytics.logValuedEvent("iap_request_payment_failed", 1, Object.assign(Object.assign({}, _0x40ad43), {
        err: _0x6a8561
      }));
    }
    logRequestPaymentSuccess(_0xf2ca4e, _0x2e7f49) {
      this.analytics.logValuedEvent("iap_request_payment_success", 1, Object.assign(Object.assign({}, _0xf2ca4e), {
        purchaseId: _0x2e7f49.purchaseId
      }));
    }
    logRequestPayment(_0x340145) {
      this.analytics.logValuedEvent("iap_request_payment", 1, Object.assign({}, _0x340145));
    }
    logConsumePurchase(_0x10b975, _0x4ed270) {
      this.analytics.logValuedEvent("iap_consume_purchase", 1, Object.assign(Object.assign({}, _0x10b975), {
        purchaseId: _0x4ed270.purchaseId
      }));
    }
    logRestorePurchasesError(_0x8b79c2) {
      this.analytics.logValuedEvent("iap_request_restore_purchase_error", 1, {
        provider: this.providerName,
        err: _0x8b79c2
      });
    }
    logRestorePurchasesSuccess() {
      this.analytics.logValuedEvent("iap_request_restore_purchase_success", 1, {
        provider: this.providerName
      });
    }
    logRestorePurchases() {
      this.analytics.logValuedEvent("iap_request_restore_purchase", 1, {
        provider: this.providerName
      });
    }
  }
  var _0x5a507a;
  _0x5ccbd3.IAPErrorCode = undefined;
  (_0x5a507a = _0x5ccbd3.IAPErrorCode || (_0x5ccbd3.IAPErrorCode = {})).UNKNOWN = "UNKNOWN";
  _0x5a507a.USER_INPUT = "USER_INPUT";
  _0x5a507a.INVALID_PARAM = "INVALID_PARAM";
  _0x5a507a.ALREADY_OWNED = "ALREADY_OWNED";
  class _0x4ab4fc extends Error {
    constructor(_0x42972e, _0x415e64, _0x7c3b44 = _0x5ccbd3.IAPErrorCode.UNKNOWN) {
      super(_0x42972e, _0x415e64);
      this.code = _0x7c3b44;
      Object.setPrototypeOf(this, _0x4ab4fc.prototype);
    }
  }
  class _0xda6575 extends _0x4ab4fc {
    constructor(_0x46d768, _0x2afee0) {
      super(_0x46d768, _0x2afee0, _0x5ccbd3.IAPErrorCode.INVALID_PARAM);
      Object.setPrototypeOf(this, _0xda6575.prototype);
    }
  }
  class _0x11ce78 extends _0x4ab4fc {
    constructor(_0x1c20ab = "Purchase cancelled by user", _0x4e9d1c) {
      super(_0x1c20ab, _0x4e9d1c, _0x5ccbd3.IAPErrorCode.USER_INPUT);
      Object.setPrototypeOf(this, _0x11ce78.prototype);
    }
  }
  class _0x2b0ca9 extends _0x4ab4fc {
    constructor(_0x4e9b9d = "Purchase already owned", _0x4d2157) {
      super(_0x4e9b9d, _0x4d2157, _0x5ccbd3.IAPErrorCode.ALREADY_OWNED);
      Object.setPrototypeOf(this, _0x2b0ca9.prototype);
    }
  }
  var _0x4002aa = Object.freeze({
    "__proto__": null,
    get IAPErrorCode() {
      return _0x5ccbd3.IAPErrorCode;
    },
    IAPError: _0x4ab4fc,
    IAPPurchaseErrorUnknownProduct: _0xda6575,
    IAPPurchaseErrorCancelledByUser: _0x11ce78,
    IAPPurchaseErrorAlreadyOwned: _0x2b0ca9
  });
  class _0x321854 {
    constructor(_0x2a803c) {
      this.errors = _0x4002aa;
      this.provider = _0x2a803c.provider || _0x74f945;
      this.iapTracker = new _0xe97100(_0x2a803c.tracker || _0x405f00, this.provider.getName());
      this.logger = _0x2a803c.logger || _0x18650f;
    }
    init() {
      return this.provider.init();
    }
    configure(_0x4486dd) {
      return this.provider.configure(_0x4486dd);
    }
    isReady() {
      return this.provider.isReady();
    }
    onReady(_0x180b5d) {
      this.provider.onIsReadyChanged(_0x180b5d);
    }
    getProviderName() {
      return this.provider.getName();
    }
    getCatalog() {
      return this.provider.getCatalog();
    }
    getProductById(_0x4837e8) {
      var _0x10da85;
      const _0x42f0dc = this.provider.getProductById(_0x4837e8);
      if (!_0x42f0dc) {
        this.logger.error("IAP. Product not found", _0x4837e8);
        return;
      }
      const _0x4275d3 = (_0x10da85 = _0x42f0dc.price) !== null && _0x10da85 !== undefined ? _0x10da85 : _0x42f0dc.currencyCode + " " + _0x42f0dc.priceValue;
      return Object.assign(Object.assign({}, _0x42f0dc), {
        price: _0x4275d3,
        provider: this.provider.getName(),
        productId: _0x4837e8
      });
    }
    purchase(_0x46a930, _0x2d3c68) {
      return _0x3d1aad(this, undefined, undefined, function* () {
        const _0x120a39 = this.getProductById(_0x46a930);
        this.iapTracker.logRequestPayment(_0x120a39);
        if (!_0x120a39) {
          throw new _0xda6575("Unknown product \"" + _0x46a930 + "\"");
        }
        try {
          const _0xb6d235 = yield this.provider.purchase(_0x46a930, _0x2d3c68);
          this.iapTracker.logRequestPaymentSuccess(_0x120a39, _0xb6d235);
          return _0xb6d235;
        } catch (_0x994bcd) {
          const _0x5c54e4 = _0x994bcd.message || _0x994bcd.toString();
          this.iapTracker.logRequestPaymentError(_0x120a39, _0x5c54e4);
          if (_0x994bcd instanceof _0x11ce78) {
            this.logger.log("Purchase cancelled by user");
            throw _0x994bcd;
          }
          this.logger.error("Error in purchase: " + _0x5c54e4, _0x994bcd);
          throw new _0x4ab4fc("Unexpected purchase error", {
            cause: _0x994bcd
          });
        }
      });
    }
    consumePurchase(_0x36e4d7) {
      return _0x3d1aad(this, undefined, undefined, function* () {
        const _0x174f33 = this.getProductById(_0x36e4d7.productId);
        this.iapTracker.logConsumePurchase(_0x174f33, _0x36e4d7);
        try {
          yield this.provider.consumePurchase(_0x36e4d7);
        } catch (_0x29e6b0) {
          throw new _0x4ab4fc("Unexpected consume error", {
            cause: _0x29e6b0
          });
        }
        return _0x36e4d7.purchaseId;
      });
    }
    getUnconsumedPurchases() {
      return _0x3d1aad(this, undefined, undefined, function* () {
        this.iapTracker.logRestorePurchases();
        try {
          const _0x5f58a2 = yield this.provider.getUnconsumedPurchases();
          this.iapTracker.logRestorePurchasesSuccess();
          return _0x5f58a2;
        } catch (_0x303395) {
          const _0x2c0f49 = _0x303395.message || _0x303395.toString();
          this.iapTracker.logRestorePurchasesError(_0x2c0f49);
          this.logger.error("Error in getUnconsumedPurchases: " + _0x2c0f49, _0x303395);
        }
        return [];
      });
    }
    requestPayment(_0x92cd64, _0x489d41) {
      return this.purchase(_0x92cd64, _0x489d41);
    }
    restorePurchases() {
      if (this.provider.restorePurchases) {
        this.iapTracker.logRestorePurchases();
        return this.provider.restorePurchases();
      } else {
        return this.getUnconsumedPurchases();
      }
    }
    getPurchases() {
      return this.getUnconsumedPurchases();
    }
  }
  class _0x37ff21 {
    constructor(_0x41d13f) {
      var _0x25e6b8;
      this.auth = _0x41d13f.auth;
      this.channelId = _0x41d13f.channelId;
      this.gameId = _0x41d13f.gameId;
      this.apiHost = (_0x25e6b8 = _0x41d13f.apiHostOverride) !== null && _0x25e6b8 !== undefined ? _0x25e6b8 : _0x41d13f.env === _0x5ccbd3.Env.PRODUCTION ? "https://crucible.frvr.com/v1/iap" : "https://staging.crucible.frvr.com/v1/iap";
    }
    fetch(_0x4e19bd, _0x5a1b12) {
      return this.auth.authenticatedFetch(this.apiHost + "/" + this.channelId + "/" + _0x4e19bd, _0x5a1b12);
    }
    getPurchases() {
      return this.auth.authenticatedFetch(this.apiHost + "/purchases/" + this.auth.getFRVRID(), {
        method: "GET",
        body: "{}"
      }).then(this.validateAndReturnJSON);
    }
    validatePurchase(_0x4a5edb, _0x1da6dc = {}) {
      return this.auth.authenticatedFetch(this.apiHost + "/validate/" + this.channelId + "/" + this.gameId, Object.assign({
        method: "POST",
        body: JSON.stringify(_0x4a5edb)
      }, _0x1da6dc)).then(this.validateAndReturnJSON);
    }
    consumePurchase(_0x470e64, _0x8b663f) {
      return this.auth.authenticatedFetch(this.apiHost + "/consume/" + this.channelId + "/" + this.gameId, {
        method: "POST",
        body: JSON.stringify({
          applicationId: _0x470e64,
          transactionId: _0x8b663f
        })
      }).then(this.validateAndReturnJSON);
    }
    getProducts() {
      return fetch(this.apiHost + "/products/" + this.channelId + "/" + this.gameId, {
        method: "GET"
      }).then(this.validateAndReturnJSON);
    }
    validateAndReturnJSON(_0x3bfe60) {
      if (!_0x3bfe60.ok) {
        throw new Error("IAPServiceClient bad response: " + _0x3bfe60.status + " " + _0x3bfe60.statusText);
      }
      return _0x3bfe60.json();
    }
  }
  class _0x4f2042 {
    scheduleMessage(_0x58a591) {
      return _0x3d1aad(this, undefined, undefined, function* () {
        const _0x4b788a = yield fetch("https://hermes.frvr.com/v1/scheduler", {
          method: "POST",
          headers: {
            Accept: "application/json",
            "Content-Type": "application/json"
          },
          body: JSON.stringify(_0x58a591)
        });
        return yield _0x4b788a.json();
      });
    }
  }
  const _0x47cc67 = {
    logEvent: () => {}
  };
  class _0x2b5ec4 {
    constructor({
      provider: _0x4e6138,
      logger: _0x3e7bc6,
      tracker: _0x1e235b = _0x47cc67
    }) {
      this.initialized = false;
      this.provider = _0x4e6138;
      this.logger = _0x3e7bc6;
      this.chatbot = new _0x4f2042();
      this.tracker = _0x1e235b;
    }
    init() {
      return _0x3d1aad(this, undefined, undefined, function* () {
        if (this.game) {
          this.initialized = true;
        } else {
          this.logger.error("Notifications class should be configured before it is initialized");
        }
      });
    }
    configure(_0x56aa9a) {
      return _0x3d1aad(this, undefined, undefined, function* () {
        this.game = _0x56aa9a.game;
      });
    }
    scheduleMessage(_0xca933c) {
      return _0x3d1aad(this, undefined, undefined, function* () {
        if (!this.initialized) {
          this.logger.error("Chatbot can not be used until it has been initialized");
          throw new Error("INVALID_OPERATION");
        }
        const _0x14e7cf = {
          game: this.game,
          platform: this.provider.getName(),
          player_id: _0xca933c.playerId,
          timetorun: _0xca933c.delayInSeconds,
          template: {
            image_url: _0xca933c.imageUrl,
            message: _0xca933c.message,
            buttons: _0xca933c.buttons
          }
        };
        return yield this.chatbot.scheduleMessage(_0x14e7cf);
      });
    }
    canScheduleMessages() {
      return this.provider.canScheduleMessages();
    }
    subscribeScheduleMessages() {
      this.tracker.logEvent("bot_subscribe_show", {});
      return this.provider.subscribeScheduleMessages().then(_0x5724d0 => {
        if (_0x5724d0) {
          this.tracker.logEvent("bot_subscribe_success", {});
        } else {
          this.tracker.logEvent("bot_subscribe_failure", {});
        }
        return _0x5724d0;
      }).catch(_0x3433fa => {
        this.tracker.logEvent("bot_subscribe_failure", {});
        return false;
      });
    }
    scheduleLocalNotification(_0x5aee46, _0x2226b0, _0x4080eb, _0x1b8240) {
      return this.provider.scheduleLocalNotification(_0x5aee46, _0x2226b0, _0x4080eb, _0x1b8240);
    }
  }
  function _0x198996() {
    this.code = "INVALID_OPERATION";
    this.message = "Trying to use an empty interface.";
  }
  const _0xe1f7fe = {
    getName: () => "",
    canScheduleMessages() {
      return _0x3d1aad(this, undefined, undefined, function* () {
        return false;
      });
    },
    subscribeScheduleMessages() {
      return _0x3d1aad(this, undefined, undefined, function* () {
        return false;
      });
    },
    scheduleLocalNotification: () => Promise.reject(new _0x198996())
  };
  class _0x4787f1 {
    constructor({
      id: _0x28f82c,
      contextID: _0x25bc26,
      endTime: _0x4e8638,
      startTime: _0x4b1f43,
      refreshInterval: _0x44c969,
      title: _0x4d4be2,
      payload: _0x1064bf,
      offset: _0x187e5d,
      players: _0x24a53d,
      type: _0x393cd8,
      count: _0x120623
    }) {
      this.id = _0x28f82c;
      this.contextID = _0x25bc26;
      if (_0x4e8638) {
        this.endTime = _0x4e8638;
      }
      if (_0x4b1f43) {
        this.startTime = _0x4b1f43;
      }
      this.refreshInterval = _0x44c969;
      this.title = _0x4d4be2;
      this.payload = _0x1064bf;
      this.offset = _0x187e5d;
      this.count = _0x120623;
      if (_0x24a53d) {
        this.players = _0x24a53d;
      }
      if (_0x393cd8) {
        this.type = _0x393cd8;
      }
    }
  }
  class _0x4835dd {
    constructor(_0x2acfca) {
      this.id = _0x2acfca.id;
      this.name = _0x2acfca.name;
      this.photo = _0x2acfca.photo;
      this.rank = _0x2acfca.rank;
      if (_0x2acfca.updated) {
        this.updated = _0x2acfca.updated;
      }
      this.score = _0x2acfca.score;
      this.payload = _0x2acfca.payload;
    }
  }
  const _0x2fdfae = "TOURNAMENT";
  const _0x562015 = {
    [_0x5ccbd3.Env.PRODUCTION]: "https://crucible.frvr.com",
    [_0x5ccbd3.Env.BETA]: "https://staging.crucible.frvr.com",
    [_0x5ccbd3.Env.DEVELOPMENT]: "https://staging.crucible.frvr.com"
  };
  var _0x30cb67;
  var _0x4e5ef1;
  (function (_0x25dc25) {
    _0x25dc25.HIGHEST = "highest";
    _0x25dc25.LATEST = "latest";
  })(_0x30cb67 || (_0x30cb67 = {}));
  class _0x246ee8 extends Error {
    constructor(_0x36b507) {
      super();
      this.message = _0x36b507.message;
      this.code = _0x36b507.code;
      Object.setPrototypeOf(this, _0x246ee8.prototype);
    }
  }
  class _0x17b882 {
    constructor(_0x1b8684) {
      this.channel = _0x1b8684;
    }
    init(_0x4d3165, _0xf448a2) {
      this.apiUrl = _0x562015[_0xf448a2];
      this.gameId = _0x4d3165;
      this.leaderboards = {};
    }
    createLeaderboard(_0x187ec5, _0x10200e) {
      return _0x3d1aad(this, undefined, undefined, function* () {
        const _0x410530 = this.apiUrl + "/v1/leaderboards";
        const _0x3e446a = {
          game: this.gameId,
          title: _0x10200e.title,
          endTime: _0x10200e.endTime,
          refreshInterval: _0x10200e.refreshInterval,
          type: _0x187ec5 || "default",
          data: _0x10200e.payload,
          sortOrder: _0x10200e.sortOrder || "HIGHER_IS_BETTER"
        };
        if (_0x10200e.id) {
          _0x3e446a.id = _0x10200e.id;
        }
        const _0x8b8e8c = yield fetch(_0x410530, {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify(_0x3e446a)
        });
        const _0x2edd40 = yield _0x8b8e8c.json();
        if (!_0x8b8e8c.ok) {
          throw new _0x246ee8(_0x2edd40.error);
        }
        return _0x2edd40.id;
      });
    }
    getLeaderboard(_0x5c82ac) {
      return _0x3d1aad(this, arguments, undefined, function* (_0x37819d, _0x2d0cec = 30, _0x44756c = 0, _0x3a0ced = _0x30cb67.HIGHEST) {
        const _0x29dfb6 = this.apiUrl + "/v1/leaderboards/" + this.gameId + "/" + _0x37819d;
        const _0x3d1628 = {
          count: _0x2d0cec.toString(),
          offset: _0x44756c.toString()
        };
        const _0x2c01b3 = yield fetch(_0x29dfb6 + "?" + new URLSearchParams(_0x3d1628));
        const _0x5cdd82 = yield _0x2c01b3.json();
        if (!_0x2c01b3.ok) {
          throw new _0x246ee8(_0x5cdd82.error);
        }
        _0x5cdd82.payload = _0x5cdd82.data;
        const _0x12f315 = _0x5cdd82.players ? _0x5cdd82.players.map(_0x50341c => {
          const _0x528313 = new _0x4835dd(_0x50341c);
          _0x528313.score = this.getCachedScore(_0x37819d, _0x528313.id, _0x528313.score, _0x3a0ced);
          return _0x528313;
        }) : [];
        _0x5cdd82.players = _0x12f315;
        return new _0x4787f1(_0x5cdd82);
      });
    }
    getLeaderboardEntry(_0x258343, _0x195756) {
      return _0x3d1aad(this, arguments, undefined, function* (_0x18c5ae, _0x4bca07, _0x12ce74 = _0x30cb67.HIGHEST) {
        const _0x556aab = this.apiUrl + "/v1/leaderboards/" + this.gameId + "/" + _0x18c5ae + "/" + _0x4bca07;
        const _0x1130b1 = {
          platform: this.channel
        };
        const _0x4508d8 = yield fetch(_0x556aab + "?" + new URLSearchParams(_0x1130b1));
        const _0x360384 = yield _0x4508d8.json();
        if (!_0x4508d8.ok) {
          throw new _0x246ee8(_0x360384.error);
        }
        _0x360384.payload = _0x360384.data;
        _0x360384.score = this.getCachedScore(_0x18c5ae, _0x4bca07, _0x360384.score, _0x12ce74);
        return new _0x4835dd(_0x360384);
      });
    }
    submitScore(_0x1f2c86, _0x697571, _0x221862, _0x2c9f03, _0x4dc5e9) {
      return _0x3d1aad(this, arguments, undefined, function* (_0x4e572b, _0x5e3f0b, _0x299408, _0x2c0e5a, _0x3678f9, _0xebdb25 = _0x30cb67.HIGHEST) {
        this.cacheScore(_0x4e572b, _0x5e3f0b, _0x299408, _0xebdb25);
        const _0x214b20 = this.apiUrl + "/v1/leaderboards/" + this.gameId + "/" + _0x4e572b;
        const _0x2a95e5 = {
          id: _0x5e3f0b,
          score: _0x299408,
          platform: this.channel,
          disableSortOrder: _0xebdb25 === _0x30cb67.LATEST
        };
        if (_0x2c0e5a) {
          _0x2a95e5.name = _0x2c0e5a;
        }
        if (_0x3678f9) {
          _0x2a95e5.photo = _0x3678f9;
        }
        const _0x539807 = yield fetch(_0x214b20, {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify(_0x2a95e5)
        });
        const _0x311440 = yield _0x539807.json();
        if (!_0x539807.ok) {
          throw new _0x246ee8(_0x311440.error);
        }
        return _0x311440;
      });
    }
    getAllLeaderboardsIdsOfType(_0x9ca146) {
      return _0x3d1aad(this, undefined, undefined, function* () {
        return (yield this.getAllLeaderboardsOfType(Object.assign(Object.assign({}, _0x9ca146), {
          verbose: false
        }))).ids || [];
      });
    }
    getAllLeaderboardsDataOfType(_0x207ba1) {
      return _0x3d1aad(this, undefined, undefined, function* () {
        return (yield this.getAllLeaderboardsOfType(Object.assign(Object.assign({}, _0x207ba1), {
          verbose: true
        }))).leaderboards || [];
      });
    }
    getLeaderboardEntries(_0x1f9d74, _0x3de178) {
      return _0x3d1aad(this, arguments, undefined, function* (_0x3cc579, _0x2c2688, _0x505198 = _0x30cb67.HIGHEST) {
        if (!_0x2c2688.length) {
          return [];
        }
        const _0x5eee45 = this.apiUrl + "/v1/leaderboards/" + this.gameId + "/" + _0x3cc579 + "/entries";
        const _0x27fc5b = {
          platform: this.channel,
          players: _0x2c2688.join(",")
        };
        const _0x52ab4b = yield fetch(_0x5eee45 + "?" + new URLSearchParams(_0x27fc5b));
        const _0x120b10 = yield _0x52ab4b.json();
        if (!_0x52ab4b.ok) {
          throw new _0x246ee8(_0x120b10.error);
        }
        return ((_0x120b10 == null ? undefined : _0x120b10.entries) || []).map(_0x2e337c => {
          _0x2e337c.payload = _0x2e337c.data;
          _0x2e337c.score = this.getCachedScore(_0x3cc579, _0x2e337c.id, _0x2e337c.score, _0x505198);
          return new _0x4835dd(_0x2e337c);
        });
      });
    }
    getTimelineEntries(_0x4b0854) {
      return _0x3d1aad(this, arguments, undefined, function* ({
        leaderboardId: _0x3893d1,
        interval: _0x22ed23,
        minScore: _0x34b6c2,
        maxScore: _0x311a2d,
        limit: _0x231c30,
        page: _0x318140
      }) {
        const _0x1d44ba = this.apiUrl + "/v1/leaderboards/" + this.gameId + "/" + _0x3893d1 + "/timeline";
        const _0xa78e99 = {
          platform: this.channel,
          interval: _0x22ed23.toString(),
          minInterval: _0x34b6c2.toString(),
          maxInterval: _0x311a2d.toString(),
          entries: _0x231c30 == null ? undefined : _0x231c30.toString(),
          page: _0x318140 == null ? undefined : _0x318140.toString()
        };
        const _0x3db81d = new URLSearchParams();
        for (const [_0x427b89, _0x5a2c12] of Object.entries(_0xa78e99)) {
          if (_0x5a2c12 !== undefined) {
            _0x3db81d.set(_0x427b89, _0x5a2c12);
          }
        }
        const _0x5b2bba = yield fetch(_0x1d44ba + "?" + _0x3db81d);
        const _0x423227 = yield _0x5b2bba.json();
        if (!_0x5b2bba.ok) {
          throw new _0x246ee8(_0x423227.error);
        }
        return ((_0x423227 == null ? undefined : _0x423227.entries) || []).map(_0x4f2108 => new _0x4835dd(_0x4f2108));
      });
    }
    getAllLeaderboardsOfType(_0x2594d7) {
      return _0x3d1aad(this, arguments, undefined, function* ({
        type: _0x2cbfb9,
        playerId: _0x5e1eec,
        sortBy: _0x10c878 = "created",
        sortOrder: _0x35914c = "desc",
        count: _0x57c38a = 30,
        offset: _0x2527c2 = 0,
        verbose: _0x326266 = false
      }) {
        const _0x59b3a1 = this.apiUrl + "/v1/players/" + this.gameId + "/" + _0x5e1eec;
        const _0x200078 = {
          type: _0x2cbfb9,
          platform: this.channel,
          sortOrder: _0x35914c,
          sortBy: _0x10c878,
          count: _0x57c38a.toString(),
          offset: _0x2527c2.toString(),
          verbose: _0x326266 ? "true" : "false"
        };
        const _0x28d373 = yield fetch(_0x59b3a1 + "?" + new URLSearchParams(_0x200078));
        const _0x115971 = yield _0x28d373.json();
        if (!_0x28d373.ok) {
          throw new _0x246ee8(_0x115971.error);
        }
        return _0x115971;
      });
    }
    buildScoreCache(_0x3fee7e) {
      if (!this.leaderboards[_0x3fee7e]) {
        this.leaderboards[_0x3fee7e] = {
          scores: {}
        };
      }
      return this.leaderboards[_0x3fee7e];
    }
    getCachedScore(_0x367bd6, _0x5c691b, _0x504939, _0x1d946f) {
      const _0xf96d3 = this.buildScoreCache(_0x367bd6);
      const _0x3ea14b = _0xf96d3.scores[_0x5c691b];
      if (!_0x1d946f) {
        throw new Error("Somehow, we are missing cache policy!");
      }
      switch (_0x1d946f) {
        case _0x30cb67.HIGHEST:
          _0x504939 = Math.max(_0x3ea14b != null ? _0x3ea14b : 0, _0x504939);
          _0xf96d3.scores[_0x5c691b] = _0x504939;
          break;
        case _0x30cb67.LATEST:
          _0x504939 = _0x3ea14b != null ? _0x3ea14b : _0x504939;
      }
      return _0x504939;
    }
    cacheScore(_0x13fb3f, _0x4e62b8, _0x4e16e8, _0xbff6f1) {
      const _0x37cef0 = this.buildScoreCache(_0x13fb3f);
      const _0x1ee178 = _0x37cef0.scores[_0x4e62b8];
      if (!_0xbff6f1) {
        throw new Error("Somehow, we are missing cache policy!");
      }
      switch (_0xbff6f1) {
        case _0x30cb67.HIGHEST:
          _0x4e16e8 = Math.max(_0x1ee178 != null ? _0x1ee178 : 0, _0x4e16e8);
        case _0x30cb67.LATEST:
      }
      _0x37cef0.scores[_0x4e62b8] = _0x4e16e8;
    }
  }
  (function (_0x207717) {
    _0x207717[_0x207717.create = 0] = "create";
    _0x207717[_0x207717.getCurrentTournament = 1] = "getCurrentTournament";
    _0x207717[_0x207717.getActiveTournaments = 2] = "getActiveTournaments";
    _0x207717[_0x207717.postScore = 3] = "postScore";
    _0x207717[_0x207717.join = 4] = "join";
    _0x207717[_0x207717.leave = 5] = "leave";
    _0x207717[_0x207717.share = 6] = "share";
    _0x207717[_0x207717.invitePlayers = 7] = "invitePlayers";
  })(_0x4e5ef1 || (_0x4e5ef1 = {}));
  class _0xfce635 {
    constructor(_0x1830fa) {
      this.provider = _0x1830fa;
      this.API = _0x4e5ef1;
    }
    isSupported() {
      return this.provider.isSupported();
    }
    isSupportedAPI(_0x17dc6d) {
      return this.provider.getSupportedAPIs().indexOf(_0x17dc6d) !== -1;
    }
    getSupportedAPIs() {
      return this.provider.getSupportedAPIs();
    }
    create(_0x3c1ccd, _0x2a9908, _0x33fe23) {
      return this.provider.create(_0x3c1ccd, _0x2a9908, _0x33fe23);
    }
    getActiveTournaments() {
      return this.provider.getActiveTournaments();
    }
    getCurrentTournament() {
      return this.provider.getCurrentTournament();
    }
    join(_0x3af2e1) {
      return this.provider.join(_0x3af2e1);
    }
    leave() {
      return this.provider.leave();
    }
    share(_0x117134, _0x2619ac) {
      return this.provider.share(_0x117134, _0x2619ac);
    }
    invitePlayers(_0x292d66) {
      return this.provider.invitePlayers(_0x292d66);
    }
    updateScore(_0x38e8e0, _0x54824a, _0x473bc8, _0x1e6ae7) {
      return this.provider.postScore(_0x38e8e0, _0x54824a, _0x473bc8, _0x1e6ae7);
    }
  }
  class _0xdca54 {
    constructor({
      provider: _0x5498df,
      auth: _0x28fd83,
      logger: _0x1fc089,
      leaderboards: _0x488ceb
    }) {
      this.provider = _0x5498df;
      this.auth = _0x28fd83;
      this.logger = _0x1fc089;
      this.FRVRLeaderboards = _0x488ceb || new _0x17b882(this.provider.getLeaderboardsChannelId());
      this.platform = new _0xfce635(this.provider);
    }
    init(_0x2072b6, _0x44c588) {
      this.FRVRLeaderboards.init(_0x2072b6, _0x44c588);
    }
    create(_0x58bf2d, _0x59a0cf) {
      return _0x3d1aad(this, undefined, undefined, function* () {
        if (this.provider.isSupported() && this.provider.getSupportedAPIs().includes(_0x4e5ef1.create)) {
          const _0x50cdb6 = yield this.provider.create(0, _0x58bf2d, _0x59a0cf);
          yield this.ensureLeaderboardCreated(_0x50cdb6);
          return _0x50cdb6.id;
        }
        return yield this.FRVRLeaderboards.createLeaderboard(_0x2fdfae, {
          payload: _0x58bf2d,
          title: _0x59a0cf.title,
          endTime: _0x59a0cf.endTime,
          sortOrder: _0x59a0cf.sortOrder
        });
      });
    }
    postScore(_0x1ff9bd, _0x2e63c9, _0x5b7ed9, _0x8cea2b) {
      return _0x3d1aad(this, undefined, undefined, function* () {
        const _0x293712 = this.getPlayerId();
        if (!_0x293712) {
          throw new Error("Player is not logged in");
        }
        const _0x541884 = [this.FRVRLeaderboards.submitScore(_0x1ff9bd, _0x293712, _0x2e63c9, _0x5b7ed9, _0x8cea2b)];
        if (this.provider.getSupportedAPIs().includes(_0x4e5ef1.postScore)) {
          _0x541884.push(this.provider.postScore(_0x1ff9bd, _0x2e63c9, _0x5b7ed9, _0x8cea2b));
        }
        yield Promise.allSettled(_0x541884);
      });
    }
    getMyTournaments(_0x2a453b, _0x11d902) {
      return _0x3d1aad(this, undefined, undefined, function* () {
        const _0xcfc703 = this.getPlayerId();
        if (!_0xcfc703) {
          throw new Error("Player is not logged in");
        }
        const _0x2b2567 = {
          type: _0x2fdfae,
          count: _0x2a453b,
          offset: _0x11d902,
          playerId: _0xcfc703
        };
        return this.FRVRLeaderboards.getAllLeaderboardsDataOfType(_0x2b2567);
      });
    }
    getMyEntry(_0x1a7bca) {
      return _0x3d1aad(this, undefined, undefined, function* () {
        const _0x4e6647 = this.getPlayerId();
        if (!_0x4e6647) {
          throw new Error("Player is not logged in");
        }
        return this.FRVRLeaderboards.getLeaderboardEntry(_0x1a7bca, _0x4e6647);
      });
    }
    getTournamentById(_0x5ef2e9, _0x41a088, _0x5839de) {
      return this.FRVRLeaderboards.getLeaderboard(_0x5ef2e9, _0x41a088, _0x5839de);
    }
    ensureLeaderboardCreated(_0x283557) {
      return _0x3d1aad(this, undefined, undefined, function* () {
        var _0x3a1bd4 = _0x3b74a8(_0x283557, []);
        try {
          yield this.FRVRLeaderboards.getLeaderboard(_0x3a1bd4.id);
          return;
        } catch (_0x7b7c12) {}
        if (typeof _0x3a1bd4.payload == "string") {
          try {
            _0x3a1bd4.payload = JSON.parse(_0x3a1bd4.payload);
          } catch (_0x2a223e) {
            _0x3a1bd4.payload = {};
          }
        }
        yield this.FRVRLeaderboards.createLeaderboard(_0x2fdfae, {
          id: _0x3a1bd4.id,
          payload: _0x3a1bd4.payload,
          title: _0x3a1bd4.title,
          endTime: _0x3a1bd4.endTime
        });
      });
    }
    getPlayerId() {
      return this.auth.getFRVRID();
    }
  }
  const _0x304f69 = {
    isSupported: () => false,
    getSupportedAPIs: () => [],
    getLeaderboardsChannelId: () => "empty",
    getCurrentTournament() {
      return _0x3d1aad(this, undefined, undefined, function* () {
        return null;
      });
    },
    create() {
      return _0x3d1aad(this, undefined, undefined, function* () {
        return null;
      });
    },
    postScore() {
      return _0x3d1aad(this, undefined, undefined, function* () {});
    },
    share() {
      return _0x3d1aad(this, undefined, undefined, function* () {});
    },
    getActiveTournaments() {
      return _0x3d1aad(this, undefined, undefined, function* () {
        return [];
      });
    },
    join() {
      return _0x3d1aad(this, undefined, undefined, function* () {});
    },
    leave() {
      return _0x3d1aad(this, undefined, undefined, function* () {});
    },
    invitePlayers() {
      return _0x3d1aad(this, undefined, undefined, function* () {});
    }
  };
  class _0x3aa1e3 {
    constructor({
      logger: _0x2a9778,
      provider: _0x1f2d69
    }) {
      this.logger = _0x2a9778;
      this.provider = _0x1f2d69;
      this.platform = this.provider.platform;
    }
    init(_0x116c2b, _0x198438, _0x562474) {
      return _0x3d1aad(this, undefined, undefined, function* () {
        this.gameId = _0x116c2b;
        return yield this.provider.init(_0x116c2b, this.logger, _0x198438, _0x562474);
      });
    }
    create(_0x3b1213, _0x22b351) {
      return this.provider.create(_0x3b1213, _0x22b351);
    }
    challengeByContextId(_0x25569a, _0x5370d8, _0x5f0f78) {
      return this.provider.challengeByContextId(_0x25569a, _0x5370d8, _0x5f0f78);
    }
    challengeByPlayerId(_0xf57705, _0x133b57, _0x5a1e89) {
      return this.provider.challengeByPlayerId(_0xf57705, _0x133b57, _0x5a1e89);
    }
    getPossibleOpponents() {
      return this.provider.getPossibleOpponents();
    }
    getCurrentChallengeId() {
      return this.provider.getCurrentChallengeId();
    }
    getCurrentChallengeData() {
      return this.provider.getCurrentChallengeData();
    }
    leave() {
      return this.provider.leave();
    }
    getAllChallenges(_0x5474b6, _0x265e9f) {
      return this.provider.getAllChallenges(_0x5474b6, _0x265e9f);
    }
    getPlayerEntries(_0x39092a, _0x1baac3) {
      return this.provider.getPlayerEntries(_0x39092a, _0x1baac3);
    }
    getLeaderboardEntry(_0x2e5a31, _0x13b56d) {
      return this.provider.getLeaderboardEntry(_0x2e5a31, _0x13b56d);
    }
    getLeaderboardById(_0x11fd50, _0x241ba9, _0x24d0e1) {
      return this.provider.getLeaderboardById(_0x11fd50, _0x241ba9, _0x24d0e1);
    }
    postScore({
      score: _0x3b6a68,
      challengeId: _0x54276b,
      name: _0x3fbbb6,
      photo: _0x45b2c6,
      playerId: _0x252f43
    }) {
      return this.provider.postScore({
        score: _0x3b6a68,
        challengeId: _0x54276b,
        name: _0x3fbbb6,
        photo: _0x45b2c6,
        playerId: _0x252f43
      });
    }
    join(_0x395915) {
      return this.provider.join(_0x395915);
    }
    nudge(_0x29c140, _0x23d6b8) {
      return this.provider.nudge(_0x29c140, _0x23d6b8);
    }
    getOpponentsFromChallenges(_0x5b8286) {
      return this.provider.getOpponentsFromChallenges(_0x5b8286);
    }
    getChallengesByOpponents() {
      return this.provider.getChallengesByOpponents();
    }
    getEntryPayload() {
      return this.provider.getEntryPayload();
    }
    isSupported() {
      return this.provider.isSupported();
    }
  }
  var _0x17665a;
  (function (_0x3a71ae) {
    _0x3a71ae.getID = "context.getID";
    _0x3a71ae.getType = "context.getType";
    _0x3a71ae.isSizeBetween = "context.isSizeBetween";
    _0x3a71ae.switch = "context.switchAsync";
    _0x3a71ae.choose = "context.chooseAsync";
    _0x3a71ae.create = "context.createAsync";
    _0x3a71ae.getPlayers = "context.getPlayersAsync";
    _0x3a71ae.update = "updateAsync";
  })(_0x17665a || (_0x17665a = {}));
  const _0x36e781 = {
    platform: {
      API: _0x17665a,
      getSupportedAPIs: () => [],
      isSupportedAPI: () => false,
      getID: () => "",
      getType: () => "SOLO",
      isSizeBetween: () => ({
        answer: false,
        minSize: 0,
        maxSize: 0
      }),
      switch: () => Promise.resolve(),
      choose: () => Promise.resolve(),
      create: () => Promise.resolve(),
      getPlayers: () => Promise.resolve([]),
      update: () => Promise.resolve()
    },
    init() {
      return _0x3d1aad(this, undefined, undefined, function* () {});
    },
    create() {
      return _0x3d1aad(this, undefined, undefined, function* () {
        return "";
      });
    },
    challengeByPlayerId() {
      return _0x3d1aad(this, undefined, undefined, function* () {
        return "";
      });
    },
    getPossibleOpponents() {
      return _0x3d1aad(this, undefined, undefined, function* () {
        return [];
      });
    },
    challengeByContextId() {
      return _0x3d1aad(this, undefined, undefined, function* () {
        return "";
      });
    },
    getCurrentChallengeData() {
      return _0x3d1aad(this, undefined, undefined, function* () {});
    },
    leave() {
      return _0x3d1aad(this, undefined, undefined, function* () {});
    },
    getCurrentChallengeId: () => "",
    getPlayerEntries() {
      return _0x3d1aad(this, undefined, undefined, function* () {
        return [];
      });
    },
    getAllChallenges() {
      return _0x3d1aad(this, undefined, undefined, function* () {});
    },
    getLeaderboardEntry() {
      return _0x3d1aad(this, undefined, undefined, function* () {});
    },
    getLeaderboardById() {
      return _0x3d1aad(this, undefined, undefined, function* () {});
    },
    postScore() {
      return _0x3d1aad(this, undefined, undefined, function* () {});
    },
    join() {
      return _0x3d1aad(this, undefined, undefined, function* () {});
    },
    nudge() {
      return _0x3d1aad(this, undefined, undefined, function* () {});
    },
    getOpponentsFromChallenges() {
      return _0x3d1aad(this, undefined, undefined, function* () {});
    },
    getChallengesByOpponents() {
      return _0x3d1aad(this, undefined, undefined, function* () {});
    },
    getEntryPayload: () => ({}),
    isSupported: () => false
  };
  class _0x3e6616 {
    constructor({
      provider: _0x643b2b
    }) {
      this.ScoreCachePolicy = _0x30cb67;
      this.provider = _0x643b2b;
    }
    init(_0x283a73, _0x269b6f) {
      this.provider.init(_0x283a73, _0x269b6f);
    }
    isSupported() {
      return this.provider.isSupported();
    }
    getLeaderboardEntries(_0x2882b1, _0x408ad8, _0x3819f4) {
      return this.provider.getLeaderboardEntries(_0x2882b1, _0x408ad8, _0x3819f4);
    }
    getLeaderboardEntry(_0x5ddc9b, _0x5a75db, _0x21957e) {
      return this.provider.getLeaderboardEntry(_0x5ddc9b, _0x5a75db, _0x21957e);
    }
    getLeaderboard(_0xbfb8b3, _0x4f16c2, _0x5481ad, _0x3dea5d) {
      return this.provider.getLeaderboard(_0xbfb8b3, _0x4f16c2, _0x5481ad, _0x3dea5d);
    }
    postScore(_0x59cd2b, _0x5e12ac, _0xce8c5f) {
      return this.provider.postScore(_0x59cd2b, _0x5e12ac, _0xce8c5f);
    }
    create(_0x17f3d5, _0x319ee) {
      return this.provider.create(_0x17f3d5, _0x319ee != null ? _0x319ee : {});
    }
    getTimelineEntries(_0x19ed60) {
      return _0x3d1aad(this, undefined, undefined, function* () {
        return this.provider.getTimelineEntries(_0x19ed60);
      });
    }
  }
  const _0xc4d71b = {
    init() {},
    isSupported: () => false,
    getLeaderboardEntries() {
      return _0x3d1aad(this, undefined, undefined, function* () {
        return [];
      });
    },
    getLeaderboardEntry() {
      return _0x3d1aad(this, undefined, undefined, function* () {
        return {};
      });
    },
    getLeaderboard() {
      return _0x3d1aad(this, undefined, undefined, function* () {
        return {};
      });
    },
    postScore() {
      return _0x3d1aad(this, undefined, undefined, function* () {});
    },
    create() {
      return _0x3d1aad(this, undefined, undefined, function* () {});
    },
    getTimelineEntries() {
      return _0x3d1aad(this, undefined, undefined, function* () {
        return [];
      });
    }
  };
  const _0x27dd63 = {
    registrationSuccess: "registrationSuccess",
    registrationConflict: "registrationConflict",
    loginSuccess: "loginSuccess",
    accountNotActive: "accountNotActive",
    invalidCredentials: "invalidCredentials",
    invalidFormat: "invalidFormat",
    serverError: "serverError",
    unknownError: "unknownError",
    networkError: "networkError",
    operationSuccess: "operationSuccess",
    tokenExpired: "tokenExpired",
    notLoggedIn: "notLoggedIn",
    platformNotAvailable: "platformNotAvailable",
    platformLoginFail: "platformLoginFail,"
  };
  const _0x28a435 = {
    REG_SUCCESS: {
      type: _0x27dd63.registrationSuccess,
      success: true,
      message: "User registered successfully. Pending confirmation"
    },
    LOGIN_SUCCESS: {
      type: _0x27dd63.loginSuccess,
      success: true,
      message: "Login successful"
    },
    OPERATION_SUCCESS: {
      type: _0x27dd63.operationSuccess,
      success: true,
      message: "Operation success"
    },
    REG_CONFLICT: {
      type: _0x27dd63.registrationConflict,
      success: false,
      message: "Email already registered"
    },
    ACCOUNT_NOT_ACTIVE: {
      type: _0x27dd63.accountNotActive,
      success: false,
      message: "Provided credentials are valid but account is either not confirmed or suspended"
    },
    INVALID_CREDENTIALS: {
      type: _0x27dd63.invalidCredentials,
      success: false,
      message: "Provided credentials are invalid"
    },
    INVALID_FORMAT: {
      type: _0x27dd63.invalidFormat,
      success: false,
      message: "Invalid format on data"
    },
    SERVER_ERROR: {
      type: _0x27dd63.serverError,
      success: false,
      message: "Error on server"
    },
    UNKNOWN_ERROR: {
      type: _0x27dd63.unknownError,
      success: false,
      message: "Unknown error"
    },
    NETWORK_ERROR: {
      type: _0x27dd63.networkError,
      success: false,
      message: "Network Error"
    },
    TOKEN_EXPIRED: {
      type: _0x27dd63.tokenExpired,
      success: false,
      message: "Token has expired. Request a new challenge to get a fresh one"
    },
    NOT_LOGGED_IN: {
      type: _0x27dd63.notLoggedIn,
      success: false,
      message: "Cannot perform operation without active login"
    },
    PLATFORM_NOT_AVAILABLE: {
      type: _0x27dd63.platformNotAvailable,
      success: false,
      message: "The requested platform is not available"
    },
    PLATFORM_LOGIN_FAIL: {
      type: _0x27dd63.platformLoginFail,
      success: false,
      message: "The login on the requested platform failed"
    }
  };
  var _0x1e0f4c = Object.freeze({
    "__proto__": null,
    RESPONSE_TYPES: _0x27dd63,
    default: _0x27dd63,
    RESPONSE_DEFINITIONS: _0x28a435
  });
  function _0x281ab3(_0x1cc052) {
    if (!_0x1cc052) {
      return null;
    }
    const _0x28f795 = _0x1cc052.split(".");
    if (_0x28f795.length != 3) {
      return null;
    }
    const _0x2e86b1 = _0x28f795[1].replace(/-/g, "+").replace(/_/g, "/");
    const _0x1948d9 = window.atob(_0x2e86b1).split("").map(function (_0x52fbd5) {
      return "%" + ("00" + _0x52fbd5.charCodeAt(0).toString(16)).slice(-2);
    }).join("");
    try {
      return JSON.parse(decodeURIComponent(_0x1948d9));
    } catch (_0x3a67dd) {
      return null;
    }
  }
  class _0x2c2d8c {
    constructor(_0x3ecfd0, _0x50b55c) {
      this.accessToken = _0x3ecfd0;
      this.refreshToken = _0x50b55c;
    }
    set accessToken(_0x53c306) {
      var _0x1747f4;
      const _0xd6a63c = _0x281ab3(_0x53c306);
      if (_0xd6a63c) {
        this._accessToken = _0x53c306;
        this._accessPayload = _0xd6a63c;
        this._accessExpiration = parseInt(_0xd6a63c == null ? undefined : _0xd6a63c.exp, 10) || 0;
        this._accessIAT = parseInt(_0xd6a63c == null ? undefined : _0xd6a63c.iat, 10) || 0;
        this._verified = !(((_0x1747f4 = _0xd6a63c == null ? undefined : _0xd6a63c.extra) === null || _0x1747f4 === undefined ? undefined : _0x1747f4.verified) === false);
      } else {
        this._accessToken = null;
        this._accessPayload = null;
        this._accessExpiration = 0;
        this._accessIAT = 0;
        this._verified = false;
      }
    }
    get accessToken() {
      return this._accessToken;
    }
    set refreshToken(_0x47ad98) {
      var _0x40a1de;
      const _0x3c1410 = _0x281ab3(_0x47ad98);
      if (_0x3c1410) {
        this._refreshToken = _0x47ad98;
        this._refreshPayload = _0x3c1410;
        this._refreshExpiration = parseInt(_0x3c1410 == null ? undefined : _0x3c1410.exp, 10);
        this._platform = (_0x40a1de = _0x3c1410 == null ? undefined : _0x3c1410.extra) === null || _0x40a1de === undefined ? undefined : _0x40a1de.platform;
        this._frvrID = _0x3c1410 == null ? undefined : _0x3c1410.sub;
      } else {
        this._refreshToken = null;
        this._refreshPayload = null;
        this._refreshExpiration = 0;
        this._platform = null;
        this._frvrID = null;
      }
    }
    get refreshToken() {
      return this._refreshToken;
    }
    get accessExpiration() {
      return this._accessExpiration;
    }
    get refreshExpiration() {
      return this._refreshExpiration;
    }
    get platform() {
      return this._platform;
    }
    get frvrID() {
      return this._frvrID;
    }
    get isVerified() {
      return this._verified;
    }
    get accessIssuedAt() {
      return this._accessIAT;
    }
    get timeTillAccessExpiry() {
      if (this.accessToken) {
        return Math.floor(this._accessExpiration - Date.now() / 1000);
      } else {
        return -1;
      }
    }
    get accessLifespan() {
      if (this.accessToken) {
        return this._accessExpiration - this._accessIAT;
      } else {
        return 0;
      }
    }
    updateTokens(_0x439c27, _0x54999e) {
      this.accessToken = _0x439c27;
      this.refreshToken = _0x54999e;
    }
    updateTokensIfValid(_0x39e82d, _0x5aa7b9) {
      const _0xcb3483 = this.accessToken;
      const _0x5345e4 = this.refreshToken;
      this.updateTokens(_0x39e82d, _0x5aa7b9);
      if (!(this.isAccessValid() && this.isRefreshValid())) {
        this.accessToken = _0xcb3483;
        this.refreshToken = _0x5345e4;
      }
    }
    isAccessValid() {
      return !!this._accessToken && (this._accessExpiration - 60) * 1000 > Date.now();
    }
    isRefreshValid() {
      return !!this._refreshToken && (this._refreshExpiration - 60) * 1000 > Date.now();
    }
    isAnyValid() {
      return this.isRefreshValid() || this.isAccessValid();
    }
    shouldRefresh() {
      return this.isRefreshValid() && !this.isAccessValid();
    }
    getAccessPayload() {
      return this._accessPayload;
    }
    getRefreshPayload() {
      return this._refreshPayload;
    }
  }
  const _0x5bbdc4 = "__FRVR_auth_refresh_token";
  const _0x28b9d9 = "__FRVR_auth_access_token";
  class _0x5844aa {
    constructor() {
      this._currentPair = new _0x2c2d8c();
      this.pairsPerPlatform = {};
      this.storage = _0x55f80a;
    }
    initFromStorage() {
      return _0x3d1aad(this, arguments, undefined, function* (_0x54006c = _0x55f80a) {
        this.storage = _0x54006c;
        const _0x52c708 = yield this.storage.getItem(_0x5bbdc4);
        const _0x42632f = yield this.storage.getItem(_0x28b9d9);
        this.currentPair = new _0x2c2d8c(_0x42632f, _0x52c708);
      });
    }
    getAccessToken() {
      return this.currentPair.accessToken;
    }
    getRefreshToken() {
      return this.currentPair.refreshToken;
    }
    getFRVRID() {
      return this.currentPair.frvrID;
    }
    isVerified() {
      return this.currentPair.isVerified;
    }
    shouldRefresh() {
      return this.currentPair.shouldRefresh();
    }
    getCurrentPlatform() {
      return this.currentPair.platform;
    }
    getAvailablePlatforms() {
      var _0x333d58;
      const _0x5781de = [];
      for (const _0x2cfc03 in this.pairsPerPlatform) {
        const _0x40ebc5 = _0x2cfc03;
        if ((_0x333d58 = this.pairsPerPlatform[_0x40ebc5]) === null || _0x333d58 === undefined ? undefined : _0x333d58.isAnyValid()) {
          _0x5781de.push(_0x40ebc5);
        }
      }
      return _0x5781de;
    }
    get availableTokens() {
      return this.pairsPerPlatform;
    }
    setAsCurrent(_0x211f50) {
      this.currentPair = _0x211f50;
      this.storage.setItem(_0x5bbdc4, _0x211f50.refreshToken);
      this.storage.setItem(_0x28b9d9, _0x211f50.accessToken);
    }
    addPairAsCurrent(_0x1e3218, _0x42b136) {
      const _0x5e41b9 = new _0x2c2d8c(_0x1e3218, _0x42b136);
      this.setAsCurrent(_0x5e41b9);
    }
    updateCurrentPair(_0x541d72, _0x3f816a) {
      this.setAsCurrent(new _0x2c2d8c(_0x541d72, _0x3f816a));
    }
    updateAndValidateCurrentPair(_0x548f6d, _0x304c20) {
      this.updateCurrentPair(_0x548f6d, _0x304c20);
      return this.isAccessValid();
    }
    deleteTokens() {
      this.currentPair = new _0x2c2d8c();
      this.pairsPerPlatform = {};
      this.storage.removeItems([_0x5bbdc4, _0x28b9d9]);
    }
    isAccessValid() {
      return this.currentPair.isAccessValid();
    }
    isRefreshValid() {
      return this.currentPair.isRefreshValid();
    }
    isAnyValid() {
      return this.currentPair.isAnyValid();
    }
    get currentPair() {
      return this._currentPair;
    }
    set currentPair(_0x50e741) {
      this._currentPair = _0x50e741;
      if (_0x50e741 == null ? undefined : _0x50e741.platform) {
        this.pairsPerPlatform[_0x50e741.platform] = _0x50e741;
      }
    }
  }
  var _0x4fbe7c;
  _0x5ccbd3.Platform = undefined;
  (_0x4fbe7c = _0x5ccbd3.Platform || (_0x5ccbd3.Platform = {})).FRVR = "frvr";
  _0x4fbe7c.ANONYMOUS = "anonymous";
  _0x4fbe7c.FACEBOOK_INSTANT = "facebook-instant";
  _0x4fbe7c.FACEBOOK_SDK = "facebook-web";
  _0x4fbe7c.GOOGLE_INTERNAL = "google-internal";
  _0x4fbe7c.SAMSUNG_INSTANT = "samsung-instant";
  _0x4fbe7c.APPLE = "apple";
  _0x4fbe7c.DISCORD = "discord";
  _0x4fbe7c.MICROSOFT = "microsoft";
  const _0x2af07c = {
    AUTH_REGISTRATION: {
      method: "POST",
      path: "/register"
    },
    AUTH_LOGIN: {
      method: "POST",
      path: "/login"
    },
    AUTH_REFRESH: {
      method: "POST",
      path: "/refresh"
    },
    AUTH_RECOVER: {
      method: "POST",
      path: "/recover"
    },
    AUTH_RECOVER_CHALLENGE: {
      method: "POST",
      path: "/recover-challenge"
    },
    AUTH_VERIFY: {
      method: "POST",
      path: "/verify"
    },
    AUTH_VERIFY_CHALLENGE: {
      method: "POST",
      path: "/verify-challenge"
    },
    AUTH_SETTINGS: {
      method: "POST",
      path: "/settings"
    },
    USER_VERIFIED: {
      method: "GET",
      path: "/user/verified"
    }
  };
  class _0x30df3a {
    constructor(_0x5ca065 = {}) {
      var _0x33dfc4;
      this.ongoingFRVRLogin = null;
      this.apiBaseURL = ((_0x33dfc4 = _0x5ca065.config) === null || _0x33dfc4 === undefined ? undefined : _0x33dfc4.overrideBackendURL) || (_0x5ca065.env == _0x5ccbd3.Env.PRODUCTION ? "https://crucible.frvr.com/v1/auth" : "https://staging.crucible.frvr.com/v1/auth");
    }
    isLoggingIn() {
      return !!this.ongoingFRVRLogin;
    }
    register(_0x4afbd2) {
      return _0x3d1aad(this, undefined, undefined, function* () {
        const _0x516bcf = {
          platform: _0x5ccbd3.Platform.FRVR,
          credentials: _0x4afbd2
        };
        const _0x2fa8b2 = {
          201: () => _0x28a435.REG_SUCCESS,
          409: () => {
            throw _0x28a435.REG_CONFLICT;
          }
        };
        return this.fetchAndHandleCommonErrors(_0x2af07c.AUTH_REGISTRATION, _0x2fa8b2, _0x516bcf);
      });
    }
    login(_0x2cb42b) {
      return _0x3d1aad(this, undefined, undefined, function* () {
        if (this.ongoingFRVRLogin) {
          return this.ongoingFRVRLogin;
        }
        const _0x832df7 = {
          201: _0x111540 => _0x3d1aad(this, undefined, undefined, function* () {
            const _0x1e70d8 = yield _0x111540.json();
            const _0x2bdb6d = new _0x2c2d8c(_0x1e70d8.accessToken, _0x1e70d8.refreshToken);
            if (_0x2bdb6d.isAccessValid()) {
              return Object.assign(Object.assign({}, _0x28a435.LOGIN_SUCCESS), {
                tokenPair: _0x2bdb6d
              });
            }
            throw _0x28a435.SERVER_ERROR;
          }),
          401: () => {
            throw _0x28a435.INVALID_CREDENTIALS;
          },
          403: () => {
            throw _0x28a435.ACCOUNT_NOT_ACTIVE;
          }
        };
        this.ongoingFRVRLogin = this.fetchAndHandleCommonErrors(_0x2af07c.AUTH_LOGIN, _0x832df7, _0x2cb42b);
        return this.ongoingFRVRLogin.finally(() => {
          this.ongoingFRVRLogin = null;
        });
      });
    }
    loginAsAnonymous() {
      return _0x3d1aad(this, undefined, undefined, function* () {
        return this.login({
          platform: _0x5ccbd3.Platform.ANONYMOUS
        });
      });
    }
    checkVerification(_0x485563) {
      return _0x3d1aad(this, undefined, undefined, function* () {
        const _0xa6e2b1 = {
          200: _0x103cd0 => _0x3d1aad(this, undefined, undefined, function* () {
            const _0x3553d1 = yield _0x103cd0.json();
            if (_0x3553d1 == null) {
              return undefined;
            } else {
              return _0x3553d1.verified;
            }
          })
        };
        return this.fetchAndHandleCommonErrors(_0x2af07c.USER_VERIFIED, _0xa6e2b1, undefined, {
          "X-REFRESH-TOKEN": _0x485563.refreshToken
        });
      });
    }
    initiateVerifyChallenge(_0x14dc43) {
      return _0x3d1aad(this, undefined, undefined, function* () {
        const _0x203d24 = {
          platform: _0x5ccbd3.Platform.FRVR,
          credentials: _0x14dc43
        };
        const _0x10e50a = {
          201: () => _0x28a435.OPERATION_SUCCESS,
          401: () => {
            throw _0x28a435.INVALID_CREDENTIALS;
          }
        };
        return this.fetchAndHandleCommonErrors(_0x2af07c.AUTH_VERIFY_CHALLENGE, _0x10e50a, _0x203d24);
      });
    }
    initiateRecoveryChallenge(_0xa9f756) {
      return _0x3d1aad(this, undefined, undefined, function* () {
        const _0x57f526 = {
          platform: _0x5ccbd3.Platform.FRVR,
          credentials: _0xa9f756
        };
        const _0x3daf87 = {
          201: () => _0x28a435.OPERATION_SUCCESS,
          401: () => {
            throw _0x28a435.INVALID_CREDENTIALS;
          }
        };
        return this.fetchAndHandleCommonErrors(_0x2af07c.AUTH_RECOVER_CHALLENGE, _0x3daf87, _0x57f526);
      });
    }
    changePassword(_0x4689ee, _0x2a7592) {
      return _0x3d1aad(this, undefined, undefined, function* () {
        const _0xcd8726 = {
          platform: _0x5ccbd3.Platform.FRVR,
          credentials: {
            newPassword: _0x2a7592
          }
        };
        const _0x11630b = {
          200: () => _0x28a435.OPERATION_SUCCESS,
          401: () => {
            throw _0x28a435.INVALID_CREDENTIALS;
          }
        };
        return this.fetchAndHandleCommonErrors(_0x2af07c.AUTH_SETTINGS, _0x11630b, _0xcd8726, {
          Authorization: "Bearer " + _0x4689ee
        });
      });
    }
    refreshTokens(_0xafbb46) {
      return _0x3d1aad(this, undefined, undefined, function* () {
        return this.fetchAndHandleCommonErrors(_0x2af07c.AUTH_REFRESH, {
          201: _0x573648 => _0x3d1aad(this, undefined, undefined, function* () {
            const _0x17cb45 = yield _0x573648.json();
            if (!_0x17cb45.accessToken || !_0x17cb45.refreshToken) {
              throw _0x28a435.SERVER_ERROR;
            }
            _0xafbb46.updateTokensIfValid(_0x17cb45.accessToken, _0x17cb45.refreshToken);
            if (_0xafbb46.isAccessValid()) {
              return _0x28a435.OPERATION_SUCCESS;
            }
            throw _0x28a435.SERVER_ERROR;
          }),
          401: () => {
            throw _0x28a435.INVALID_CREDENTIALS;
          }
        }, {
          refreshToken: _0xafbb46.refreshToken
        });
      });
    }
    fetchAndHandleCommonErrors(_0x4fa22d, _0x15ed16) {
      return _0x3d1aad(this, arguments, undefined, function* (_0x1cec58, _0x72e538, _0x58e8ab = {}, _0x4611b7 = {}) {
        const {
          path: _0x2e36f0,
          method: _0x3e0226
        } = _0x1cec58;
        const _0x344258 = this.apiBaseURL + _0x2e36f0;
        const _0x1f065f = {
          method: _0x3e0226,
          headers: Object.assign({
            "Content-Type": "application/json"
          }, _0x4611b7),
          body: _0x58e8ab && JSON.stringify(_0x58e8ab)
        };
        let _0x1a57d5;
        try {
          _0x1a57d5 = yield fetch(_0x344258, _0x1f065f);
        } catch (_0x37e501) {
          throw Object.assign(Object.assign({}, _0x28a435.NETWORK_ERROR), {
            payload: {
              error: _0x37e501
            }
          });
        }
        if (!_0x1a57d5) {
          throw _0x28a435.NETWORK_ERROR;
        }
        if (_0x72e538[_0x1a57d5.status]) {
          return _0x72e538[_0x1a57d5.status](_0x1a57d5);
        }
        switch (_0x1a57d5.status) {
          case 400:
            throw _0x28a435.INVALID_FORMAT;
          case 500:
            throw _0x28a435.SERVER_ERROR;
          default:
            throw Object.assign(Object.assign({}, _0x28a435.UNKNOWN_ERROR), {
              payload: {
                status: _0x1a57d5.status,
                url: _0x1cec58
              }
            });
        }
      });
    }
  }
  class _0x31175e {
    constructor(_0x390c65 = {}) {
      var _0x5f5d24;
      var _0x54a379;
      var _0x454333;
      var _0x36a960;
      var _0x2362b7;
      var _0x302fb3;
      var _0x3c5cdf;
      this.loginStatusListeners = [];
      this.proactiveRefreshTimeoutID = -1;
      this.logger = (_0x5f5d24 = _0x390c65.logger) !== null && _0x5f5d24 !== undefined ? _0x5f5d24 : _0x18650f;
      this.providers = (_0x54a379 = _0x390c65.providers) !== null && _0x54a379 !== undefined ? _0x54a379 : [];
      this.storage = (_0x454333 = _0x390c65.storage) !== null && _0x454333 !== undefined ? _0x454333 : _0x55f80a;
      this.serviceClient = (_0x36a960 = _0x390c65.serviceClient) !== null && _0x36a960 !== undefined ? _0x36a960 : new _0x30df3a(_0x390c65);
      this.tokenHandler = (_0x2362b7 = _0x390c65.tokenHandler) !== null && _0x2362b7 !== undefined ? _0x2362b7 : new _0x5844aa();
      this._isFRVRLoginEnabled = !this.providers.find(_0x3c8f48 => _0x3c8f48.prohibitsLoginWithFRVRCredentials());
      this._isAnonymousLoginEnabled = this._isFRVRLoginEnabled && (_0x3c5cdf = (_0x302fb3 = _0x390c65.config) === null || _0x302fb3 === undefined ? undefined : _0x302fb3.enableAnonymousLogin) !== null && _0x3c5cdf !== undefined && _0x3c5cdf;
    }
    init() {
      return _0x3d1aad(this, undefined, undefined, function* () {
        var _0x1ce9fa;
        yield this.tokenHandler.initFromStorage(this.storage);
        const _0x4ac344 = {
          loginWithProvider: this.loginWithProvider.bind(this)
        };
        let _0x5c138a = false;
        for (const _0x5dda1b of this.providers) {
          yield _0x5dda1b.init(_0x4ac344);
          if (_0x5dda1b.getCredentials() && !_0x5c138a) {
            _0x5c138a = true;
            if ((_0x1ce9fa = _0x5dda1b.handlesFRVRLogin) === null || _0x1ce9fa === undefined ? undefined : _0x1ce9fa.call(_0x5dda1b)) {
              break;
            }
            this.loginWithProvider(_0x5dda1b).catch(_0x18aab5 => {
              var _0x394be0;
              if (!((_0x394be0 = this.logger) === null || _0x394be0 === undefined)) {
                _0x394be0.warn("Auto login with platform " + _0x5dda1b.getPlatformId + " failed!", _0x18aab5);
              }
            });
          }
        }
        if (_0x5c138a || !this.isLoggedIn()) {
          if (!_0x5c138a && this._isAnonymousLoginEnabled) {
            this.loginAsAnonymous().catch(_0x20ba4c => {
              var _0x19c81a;
              if (!((_0x19c81a = this.logger) === null || _0x19c81a === undefined)) {
                _0x19c81a.warn("Auto login with anonymous account failed!", _0x20ba4c);
              }
            });
          }
        } else {
          this.onLoginStatusChange();
        }
      });
    }
    getAccessToken() {
      if (this.shouldRefreshTokens()) {
        return null;
      } else {
        return this.tokenHandler.getAccessToken();
      }
    }
    getFRVRID() {
      if (this.isLoggedIn()) {
        return this.tokenHandler.getFRVRID();
      } else {
        return null;
      }
    }
    isVerified() {
      return this.tokenHandler.isVerified();
    }
    getCredentials() {
      if (!this.isLoggedIn()) {
        return;
      }
      return Object.assign({
        [_0x5ccbd3.Platform.FRVR]: {
          userID: this.tokenHandler.getFRVRID(),
          accessToken: this.tokenHandler.getAccessToken(),
          isTokenExpired: !this.tokenHandler.isAccessValid(),
          isVerified: this.tokenHandler.isVerified()
        }
      }, this.getThirdPartyCredentials());
    }
    getThirdPartyCredentials() {
      const _0x332512 = {};
      this.providers.forEach(_0x28b093 => {
        if (_0x28b093 && _0x28b093.isLoggedIn()) {
          _0x332512[_0x28b093.getPlatformId()] = _0x28b093.getCredentials();
        }
      });
      return _0x332512;
    }
    isLoggedIn() {
      return this.tokenHandler.isAnyValid();
    }
    isLoggingIn() {
      return this.serviceClient.isLoggingIn() || !!this.providers.find(_0x2ead6e => _0x2ead6e.isLoggingIn());
    }
    getCurrentPlatform() {
      return this.tokenHandler.getCurrentPlatform();
    }
    getAvailableLoginPlatforms() {
      return this.providers.filter(_0x389f0c => _0x389f0c.isLoginSupported()).map(_0x547bf9 => _0x547bf9.getPlatformId());
    }
    isPlatformAvailable(_0x36c059) {
      return !!this.providers.find(_0x18263d => _0x18263d.isLoginSupported() && _0x18263d.getPlatformId() == _0x36c059);
    }
    isFRVRLoginEnabled() {
      return this._isFRVRLoginEnabled;
    }
    isLogoutSupported() {
      return !this.providers.find(_0x27508f => !_0x27508f.isLogoutSupported());
    }
    addStatusChangeListener(_0x5a2c4b) {
      this.loginStatusListeners.push(_0x5a2c4b);
    }
    registerOnFRVR(_0x403095) {
      return _0x3d1aad(this, arguments, undefined, function* (_0x22c1e9, _0x3cb749 = true) {
        return this.serviceClient.register(_0x22c1e9).then(() => this.loginToFRVR({
          platform: _0x5ccbd3.Platform.FRVR,
          credentials: _0x22c1e9
        })).catch(_0x2d8bc0 => {
          if (_0x2d8bc0.type == _0x28a435.REG_CONFLICT.type && _0x3cb749) {
            return this.loginToFRVR({
              platform: _0x5ccbd3.Platform.FRVR,
              credentials: _0x22c1e9
            });
          }
          throw _0x2d8bc0;
        });
      });
    }
    loginToFRVR(_0xf25f33) {
      return _0x3d1aad(this, undefined, undefined, function* () {
        return this.serviceClient.login(_0xf25f33).then(_0x2dbe61 => _0x3d1aad(this, undefined, undefined, function* () {
          if (_0x2dbe61.tokenPair) {
            this.tokenHandler.setAsCurrent(_0x2dbe61.tokenPair);
            for (const _0x57b076 of this.providers) {
              if (_0x57b076.onFRVRTokensReceived) {
                yield _0x57b076.onFRVRTokensReceived(this.tokenHandler.currentPair);
              }
            }
            this.onLoginStatusChange();
          }
          return _0x3b74a8(_0x2dbe61, ["tokenPair"]);
        }));
      });
    }
    loginAsAnonymous() {
      return _0x3d1aad(this, undefined, undefined, function* () {
        if (!this._isAnonymousLoginEnabled) {
          throw _0x28a435.PLATFORM_NOT_AVAILABLE;
        }
        const _0x11b7b1 = yield this.serviceClient.loginAsAnonymous();
        const {
          tokenPair: _0x36f81c
        } = _0x11b7b1;
        const _0x232df4 = _0x3b74a8(_0x11b7b1, ["tokenPair"]);
        if (_0x36f81c) {
          this.tokenHandler.setAsCurrent(_0x36f81c);
          for (const _0xdf45a2 of this.providers) {
            if (_0xdf45a2.onFRVRTokensReceived) {
              yield _0xdf45a2.onFRVRTokensReceived(this.tokenHandler.currentPair);
            }
          }
          this.onLoginStatusChange();
        }
        return _0x232df4;
      });
    }
    loginThroughPlatform(_0x2def75) {
      return _0x3d1aad(this, undefined, undefined, function* () {
        let _0x3fa8a2;
        _0x3fa8a2 = _0x2def75 || this.providers.length != 1 ? this.providers.find(_0x1162ff => _0x1162ff.getPlatformId() == _0x2def75) : this.providers[0];
        if (!_0x3fa8a2) {
          throw _0x28a435.PLATFORM_NOT_AVAILABLE;
        }
        return _0x3fa8a2.login().catch(_0xa0c717 => {
          throw Object.assign(Object.assign({}, _0x28a435.PLATFORM_LOGIN_FAIL), {
            payload: {
              platform: _0x3fa8a2.getPlatformId(),
              error: _0xa0c717
            }
          });
        }).then(_0x177537 => {
          if (_0x177537) {
            return this.loginWithProvider(_0x3fa8a2);
          }
          throw Object.assign(Object.assign({}, _0x28a435.PLATFORM_LOGIN_FAIL), {
            payload: {
              platform: _0x3fa8a2.getPlatformId()
            }
          });
        });
      });
    }
    login(_0x53b6c8, _0x4b0c73) {
      if (_0x53b6c8 && _0x4b0c73) {
        return this.loginToFRVR({
          platform: _0x53b6c8,
          credentials: _0x4b0c73
        });
      } else {
        return this.loginThroughPlatform(_0x53b6c8);
      }
    }
    logout() {
      this.tokenHandler.deleteTokens();
      this.providers.forEach(_0x46bbe1 => {
        _0x46bbe1.logout();
      });
      this.onLoginStatusChange();
    }
    mergeAccounts(_0x33931b, _0x514028) {
      return _0x3d1aad(this, undefined, undefined, function* () {});
    }
    initiateVerifyChallenge(_0x34462d) {
      return _0x3d1aad(this, undefined, undefined, function* () {
        return this.serviceClient.initiateVerifyChallenge(_0x34462d);
      });
    }
    initiateRecoveryChallenge(_0x50fb05) {
      return _0x3d1aad(this, undefined, undefined, function* () {
        return this.serviceClient.initiateRecoveryChallenge(_0x50fb05);
      });
    }
    changePassword(_0x4af784) {
      return _0x3d1aad(this, undefined, undefined, function* () {
        if (!this.isLoggedIn()) {
          throw _0x28a435.NOT_LOGGED_IN;
        }
        return this.serviceClient.changePassword(this.tokenHandler.getRefreshToken(), _0x4af784);
      });
    }
    synchronizeVerifiedStatus() {
      return _0x3d1aad(this, undefined, undefined, function* () {
        return !(!this.isVerified() && this.isLoggedIn()) || this.serviceClient.checkVerification(this.tokenHandler.currentPair).then(_0xf5a9f9 => !!_0xf5a9f9 && this.refreshCurrentPair().then(() => true));
      });
    }
    authenticatedFetch(_0x46c944, _0xf4bf6d) {
      return _0x3d1aad(this, undefined, undefined, function* () {
        _0xf4bf6d = yield this.decorateRequestWithAuth(_0xf4bf6d);
        return fetch(_0x46c944, _0xf4bf6d);
      });
    }
    decorateRequestWithAuth(_0x31b8ef) {
      return _0x3d1aad(this, undefined, undefined, function* () {
        if (this.shouldRefreshTokens()) {
          yield this.refreshCurrentPair();
        }
        if (!this.tokenHandler.isAccessValid()) {
          throw _0x28a435.NOT_LOGGED_IN;
        }
        return Object.assign(Object.assign({}, _0x31b8ef), {
          headers: Object.assign(Object.assign({
            "Content-Type": "application/json"
          }, _0x31b8ef.headers), {
            Authorization: "Bearer " + this.tokenHandler.getAccessToken()
          })
        });
      });
    }
    onLoginStatusChange() {
      const _0x24e2fa = this.isLoggedIn();
      this.loginStatusListeners.forEach(_0x4395d7 => {
        _0x4395d7(_0x24e2fa);
      });
      this.updateProactiveRefresh();
    }
    getFreshAccessToken() {
      return _0x3d1aad(this, undefined, undefined, function* () {
        if (this.shouldRefreshTokens()) {
          yield this.refreshCurrentPair();
        }
        return this.tokenHandler.getAccessToken();
      });
    }
    shouldRefreshTokens() {
      return this.tokenHandler.shouldRefresh();
    }
    refreshTokens(_0x418009) {
      return _0x3d1aad(this, undefined, undefined, function* () {
        const _0x2434c9 = this.serviceClient.refreshTokens(_0x418009);
        _0x2434c9.then(() => {
          this.updateProactiveRefresh();
        }).catch(() => {});
        return _0x2434c9.catch(_0x185321 => _0x3d1aad(this, undefined, undefined, function* () {
          const _0x15b123 = this.providers.find(_0x455a7c => _0x455a7c.getPlatformId() == _0x418009.platform);
          if (_0x185321.type != _0x27dd63.invalidCredentials || !(_0x15b123 == null ? undefined : _0x15b123.isLoggedIn())) {
            if (this.tokenHandler.isAccessValid()) {
              this.updateProactiveRefresh();
            } else {
              this.logout();
            }
            throw _0x185321;
          }
          try {
            yield this.loginWithProvider(_0x15b123);
            return true;
          } catch (_0x12dc58) {
            this.logout();
            throw _0x12dc58;
          }
        }));
      });
    }
    refreshCurrentPair() {
      return _0x3d1aad(this, undefined, undefined, function* () {
        return this.refreshTokens(this.tokenHandler.currentPair).then(_0x12f3f2 => _0x3d1aad(this, undefined, undefined, function* () {
          for (const _0x1f9109 of this.providers) {
            if (_0x1f9109.onFRVRTokensReceived) {
              yield _0x1f9109.onFRVRTokensReceived(this.tokenHandler.currentPair);
            }
          }
          return _0x12f3f2;
        }));
      });
    }
    loginWithProvider(_0x2ed55f) {
      return _0x3d1aad(this, undefined, undefined, function* () {
        return this.loginToFRVR({
          platform: _0x2ed55f == null ? undefined : _0x2ed55f.getPlatformId(),
          credentials: _0x2ed55f == null ? undefined : _0x2ed55f.getCredentials()
        });
      });
    }
    updateProactiveRefresh() {
      window.clearTimeout(this.proactiveRefreshTimeoutID);
      if (this.isLoggedIn()) {
        this.proactiveRefreshTimeoutID = window.setTimeout(() => {
          this.refreshCurrentPair();
        }, this.getTimeTillProactiveRefresh() * 1000);
      }
    }
    getTimeTillProactiveRefresh() {
      var _0x212609;
      if (!this.tokenHandler.isRefreshValid()) {
        return Number.MAX_SAFE_INTEGER;
      }
      const _0xf901bb = this.tokenHandler.currentPair;
      const _0x1e3eb7 = (((_0x212609 = _0xf901bb.accessIssuedAt) !== null && _0x212609 !== undefined ? _0x212609 : Date.now() / 1000) + _0xf901bb.accessLifespan - Math.floor(Date.now() / 1000)) * 0.4;
      return Math.max(30, _0x1e3eb7);
    }
    get responseTypes() {
      return _0x27dd63;
    }
    get platforms() {
      return _0x5ccbd3.Platform;
    }
  }
  var _0x17bdc4 = Object.freeze({
    "__proto__": null
  });
  class _0x1be372 extends Error {
    constructor(_0xd3391b, _0x3bbf4b) {
      super(_0xd3391b);
      this.code = _0x3bbf4b;
      this.name = "FeaturesClientNetworkError";
      this.code = _0x3bbf4b;
    }
  }
  class _0x2e8049 extends Error {
    constructor(_0x181f3d) {
      super(_0x181f3d);
      this.name = "TimeoutError";
      Object.setPrototypeOf(this, _0x2e8049.prototype);
    }
  }
  class _0x2769b0 {
    constructor({
      accessProvider: _0x206f62,
      gameId: _0x471108,
      debugProvider: _0x2f5142,
      apiUrl: _0x4677d5,
      channelId: _0x4d7a5c
    }) {
      this.accessProvider = _0x206f62;
      this.gameId = _0x471108;
      this.debugProvider = _0x2f5142;
      this.baseUrl = _0x4677d5 != null ? _0x4677d5 : "https://crucible.frvr.com";
      this.channelId = _0x4d7a5c;
    }
    getFeatures() {
      return _0x3d1aad(this, undefined, undefined, function* () {
        const _0x2616f7 = new URLSearchParams();
        if (this.debugProvider) {
          const _0x492eb = yield this.debugProvider.getProperty("_overrideRemoteConfig");
          if (_0x492eb) {
            _0x2616f7.append("debug", _0x492eb);
          }
        }
        if (this.channelId) {
          _0x2616f7.append("channel", this.channelId);
        }
        const _0x4a0b28 = {
          "Content-Type": "application/json"
        };
        const _0x21cade = yield this.accessProvider.getAccessToken();
        if (_0x21cade) {
          _0x4a0b28.Authorization = "Bearer " + _0x21cade;
        } else {
          _0x2616f7.append("userId", yield this.accessProvider.getUserId());
        }
        let _0x2b35ab = _0x2616f7.toString();
        if (_0x2b35ab) {
          _0x2b35ab = "?" + _0x2b35ab;
        }
        const _0x49532e = _0x21cade ? this.baseUrl + "/v1/tailor/" + this.gameId + "/config" + _0x2b35ab : this.baseUrl + "/v1/tailor/guest/" + this.gameId + "/config" + _0x2b35ab;
        const _0x509561 = yield fetch(_0x49532e, {
          headers: _0x4a0b28
        });
        if (!_0x509561.ok) {
          throw new _0x1be372("Failed to fetch features: " + _0x509561.status + " " + _0x509561.statusText, _0x509561.status);
        }
        return yield _0x509561.json();
      });
    }
  }
  function _0x3cf6fc(_0x14c502) {
    return function (_0x147779, _0x49845c, _0x25d4bb, _0x578b93) {
      return () => _0x3d1aad(this, undefined, undefined, function* () {
        let _0x344a75 = yield _0x147779.getItem(_0x49845c);
        const _0xfba10a = _0x344a75 == null ? undefined : _0x344a75.createdAt;
        if (_0x578b93 && _0xfba10a && Date.now() - _0xfba10a >= _0x578b93 * 24 * 60 * 60 * 1000) {
          _0x344a75 = undefined;
        }
        const _0xe7c6e5 = _0x344a75 == null ? undefined : _0x344a75.value;
        if (_0xe7c6e5) {
          return String(_0xe7c6e5);
        }
        const _0x444c26 = yield _0x25d4bb();
        yield _0x147779.setItem(_0x49845c, {
          value: _0x444c26,
          createdAt: Date.now()
        });
        return _0x444c26;
      });
    }(_0x14c502, "__frvr_rfc_uuidv4", () => _0x3d1aad(this, undefined, undefined, function* () {
      if (typeof window != "undefined" && window.crypto && window.crypto.randomUUID) {
        return window.crypto.randomUUID();
      } else {
        return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, _0x20edfa => {
          const _0x456b2b = Math.random() * 16 | 0;
          return (_0x20edfa === "x" ? _0x456b2b : _0x456b2b & 3 | 8).toString(16);
        });
      }
    }), 365);
  }
  const _0x29a59c = "__frvr_features";
  class _0x53bc4c {
    constructor({
      client: _0x5e93a8,
      auth: _0x369b75,
      tracker: _0x546cf9,
      debugProvider: _0x20abb5,
      localStorage: _0x5dd8ba,
      logger: _0x3c9192,
      config: _0x2308d2,
      remoteABTests: _0x421325,
      channelId: _0x301143
    }) {
      var _0x277a64;
      var _0x103c9e;
      this.firstFetch = true;
      this.auth = _0x369b75;
      this.tracker = _0x546cf9;
      this.anonymousIdProvider = _0x3cf6fc(_0x5dd8ba);
      const _0x52162c = {
        getAccessToken: () => _0x3d1aad(this, undefined, undefined, function* () {
          return this.auth.getAccessToken();
        }),
        getUserId: () => _0x3d1aad(this, undefined, undefined, function* () {
          return this.anonymousUserId;
        })
      };
      this.client = _0x5e93a8 != null ? _0x5e93a8 : new _0x2769b0({
        accessProvider: _0x52162c,
        debugProvider: _0x20abb5,
        gameId: _0x2308d2.gameId,
        apiUrl: _0x2308d2.apiUrl,
        channelId: _0x301143
      });
      this.localStorage = _0x5dd8ba;
      this.logger = _0x3c9192;
      this.config = _0x2308d2;
      this.remoteABTests = _0x421325;
      this.defaultFeatures = (_0x277a64 = _0x2308d2.defaultFeatures) !== null && _0x277a64 !== undefined ? _0x277a64 : {};
      this.fetcher = new _0x30c552((_0x103c9e = _0x2308d2.timeout) !== null && _0x103c9e !== undefined ? _0x103c9e : 1000);
      if (!this.config.waitForTimeoutActivation) {
        this.activateTimeout();
      }
    }
    init() {
      return _0x3d1aad(this, undefined, undefined, function* () {
        this.preStoredConfig = yield this.localStorage.getItem(_0x29a59c);
        this.anonymousUserId = yield this.anonymousIdProvider();
      });
    }
    activateTimeout() {
      this.fetcher.activateTimeout();
    }
    getFeature(_0x594206) {
      return _0x3d1aad(this, arguments, undefined, function* (_0x4bca9e, _0x160e00 = false) {
        return this.getFeatures([_0x4bca9e], _0x160e00).then(_0x17429a => _0x17429a[_0x4bca9e]);
      });
    }
    getFeatures(_0xb85004) {
      return _0x3d1aad(this, arguments, undefined, function* (_0x5b0f1b, _0x5b8f2f = false) {
        var _0x4d926a;
        var _0xa149a9;
        var _0xc8feb6;
        yield this.fetchFeatures(_0x5b8f2f);
        const _0x40cef2 = (_0x4d926a = this.remoteConfig) !== null && _0x4d926a !== undefined ? _0x4d926a : this.preStoredConfig;
        const _0x54b845 = (_0xa149a9 = _0x40cef2 == null ? undefined : _0x40cef2.config) !== null && _0xa149a9 !== undefined ? _0xa149a9 : this.defaultFeatures;
        if (this.remoteConfig) {
          this.setupGroups((_0xc8feb6 = _0x40cef2 == null ? undefined : _0x40cef2.groups) !== null && _0xc8feb6 !== undefined ? _0xc8feb6 : []);
        }
        if (_0x5b0f1b && _0x5b0f1b.length !== 0) {
          return _0x5b0f1b.reduce((_0x3d8b01, _0x10a0d1) => {
            _0x3d8b01[_0x10a0d1] = _0x54b845[_0x10a0d1];
            return _0x3d8b01;
          }, {});
        } else {
          return _0x54b845;
        }
      });
    }
    getGroups() {
      return this.groups;
    }
    setupGroups(_0x74e487) {
      var _0x3daaf6;
      if (!this.groups) {
        this.groups = _0x74e487;
        if (_0x74e487.length > 0) {
          if (!((_0x3daaf6 = this.remoteABTests) === null || _0x3daaf6 === undefined)) {
            _0x3daaf6.setGroups(_0x74e487);
          }
        }
      }
    }
    fetchFeatures(_0x447d4e) {
      return _0x3d1aad(this, undefined, undefined, function* () {
        if (this.firstFetchPromise) {
          return this.firstFetchPromise;
        }
        if (!this.firstFetch && !_0x447d4e) {
          return;
        }
        this.groups = undefined;
        this.firstFetch = false;
        const _0xc1cded = this.getUserId();
        if (_0xc1cded && this.preStoredConfig && _0xc1cded !== this.preStoredConfig.userId) {
          yield this.removePreStoredConfig();
        }
        this.tracker.logEvent("features_loading", {});
        this.firstFetchPromise = this.fetcher.fetch(() => _0x3d1aad(this, undefined, undefined, function* () {
          let _0x4c2081;
          try {
            yield this.auth.getFreshAccessToken();
            _0x4c2081 = yield this.client.getFeatures();
          } catch (_0x5e4553) {
            this.logger.error(["Failed to fetch features:", _0x5e4553.code, _0x5e4553.message].filter(_0x1bd2ea => _0x1bd2ea).join(" "));
            if (_0x5e4553 instanceof _0x1be372 && _0x5e4553.code === 404) {
              yield this.removePreStoredConfig();
            }
            throw _0x5e4553;
          }
          if (_0x4c2081) {
            yield this.savePreStoredConfig(_0x4c2081);
          }
          return _0x4c2081;
        })).then(_0x12df5b => {
          this.remoteConfig = _0x12df5b;
          this.firstFetchPromise = undefined;
          this.tracker.logEvent("features_loaded", {});
        }).catch(_0x2df668 => {
          this.firstFetchPromise = undefined;
          if (_0x2df668 instanceof _0x2e8049) {
            this.logger.error("Failed to fetch features: " + _0x2df668.message);
          }
          this.tracker.logEvent("features_loading_error", {
            error: _0x2df668.message
          });
        });
        return this.firstFetchPromise;
      });
    }
    savePreStoredConfig(_0x14a53b) {
      const _0x2ccd01 = Object.assign(Object.assign({}, _0x14a53b), {
        userId: this.getUserId()
      });
      return this.localStorage.setItem(_0x29a59c, _0x2ccd01);
    }
    removePreStoredConfig() {
      this.preStoredConfig = undefined;
      return this.localStorage.removeItem(_0x29a59c);
    }
    getUserId() {
      return this.auth.getFRVRID();
    }
  }
  class _0x30c552 {
    constructor(_0x3d2f00) {
      this.timeoutMs = _0x3d2f00;
      this.timeoutActivePromise = new _0x1acd5f();
    }
    activateTimeout() {
      this.timeoutActivePromise.resolve(false);
    }
    fetch(_0x2e52d1) {
      return _0x3d1aad(this, undefined, undefined, function* () {
        const _0x2f19ae = Date.now() + this.timeoutMs;
        const _0x4429eb = _0x2e52d1().finally(() => {
          this.timeoutActivePromise.resolve(true);
        });
        if (yield this.timeoutActivePromise) {
          return _0x4429eb;
        }
        const _0x5706eb = Math.max(0, _0x2f19ae - Date.now());
        _0x335d5c = _0x4429eb;
        _0x3c82f9 = _0x5706eb;
        _0x288ce3 = "Timeout after " + this.timeoutMs + "ms";
        return new Promise((_0x2387a9, _0x209b70) => {
          const _0x273865 = // TOLOOK
          setTimeout(() => _0x209b70(new _0x2e8049(_0x288ce3 != null ? _0x288ce3 : "Timeout after " + _0x3c82f9 + "ms")), _0x3c82f9);
          _0x335d5c.then(_0x2ec936 => {
            clearTimeout(_0x273865);
            _0x2387a9(_0x2ec936);
          }).catch(_0x58195e => {
            clearTimeout(_0x273865);
            _0x209b70(_0x58195e);
          });
        });
        var _0x335d5c;
        var _0x3c82f9;
        var _0x288ce3;
      });
    }
  }
  class _0x26eec9 {
    constructor(_0x2f49dc) {
      this.tracker = _0x2f49dc;
    }
    setGroups(_0x4ba919) {
      var _0x8c451f;
      const _0x11bb67 = this.getTrackerPlaySessionId();
      if (_0x11bb67 === this.playSessionId) {
        return;
      }
      if (!((_0x8c451f = this.contextRemoveFn) === null || _0x8c451f === undefined)) {
        _0x8c451f.call(this);
      }
      if (_0x4ba919.length === 0) {
        return;
      }
      this.playSessionId = _0x11bb67;
      const _0x28695f = function (_0xd323a) {
        const _0x367fdb = {};
        for (const _0x272a17 of _0xd323a) {
          const _0x59d57c = _0x272a17.groupId === 0 ? "control" : _0x272a17.groupId <= 26 ? String.fromCharCode(96 + _0x272a17.groupId) : "" + _0x272a17.groupId;
          _0x367fdb[_0x272a17.testName] = _0x272a17.testName + "__" + _0x59d57c;
        }
        return _0x367fdb;
      }(_0x4ba919);
      const _0x23271b = function (_0xe452d3, _0x522763) {
        const _0x54cfed = {};
        for (const _0x2fa47f in _0x522763) {
          _0x54cfed[_0xe452d3 + "_" + _0x2fa47f] = _0x522763[_0x2fa47f];
        }
        return _0x54cfed;
      }("abt", _0x28695f);
      for (const _0x5701a4 in _0x28695f) {
        const _0x44f462 = _0x28695f[_0x5701a4];
        this.tracker.logValuedEvent("ab_test_activation", 1, {
          ab_test_name: _0x5701a4,
          ab_test_group: _0x44f462
        });
      }
      this.contextRemoveFn = this.tracker.addExtraFieldFunction(_0x11f8e3 => {
        Object.assign(_0x11f8e3, _0x23271b);
      });
    }
    getTrackerPlaySessionId() {
      return this.tracker.getPlaySessionId();
    }
  }
  class _0x332ff6 {
    constructor(_0x53523a, _0x603030) {
      this.primaryDebugProvider = _0x53523a;
      this.fallbackStorageProvider = _0x603030;
    }
    getProperty(_0x5959cf) {
      return _0x3d1aad(this, undefined, undefined, function* () {
        var _0x1ead1c;
        const _0x6ac65c = yield (_0x1ead1c = this.primaryDebugProvider) === null || _0x1ead1c === undefined ? undefined : _0x1ead1c.getProperty(_0x5959cf);
        if (_0x6ac65c === undefined) {
          return this.fallbackStorageProvider.getItem(_0x5959cf);
        } else {
          return _0x6ac65c;
        }
      });
    }
  }
  function _0x5e1581(_0x511c2c) {
    window.addEventListener("focus", () => {
      _0x511c2c.onShow();
    });
    window.addEventListener("blur", () => {
      _0x511c2c.onHide();
    });
  }
  function _0x5b0d18(_0x2de0c2) {
    window.addEventListener("focus", () => {
      _0x2de0c2.onResume();
    });
    window.addEventListener("blur", () => {
      _0x2de0c2.onSuspend();
    });
  }
  const _0x50d57f = {
    providers: [{
      name: "dev",
      type: "interstitial",
      priority: 1
    }, {
      name: "dev",
      type: "reward",
      priority: 2
    }],
    throttling: {
      maxfrequency: 5000
    }
  };
  const _0xd2b20d = {
    onGamePause: () => {},
    onSuspend: () => {},
    onResume: () => {},
    onAudioSuspend: () => {},
    onAudioResume: () => {},
    onShow: () => {},
    onHide: () => {}
  };
  class _0x45aa34 {
    constructor(_0x263864, _0x361245, _0x35d92b, _0x46f19f, _0x5e7804) {
      this.bootstrapper = _0x263864;
      this.postInit = _0x361245;
      this.preComplete = _0x35d92b;
      this.postComplete = _0x46f19f;
      this.consentProvider = _0x5e7804;
    }
    init() {
      var _0x1d4635;
      var _0x4bfda0;
      var _0x31f647;
      var _0x34f9cf;
      if (!(((_0x4bfda0 = (_0x1d4635 = this.consentProvider) === null || _0x1d4635 === undefined ? undefined : _0x1d4635.supportsAutoInitialization) === null || _0x4bfda0 === undefined ? undefined : _0x4bfda0.call(_0x1d4635)) || (_0x34f9cf = (_0x31f647 = this.consentProvider).consentToTerms) === null || _0x34f9cf === undefined)) {
        _0x34f9cf.call(_0x31f647);
      }
      return this.bootstrapper.init().then(() => this.postInit());
    }
    setProgress(_0x20a9d8) {
      this.bootstrapper.setProgress(_0x20a9d8);
    }
    complete() {
      return this.preComplete().then(() => this.bootstrapper.complete()).then(() => this.postComplete());
    }
  }
  class _0x5b12b0 {
    constructor(_0x16f2ab) {
      this.provider = _0x16f2ab;
    }
    setScore(_0x2f7683) {
      return _0x3d1aad(this, undefined, undefined, function* () {
        return !!this.provider && this.provider.setScore(_0x2f7683);
      });
    }
  }
  class _0x2cb335 {
    init() {
      return _0x3d1aad(this, undefined, undefined, function* () {});
    }
    getId() {
      return "empty";
    }
    onModulesUpdated(_0x10edc7) {}
    setConfig(_0x120fa6) {}
    getLogger() {
      return console;
    }
    getBootstrapper() {
      return _0x536feb;
    }
    getConsentProvider() {
      return _0x2919c9;
    }
    getAnalyticsProviders() {
      return [];
    }
    getAnalyticsIDProvider() {
      return _0x255fb6;
    }
    getABTestsUniqueId() {
      return "";
    }
    getAdsProviders(_0x1cb1f6) {
      return [];
    }
    getIAPProvider() {
      return _0x74f945;
    }
    getLocalStorageProvider() {
      return _0x5318f3([_0x39ba3d.providerName]);
    }
    getCloudStorageProvider() {
      return _0x3d1aad(this, undefined, undefined, function* () {
        return _0x5318f3([_0x39ba3d.providerName]);
      });
    }
    getShortcutProvider() {
      return _0x3a49e8;
    }
    getTrackerContextProvider() {
      return () => ({});
    }
    getNotificationsProvider() {
      return _0xe1f7fe;
    }
    getCrossplay() {
      return _0x291858;
    }
    getCrosspromo() {
      return _0x50d2af;
    }
    getSocialProvider() {
      return _0x1eba93;
    }
    getLiveRoomProvider() {
      return _0x375b89;
    }
    getTournamentsProvider() {
      return _0x304f69;
    }
    getChallengesProvider() {
      return _0x36e781;
    }
    getLeaderboardsProvider() {
      return _0xc4d71b;
    }
    getProfile() {
      return _0x52d138;
    }
    getAuthProviders(_0x58a824, _0x41e774) {
      return [];
    }
    getCharacteristics() {
      return _0x99265f;
    }
    getEntryPointProvider() {
      return _0x4c1655;
    }
    getCommunityProvider() {
      return _0x4dee7e;
    }
    getAdsConfig(_0x1958c5) {
      return _0x3d1aad(this, undefined, undefined, function* () {
        return _0x1958c5;
      });
    }
    getNavigationProvider() {
      return _0x2f3294;
    }
    getSetScoreProvider() {
      return {
        setScore: _0x4d131a => Promise.resolve(false)
      };
    }
    getSkippedAnalyticsEvents() {
      return new Set();
    }
  }
  function _0x322149(_0x680e5c) {
    const _0x57ae28 = Object.getOwnPropertyNames(_0x2cb335.prototype);
    const _0x570ac9 = {};
    for (const _0x330763 of _0x57ae28) {
      if (_0x330763 !== "constructor" && _0x680e5c[_0x330763]) {
        _0x570ac9[_0x330763] = _0x680e5c[_0x330763].bind(_0x680e5c);
      }
    }
    return _0x570ac9;
  }
  class _0x53d8da {
    constructor(_0x4e8ecc) {
      this.shortcutProvider = _0x4e8ecc;
    }
    init() {
      return this.shortcutProvider.init();
    }
    canCreateShortcut() {
      return this.shortcutProvider.canCreateShortcut();
    }
    createShortcut() {
      return this.shortcutProvider.createShortcut();
    }
    canCreateShortcutAsync() {
      return this.canCreateShortcut();
    }
    createShortcutAsync() {
      return this.createShortcut();
    }
  }
  class _0x1f4007 extends _0x284dd1 {
    constructor({
      provider: _0x2f4955,
      logger: _0x4acb06
    }) {
      super({
        provider: _0x2f4955,
        logger: _0x4acb06
      });
      this.cloudProvider = _0x2f4955;
    }
    canUsePublicItems() {
      var _0x1e2e84;
      var _0x202377;
      var _0x274bb5;
      return (_0x274bb5 = (_0x202377 = (_0x1e2e84 = this.cloudProvider).canUsePublicItems) === null || _0x202377 === undefined ? undefined : _0x202377.call(_0x1e2e84)) !== null && _0x274bb5 !== undefined && _0x274bb5;
    }
    setPublicItems(_0x1be5d5) {
      return _0x3d1aad(this, undefined, undefined, function* () {
        var _0x48055e;
        var _0x29f47e;
        const _0x407cdb = _0x1be5d5.map(({
          key: _0x5b5931,
          value: _0x3ec056
        }) => ({
          key: _0x5b5931,
          value: JSON.stringify(_0x3ec056)
        }));
        yield (_0x29f47e = (_0x48055e = this.cloudProvider).setPublicItems) === null || _0x29f47e === undefined ? undefined : _0x29f47e.call(_0x48055e, _0x407cdb);
      });
    }
    setPublicItem(_0x3f9784, _0x40db50) {
      return this.cloudProvider.setPublicItems([{
        key: _0x3f9784,
        value: JSON.stringify(_0x40db50)
      }]);
    }
    queryPublicItems(_0xf2b62e) {
      return _0x3d1aad(this, undefined, undefined, function* () {
        var _0x48ebc8;
        var _0x241d73;
        var _0x23ea62;
        var _0x292ae6;
        const _0x64f04a = (_0x23ea62 = yield (_0x241d73 = (_0x48ebc8 = this.cloudProvider).queryPublicItems) === null || _0x241d73 === undefined ? undefined : _0x241d73.call(_0x48ebc8, _0xf2b62e)) !== null && _0x23ea62 !== undefined ? _0x23ea62 : {
          items: []
        };
        return {
          items: _0x64f04a.items.map(_0x89b445 => Object.assign(Object.assign({}, _0x89b445), {
            data: JSON.parse(_0x89b445.data)
          })),
          failed: (_0x292ae6 = _0x64f04a.failed) === null || _0x292ae6 === undefined ? undefined : _0x292ae6.map(_0xfab56b => Object.assign(Object.assign({}, _0xfab56b), {
            data: _0xfab56b.data ? JSON.parse(_0xfab56b.data) : undefined
          }))
        };
      });
    }
  }
  class _0x4795a2 extends Error {
    constructor(_0x45621b, _0x3e9c3c) {
      super(_0x45621b);
      this.code = _0x3e9c3c;
      this.name = "ShopError";
      this.code = _0x3e9c3c;
      Object.setPrototypeOf(this, _0x4795a2.prototype);
    }
  }
  class _0x4f2835 {
    constructor({
      accessProvider: _0x9ac78a,
      gameId: _0x4354db,
      apiUrl: _0x57ea7e
    }) {
      this.accessProvider = _0x9ac78a;
      this.gameId = _0x4354db;
      this.baseUrl = _0x57ea7e != null ? _0x57ea7e : "https://crucible.frvr.com";
    }
    getShop() {
      return _0x3d1aad(this, arguments, undefined, function* (_0x2d1b9b = "", _0x293b91) {
        var _0x3dd246;
        const _0x15ae2b = new URLSearchParams();
        if (_0x2d1b9b) {
          _0x15ae2b.set("shopfrontId", _0x2d1b9b);
        }
        const _0x3370b2 = {
          "Content-Type": "application/json"
        };
        const _0x27e208 = this.accessProvider.getAccessToken();
        if (!_0x27e208) {
          throw new _0x4795a2("Shop access token is required", 0);
        }
        _0x3370b2.Authorization = "Bearer " + _0x27e208;
        let _0x3a57ed = _0x15ae2b.toString();
        if (_0x3a57ed) {
          _0x3a57ed = "?" + _0x3a57ed;
        }
        const _0x29c3d2 = this.baseUrl + "/v1/shop/" + this.gameId + _0x3a57ed;
        const _0xdc3407 = yield fetch(_0x29c3d2, {
          headers: _0x3370b2
        });
        if (!_0xdc3407.ok) {
          throw new _0x24454c("Failed to fetch shop data: " + _0xdc3407.status + " " + _0xdc3407.statusText, _0xdc3407.status);
        }
        const _0x5be6ed = yield _0xdc3407.json();
        if ((_0x3dd246 = _0x293b91 == null ? undefined : _0x293b91(_0x5be6ed)) !== null && _0x3dd246 !== undefined) {
          return _0x3dd246;
        } else {
          return _0x5be6ed;
        }
      });
    }
    getProducts(_0x3b28ec, _0x5b41b9) {
      return _0x3d1aad(this, undefined, undefined, function* () {
        var _0x5d2f63;
        const _0x30ce9c = {
          "Content-Type": "application/json"
        };
        const _0x15a63c = this.accessProvider.getAccessToken();
        if (!_0x15a63c) {
          throw new _0x4795a2("Shop access token is required", 0);
        }
        _0x30ce9c.Authorization = "Bearer " + _0x15a63c;
        let _0x13bc12 = "";
        if (_0x3b28ec) {
          _0x13bc12 = "?productSKUs=" + _0x3b28ec.toString();
        }
        const _0xc0960f = this.baseUrl + "/v1/shop/" + this.gameId + "/products/" + _0x13bc12;
        const _0x4d0bb1 = yield fetch(_0xc0960f, {
          headers: _0x30ce9c
        });
        if (!_0x4d0bb1.ok) {
          throw new _0x24454c("Failed to fetch shop data: " + _0x4d0bb1.status + " " + _0x4d0bb1.statusText, _0x4d0bb1.status);
        }
        const _0x480592 = (yield _0x4d0bb1.json()).items;
        if ((_0x5d2f63 = _0x5b41b9 == null ? undefined : _0x5b41b9(_0x480592)) !== null && _0x5d2f63 !== undefined) {
          return _0x5d2f63;
        } else {
          return _0x480592;
        }
      });
    }
  }
  class _0x24454c extends _0x4795a2 {
    constructor(_0x483070, _0x29175d) {
      super(_0x483070, _0x29175d);
      this.code = _0x29175d;
      Object.setPrototypeOf(this, _0x24454c.prototype);
    }
  }
  class _0x13375f {
    constructor(_0x1097ba) {
      this.client = "client" in _0x1097ba ? _0x1097ba.client : new _0x4f2835(_0x1097ba);
      this.logger = _0x1097ba.logger;
      this.iap = _0x1097ba.iap;
    }
    getShop() {
      return _0x3d1aad(this, arguments, undefined, function* (_0x143546 = "") {
        let _0x2e0b61;
        try {
          _0x2e0b61 = yield this.client.getShop(_0x143546, _0x4e9ac4);
        } catch (_0x240131) {
          if (_0x240131.code === 404) {
            return _0x2104cd;
          }
          throw _0x240131;
        }
        _0x2e0b61 = this.withChannel(this.withFormattedPrices(_0x2e0b61));
        return _0x2e0b61;
      });
    }
    getProducts(_0x3ecb62) {
      return _0x3d1aad(this, undefined, undefined, function* () {
        if (_0x3ecb62.length === 0) {
          return [];
        }
        let _0x51640c;
        try {
          _0x51640c = yield this.client.getProducts(_0x3ecb62, _0x4e9ac4);
        } catch (_0x26b2d0) {
          if (_0x26b2d0.code === 404) {
            return [];
          }
          throw _0x26b2d0;
        }
        return _0x51640c;
      });
    }
    withFormattedPrices(_0x3adf2b) {
      return Object.assign(Object.assign({}, _0x3adf2b), {
        modules: _0x3adf2b.modules.map(_0x35e470 => Object.assign(Object.assign({}, _0x35e470), {
          products: _0x35e470.products.map(_0x2c1db8 => _0x2c1db8.price.currency === _0x542760 ? Object.assign(Object.assign({}, _0x2c1db8), {
            price: Object.assign(Object.assign({}, _0x2c1db8.price), {
              formattedAmount: this.getFormattedPrice(_0x2c1db8)
            })
          }) : _0x2c1db8)
        }))
      });
    }
    withChannel(_0x3b4119) {
      const _0x550017 = this.iap.getProviderName();
      const _0x4e9cbe = _0x455dd4[_0x550017];
      return Object.assign(Object.assign({}, _0x3b4119), {
        channelSku: _0x4e9cbe
      });
    }
    getFormattedPrice(_0x3485b8) {
      var _0xd17d34;
      var _0x531e73;
      const _0x4d3e02 = this.iap.getProviderName();
      const _0x3e3b2c = _0x455dd4[_0x4d3e02];
      const _0x503fad = (_0x531e73 = (_0xd17d34 = _0x3485b8.channels) === null || _0xd17d34 === undefined ? undefined : _0xd17d34[_0x3e3b2c]) === null || _0x531e73 === undefined ? undefined : _0x531e73.sku;
      const _0x3df7ca = this.iap.getProductById(_0x503fad);
      if (_0x3df7ca) {
        return _0x3df7ca.price;
      }
      this.logger.warn("[shop] No IAP product found for sku " + _0x3485b8.sku + "/" + _0x503fad + " in provider " + _0x4d3e02);
    }
  }
  const _0x542760 = "iap";
  const _0x2104cd = {
    _id: "",
    gameId: "",
    currencies: [],
    modules: [],
    metadata: {},
    defaultShopfrontId: ""
  };
  const _0x455dd4 = {
    "fbi-iap-provider": "facebook_instant",
    discord: "discord",
    "google-play-iap-provider": "facebook_instant",
    "ios-iap-provider": "facebook_instant",
    "samsung-galaxy-iap-provider": "facebook_instant",
    samsung_instant_play: "facebook_instant"
  };
  function _0x4e9ac4(_0xfc2a50) {
    return _0x4ad277(_0xfc2a50, ["availableAt", "archivedAt", "createdAt", "updatedAt"], _0x2be6d6 => _0x2be6d6 && new Date(_0x2be6d6));
  }
  function _0x4ad277(_0x5e9f20, _0x2e02e7, _0x1d7656) {
    if (typeof _0x5e9f20 != "object" || _0x5e9f20 === null) {
      return _0x5e9f20;
    }
    if (Array.isArray(_0x5e9f20)) {
      return _0x5e9f20.map(_0x16a5db => _0x4ad277(_0x16a5db, _0x2e02e7, _0x1d7656));
    }
    const _0x3302f9 = {};
    for (const [_0x15d411, _0x9dffff] of Object.entries(_0x5e9f20)) {
      _0x3302f9[_0x15d411] = _0x2e02e7.includes(_0x15d411) ? _0x1d7656(_0x9dffff) : _0x4ad277(_0x9dffff, _0x2e02e7, _0x1d7656);
    }
    return _0x3302f9;
  }
  class _0x51eee1 {
    constructor() {
      this.lifecycle = Object.assign({}, _0xd2b20d);
      this.config = {};
    }
    setChannel(_0x256578) {
      if (this.channel) {
        if (this.initPromise) {
          this.logger.error("[FRVR-SDK] channel cannot be set after init");
          return;
        }
        this.logger.warn("[FRVR-SDK] setting channel multiple times");
      }
      this.channel = _0x256578;
    }
    init(_0xdf8a3e = _0x5ccbd3.Env.DEVELOPMENT) {
      var _0x2ead77;
      this.channel = function (..._0x268e39) {
        const _0x3fb3bb = {};
        const _0x58fecf = _0x268e39.filter(_0x12a874 => _0x12a874).map(_0x322149);
        Object.assign(_0x3fb3bb, ..._0x58fecf);
        return _0x3fb3bb;
      }(new _0x2cb335(), this.channel);
      if (!((_0x2ead77 = this.logger) === null || _0x2ead77 === undefined)) {
        _0x2ead77.log("[FRVR-SDK - init] config:", this.config);
      }
      this.channel.setConfig(this.config);
      this.buildComponents(_0xdf8a3e);
      this.initPromise = this.channel.init().then(() => this.initTracker()).then(() => this.initComponents(_0xdf8a3e));
      return this.initPromise;
    }
    buildComponents(_0x41d993) {
      var _0x5c4243;
      var _0x522443;
      var _0x2d652d;
      var _0x2ac7a3;
      var _0x15398c;
      var _0x26c651;
      var _0x58ff81;
      var _0x1dc30a;
      var _0x55a79e;
      var _0x1500c9;
      var _0x133929;
      var _0x14a72c;
      var _0x12ba4c;
      var _0x25b26f;
      var _0x286be2;
      var _0xb1e5f6;
      var _0x213632;
      var _0x1d05d6;
      if (!this.logger) {
        this.logger = _0x41d993 === _0x5ccbd3.Env.PRODUCTION && _0x18650f || this.channel.getLogger();
      }
      this.channel.onModulesUpdated(this);
      this.logger.debug("[FRVR-SDK] building components");
      this.entrypoint = this.channel.getEntryPointProvider();
      if (!this.localStorage) {
        this.localStorage = new _0x284dd1({
          provider: this.channel.getLocalStorageProvider(this.config.storage),
          logger: this.logger
        });
      }
      this.channel.onModulesUpdated(this);
      this.consentProvider = this.channel.getConsentProvider();
      if (!this.tracker) {
        this.tracker = new _0x5b8058({
          storage: this.localStorage,
          logger: this.logger,
          analyticsProviders: this.channel.getAnalyticsProviders(((_0x5c4243 = this.config.tracker) === null || _0x5c4243 === undefined ? undefined : _0x5c4243.analyticsProviders) || {}, _0x41d993),
          idProvider: this.channel.getAnalyticsIDProvider(this.localStorage),
          contextProvider: this.channel.getTrackerContextProvider(((_0x522443 = this.config.tracker) === null || _0x522443 === undefined ? undefined : _0x522443.trackerChannelId) || ((_0x2d652d = this.channel) === null || _0x2d652d === undefined ? undefined : _0x2d652d.getId())),
          consentProvider: this.consentProvider,
          appContextFields: {
            context: ((_0x2ac7a3 = this.config.tracker) === null || _0x2ac7a3 === undefined ? undefined : _0x2ac7a3.gameId) || this.config.gameId,
            app_version: (_0x15398c = this.config.tracker) === null || _0x15398c === undefined ? undefined : _0x15398c.appVersion,
            app_build: (_0x26c651 = this.config.tracker) === null || _0x26c651 === undefined ? undefined : _0x26c651.appBuild
          }
        });
      }
      this.channel.onModulesUpdated(this);
      if (!this.ads) {
        this.ads = new _0x261129({
          env: _0x41d993,
          logger: this.logger,
          storage: this.localStorage,
          tracker: this.tracker,
          controls: this.lifecycle,
          onBeforeInit: () => this.registerAdsProviders()
        });
      }
      if (!this.notifications) {
        this.notifications = new _0x2b5ec4({
          logger: this.logger,
          provider: this.channel.getNotificationsProvider(),
          tracker: this.tracker
        });
      }
      if (!this.bootstrapper) {
        this.bootstrapper = new _0x45aa34(this.channel.getBootstrapper(), () => this.postInit(_0x41d993), () => this.preComplete(), () => this.postComplete(), this.consentProvider);
      }
      if (!this.shortcut) {
        this.shortcut = new _0x53d8da(this.channel.getShortcutProvider());
      }
      if (!this.crossplay) {
        this.crossplay = this.channel.getCrossplay(this.tracker);
      }
      if (!this.crosspromo) {
        this.crosspromo = this.channel.getCrosspromo();
      }
      if (!this.auth) {
        this.auth = new _0x31175e({
          providers: this.channel.getAuthProviders(this.config.gameId, this.config.auth),
          storage: this.localStorage,
          env: _0x41d993,
          config: this.config.auth,
          logger: this.logger
        });
      }
      this.channel.onModulesUpdated(this);
      if (!this.iap) {
        this.iap = new _0x321854({
          provider: this.channel.getIAPProvider(new _0x37ff21({
            env: _0x41d993,
            auth: this.auth,
            channelId: (_0x58ff81 = this.channel) === null || _0x58ff81 === undefined ? undefined : _0x58ff81.getId(),
            gameId: this.config.gameId,
            apiHostOverride: (_0x1dc30a = this.config.iap) === null || _0x1dc30a === undefined ? undefined : _0x1dc30a.hostOverride
          })),
          tracker: this.tracker,
          logger: this.logger
        });
      }
      const _0x3db02a = Object.assign(Object.assign({}, this.config.features), {
        gameId: (_0x1500c9 = (_0x55a79e = this.config.features) === null || _0x55a79e === undefined ? undefined : _0x55a79e.gameId) !== null && _0x1500c9 !== undefined ? _0x1500c9 : this.config.gameId
      });
      const _0x1766f1 = this.entrypoint.getProperty ? this.entrypoint : undefined;
      const _0x22f8f5 = new _0x332ff6(_0x1766f1, this.localStorage);
      if (!this.features) {
        this.features = new _0x53bc4c({
          logger: this.logger,
          auth: this.auth,
          tracker: this.tracker,
          debugProvider: _0x22f8f5,
          localStorage: this.localStorage,
          remoteABTests: new _0x26eec9(this.tracker),
          config: _0x3db02a,
          channelId: (_0x133929 = this.channel) === null || _0x133929 === undefined ? undefined : _0x133929.getId()
        });
      }
      const _0x385b3c = Object.assign(Object.assign({
        env: _0x41d993
      }, this.config.social), {
        gameId: (_0x12ba4c = (_0x14a72c = this.config.social) === null || _0x14a72c === undefined ? undefined : _0x14a72c.gameId) !== null && _0x12ba4c !== undefined ? _0x12ba4c : this.config.gameId
      });
      if (!this.social) {
        this.social = new _0x51e7bb(_0x385b3c, {
          logger: this.logger,
          provider: this.channel.getSocialProvider(),
          auth: this.auth
        });
      }
      if (!this.liveRoom) {
        this.liveRoom = new _0x3515a8({
          logger: this.logger,
          provider: this.channel.getLiveRoomProvider(),
          auth: this.auth
        });
      }
      if (!this.tournaments) {
        this.tournaments = new _0xdca54({
          logger: this.logger,
          provider: this.channel.getTournamentsProvider(),
          auth: this.auth
        });
      }
      this.challenges = new _0x3aa1e3({
        logger: this.logger,
        provider: this.channel.getChallengesProvider()
      });
      this.leaderboards = new _0x3e6616({
        provider: this.channel.getLeaderboardsProvider()
      });
      if (!this.profile) {
        this.profile = this.channel.getProfile();
      }
      if (!this.channelCharacteristics) {
        this.channelCharacteristics = this.channel.getCharacteristics();
      }
      if (!this.community) {
        this.community = this.channel.getCommunityProvider();
      }
      const _0x496af6 = Object.assign(Object.assign({}, this.config.navigation), {
        gameId: (_0x286be2 = (_0x25b26f = this.config.navigation) === null || _0x25b26f === undefined ? undefined : _0x25b26f.gameId) !== null && _0x286be2 !== undefined ? _0x286be2 : this.config.gameId
      });
      if (!this.navigation) {
        this.navigation = this.channel.getNavigationProvider(_0x496af6);
      }
      if (!this.shop) {
        this.shop = new _0x13375f({
          apiUrl: (_0xb1e5f6 = this.config.shop) === null || _0xb1e5f6 === undefined ? undefined : _0xb1e5f6.apiUrl,
          accessProvider: this.auth,
          gameId: (_0x1d05d6 = (_0x213632 = this.config.shop) === null || _0x213632 === undefined ? undefined : _0x213632.gameId) !== null && _0x1d05d6 !== undefined ? _0x1d05d6 : this.config.gameId,
          logger: this.logger,
          iap: this.iap
        });
      }
      const _0x354730 = this.channel.getSetScoreProvider;
      if (_0x354730) {
        this.score = new _0x5b12b0(_0x354730());
      }
    }
    initTracker() {
      return _0x3d1aad(this, undefined, undefined, function* () {
        var _0x4714dd;
        var _0x22eb11;
        yield this.tracker.init();
        if (!((_0x22eb11 = (_0x4714dd = this.channel).getSkippedAnalyticsEvents) === null || _0x22eb11 === undefined ? undefined : _0x22eb11.call(_0x4714dd).has("page_loading"))) {
          this.tracker.logEvent("page_loading", {});
        }
      });
    }
    initComponents(_0x3df61a) {
      return _0x3d1aad(this, undefined, undefined, function* () {
        this.logger.debug("[FRVR-SDK] initialising components");
        this.addDefaultListeners(_0x3df61a);
        yield this.configAds(_0x3df61a);
        if (this.config.gameId) {
          this.notifications.configure({
            game: this.config.gameId
          });
          this.tournaments.init(this.config.gameId, _0x3df61a);
          this.leaderboards.init(this.config.gameId, _0x3df61a);
        } else {
          this.logger.error("[FRVR-SDK] Missing game's name in configuration");
        }
        if (this.crossplay.needsConfiguration()) {
          if (this.config.crossplay) {
            this.crossplay.configure(this.config.crossplay);
          } else {
            this.logger.error("[FRVR-SDK] Missing crossplay configuration");
          }
        }
      });
    }
    postInit(_0x5e4fa4) {
      return _0x3d1aad(this, undefined, undefined, function* () {
        var _0x3e8bd6;
        var _0x13c5e5;
        this.logger.debug("[FRVR-SDK] post init");
        yield this.initPromise;
        const _0x21dd9e = (_0x13c5e5 = (_0x3e8bd6 = this.config.ads) === null || _0x3e8bd6 === undefined ? undefined : _0x3e8bd6.autoInit) === null || _0x13c5e5 === undefined || _0x13c5e5;
        yield Promise.all([(() => _0x3d1aad(this, undefined, undefined, function* () {
          let _0x422d8c;
          try {
            _0x422d8c = yield this.channel.getCloudStorageProvider(this.config.cloudStorage, _0x5e4fa4);
          } catch (_0x5d1d85) {
            this.logger.error("[FRVR-SDK] error initialising cloud storage", _0x5d1d85);
          }
          this.cloudStorage = new _0x1f4007({
            provider: _0x422d8c || new _0x39ba3d(),
            logger: this.logger
          });
        }))(), _0x21dd9e && this.ads.init(), (() => _0x3d1aad(this, undefined, undefined, function* () {
          yield this.iap.init();
          yield this.iap.configure(this.config.iap);
        }))(), this.shortcut.init(), this.notifications.init(), this.auth.init(), this.features.init(), (() => _0x3d1aad(this, undefined, undefined, function* () {
          if (this.config.gameId) {
            yield this.challenges.init(this.config.gameId, this.entrypoint, _0x5e4fa4);
          } else {
            this.logger.error("[FRVR-SDK] Missing game's name in configuration");
          }
        }))()]);
      });
    }
    preComplete() {
      return _0x3d1aad(this, undefined, undefined, function* () {
        var _0x5b8349;
        var _0x4472a5;
        this.logger.debug("[FRVR-SDK] pre complete");
        if (!((_0x4472a5 = (_0x5b8349 = this.channel).getSkippedAnalyticsEvents) === null || _0x4472a5 === undefined ? undefined : _0x4472a5.call(_0x5b8349).has("game_loaded"))) {
          this.tracker.loaded();
        }
      });
    }
    postComplete() {
      return _0x3d1aad(this, undefined, undefined, function* () {
        var _0x1e6a6d;
        var _0x46d3cb;
        this.logger.debug("[FRVR-SDK] post complete");
        if (!((_0x46d3cb = (_0x1e6a6d = this.channel).getSkippedAnalyticsEvents) === null || _0x46d3cb === undefined ? undefined : _0x46d3cb.call(_0x1e6a6d).has("device_info"))) {
          this.tracker.logEvent("device_info", {});
        }
      });
    }
    addDefaultListeners(_0x195fca) {
      this.logger.debug("[FRVR-SDK] adding default listeners");
      if (typeof window != "undefined") {
        _0x5e1581(this.lifecycle);
      }
      if (_0x195fca === _0x5ccbd3.Env.DEVELOPMENT) {
        _0x5b0d18(this.lifecycle);
      }
    }
    configAds(_0x8fe259) {
      return _0x3d1aad(this, undefined, undefined, function* () {
        var _0x5cdab9;
        var _0x2d5dcd;
        var _0x38261c;
        this.logger.debug("[FRVR-SDK] running channel ads configuration");
        const _0x396965 = (_0x5cdab9 = this.config.ads) === null || _0x5cdab9 === undefined ? undefined : _0x5cdab9.autoInit;
        const _0x53f9a7 = yield (_0x38261c = (_0x2d5dcd = this.channel).getAdsConfig) === null || _0x38261c === undefined ? undefined : _0x38261c.call(_0x2d5dcd, this.config.ads);
        if (_0x53f9a7) {
          this.config.ads = Object.assign(Object.assign({}, _0x53f9a7), {
            autoInit: _0x396965
          });
        }
        if (this.config.ads) {
          this.logger.debug("[FRVR-SDK] configuring ads");
          this.ads.configure(this.config.ads);
        }
        if (!(_0x8fe259 !== _0x5ccbd3.Env.DEVELOPMENT || this.config.ads)) {
          this.logger.debug("[FRVR-SDK] configuring ads for dev");
          this.ads.configure(_0x50d57f);
        }
      });
    }
    registerAdsProviders() {
      return _0x3d1aad(this, undefined, undefined, function* () {
        var _0x2b59eb;
        this.logger.debug("[FRVR-SDK] registering ads providers");
        const _0x510d73 = this.channel.getAdsProviders((_0x2b59eb = this.config.ads) !== null && _0x2b59eb !== undefined ? _0x2b59eb : {});
        for (const _0x57c501 of _0x510d73) {
          this.ads.register(_0x57c501);
        }
      });
    }
  }
  window.FRVR = new _0x51eee1();
  _0x5ccbd3.ACCESS_TOKEN_KEY = _0x28b9d9;
  _0x5ccbd3.AdTracker = _0x5788ec;
  _0x5ccbd3.AdTypeProperties = _0x5b7b7f;
  _0x5ccbd3.Ads = _0x261129;
  _0x5ccbd3.AdsThrottler = _0x4cfbe8;
  _0x5ccbd3.AsyncStorage = _0x284dd1;
  _0x5ccbd3.Auth = _0x31175e;
  _0x5ccbd3.DEFAULT_ADS_CONFIG = _0x50d57f;
  _0x5ccbd3.Deferred = _0x1acd5f;
  _0x5ccbd3.FRVRAnalytics = class {
    constructor({
      legacyAnalytics: _0x20fa9e,
      disableSendBeacon: _0x14ba0c
    } = {}) {
      this.legacyAnalytics = _0x20fa9e != null ? _0x20fa9e : _0x481fe3(undefined, _0x14ba0c);
    }
    init(_0x350b79, _0xadd431) {
      return this.legacyAnalytics.init(_0x350b79, _0xadd431);
    }
    getName() {
      return this.legacyAnalytics.getName();
    }
    send(_0x3a392a, _0x3d35de, _0x514479, _0x1f3dbd) {
      this.legacyAnalytics.send(_0x3a392a, _0x3d35de, _0x514479, _0x1f3dbd);
    }
  };
  _0x5ccbd3.FRVRSDK = _0x51eee1;
  _0x5ccbd3.IAP = _0x321854;
  _0x5ccbd3.IAPError = _0x4ab4fc;
  _0x5ccbd3.IAPPurchaseErrorAlreadyOwned = _0x2b0ca9;
  _0x5ccbd3.IAPPurchaseErrorCancelledByUser = _0x11ce78;
  _0x5ccbd3.IAPPurchaseErrorUnknownProduct = _0xda6575;
  _0x5ccbd3.IAPServiceClient = _0x37ff21;
  _0x5ccbd3.IsReadyStateManager = class {
    constructor(_0x32f39e, _0x53a19e) {
      this.states = {};
      this._isReady = false;
      this.requiredStates = _0x32f39e;
      this.handler = _0x53a19e;
      for (const _0x12a16d of this.requiredStates) {
        this.states[_0x12a16d] = false;
      }
      this.updateIsReady();
    }
    updateIsReady() {
      const _0x186e16 = this._isReady;
      this._isReady = this.requiredStates.every(_0x36a899 => this.states[_0x36a899]);
      if (_0x186e16 != this._isReady) {
        this.handler(this._isReady);
      }
    }
    setState(_0x55da05, _0x4a3f25) {
      this.states[_0x55da05] = _0x4a3f25;
      this.updateIsReady();
    }
    getState(_0x4bc279) {
      return this.states[_0x4bc279];
    }
    get isReady() {
      return this._isReady;
    }
  };
  _0x5ccbd3.LATENCY_COMPENSATION = 60;
  _0x5ccbd3.MIN_PROACTIVE_REFRESH_INTERVAL = 30;
  _0x5ccbd3.MemoryAsyncStorageProvider = _0x39ba3d;
  _0x5ccbd3.Notifications = _0x2b5ec4;
  _0x5ccbd3.PROACTIVE_REFRESH_THRESHOLD = 0.6;
  _0x5ccbd3.PublicCredentials = _0x17bdc4;
  _0x5ccbd3.PublicResponses = _0x1e0f4c;
  _0x5ccbd3.REFRESH_TOKEN_KEY = _0x5bbdc4;
  _0x5ccbd3.StorageIDProvider = class extends _0x50c383 {
    setCanUseCookies() {
      this.canUseCookies = false;
    }
  };
  _0x5ccbd3.TcfV2ConsentProvider = _0x24901f;
  _0x5ccbd3.TokenHandler = _0x5844aa;
  _0x5ccbd3.TokenPair = _0x2c2d8c;
  _0x5ccbd3.Tracker = _0x5b8058;
  _0x5ccbd3.WebEntryPointProvider = class {
    getData() {
      return _0x3d1aad(this, undefined, undefined, function* () {
        return this.getEntryPointData();
      });
    }
    getProperty(_0x7e4916) {
      return _0x3d1aad(this, undefined, undefined, function* () {
        var _0x231a4d;
        var _0x1ef2a3;
        if ((_0x1ef2a3 = (_0x231a4d = this.getEntryPointData()) === null || _0x231a4d === undefined ? undefined : _0x231a4d[_0x7e4916]) !== null && _0x1ef2a3 !== undefined) {
          return _0x1ef2a3;
        } else {
          return undefined;
        }
      });
    }
    getName() {
      return _0x3d1aad(this, undefined, undefined, function* () {
        return this.getProperty("name");
      });
    }
    getEntryPointData() {
      if (this.entrypointData) {
        return this.entrypointData;
      }
      try {
        this.entrypointData = Object.fromEntries(new URLSearchParams(window.location.search));
      } catch (_0x5358f0) {
        this.entrypointData = {};
      }
      return this.entrypointData;
    }
  };
  _0x5ccbd3.WebIDProvider = _0x50c383;
  _0x5ccbd3.WebLocalStorageProvider = _0x24b357;
  _0x5ccbd3.addDefaultWebListeners = _0x5e1581;
  _0x5ccbd3.addDevWebListeners = _0x5b0d18;
  _0x5ccbd3.buildStorageProvider = _0x5318f3;
  _0x5ccbd3.buildTrackerWebContextProvider = function (_0x32a90f) {
    function _0x6b9051() {
      var _0x56af0c;
      var _0x5b2f3e;
      return window.innerHeight || ((_0x56af0c = document.documentElement) === null || _0x56af0c === undefined ? undefined : _0x56af0c.clientHeight) || ((_0x5b2f3e = document.body) === null || _0x5b2f3e === undefined ? undefined : _0x5b2f3e.clientHeight);
    }
    const _0x3e6dea = function (_0x47c563) {
      const _0x3cbbd9 = _0x8a5d15 => {
        const _0x5432df = _0x47c563.match("^(?:.*" + _0x8a5d15 + "=([^&]*)|).*$");
        if (_0x5432df == null) {
          return undefined;
        } else {
          return _0x5432df[1];
        }
      };
      return {
        utm_source: _0x3cbbd9("utm_source"),
        utm_medium: _0x3cbbd9("utm_medium"),
        utm_campaign: _0x3cbbd9("utm_campaign"),
        utm_term: _0x3cbbd9("utm_term"),
        utm_content: _0x3cbbd9("utm_content")
      };
    }((document.location.search || "").replace(/^\?/, ""));
    return _0x4e68e0 => {
      return Object.assign(Object.assign({}, _0x3e6dea), {
        play_session_id: _0x4e68e0.getPlaySessionId(),
        channel: _0x32a90f,
        device_width: window.innerWidth || ((_0x4ca39d = document.documentElement) === null || _0x4ca39d === undefined ? undefined : _0x4ca39d.clientWidth) || ((_0x308519 = document.body) === null || _0x308519 === undefined ? undefined : _0x308519.clientWidth),
        device_height: _0x6b9051()
      });
      var _0x4ca39d;
      var _0x308519;
    };
  };
  _0x5ccbd3.buildWebAsyncStorage = _0x260ef0 => new _0x284dd1({
    provider: new _0x24b357(),
    logger: _0x260ef0
  });
  _0x5ccbd3.consentToAllConsentProvider = _0x396f80;
  _0x5ccbd3.decodeTokenPayload = _0x281ab3;
  _0x5ccbd3.defaultCharacteristics = _0x99265f;
  _0x5ccbd3.defaultLifecycle = _0xd2b20d;
  _0x5ccbd3.emptyAdEventLogger = _0x1a0590;
  _0x5ccbd3.emptyAdLifecycle = _0xd1dd36;
  _0x5ccbd3.emptyAnalyticsIDProvider = _0x255fb6;
  _0x5ccbd3.emptyAsyncStorage = _0x55f80a;
  _0x5ccbd3.emptyBootstrapper = _0x536feb;
  _0x5ccbd3.emptyCommunityProvider = _0x4dee7e;
  _0x5ccbd3.emptyCrossplay = _0x291858;
  _0x5ccbd3.emptyCrosspromo = _0x50d2af;
  _0x5ccbd3.emptyEntryPoint = _0x4c1655;
  _0x5ccbd3.emptyIAPProvider = _0x74f945;
  _0x5ccbd3.emptyLogger = _0x18650f;
  _0x5ccbd3.emptyNavigationProvider = _0x2f3294;
  _0x5ccbd3.emptyNotificationsProvider = _0xe1f7fe;
  _0x5ccbd3.emptyProfile = _0x52d138;
  _0x5ccbd3.emptyShortcutProvider = _0x3a49e8;
  _0x5ccbd3.inMemoryChannelMapper = _0x52ef1a;
  _0x5ccbd3.noConsentConsentProvider = _0x2919c9;
  Object.defineProperty(_0x5ccbd3, "__esModule", {
    value: true
  });
  return _0x5ccbd3;
}({});
FRVRSDK.version = FRVRSDK.version || {};
FRVRSDK.version.sdk = FRVRSDK.version.sdk || {};
FRVRSDK.version.sdk.v = "14.9.0";
FRVRSDK.version.sdk.bts = "1744367166554";
FRVRSDK.version.sdk.branch = "master";
FRVRSDK.version.sdk.hash = "c2f677953bcd34ac7623a3979726d985e4d61e3b"; //# sourceMappingURL=frvr-sdk.min.js.map