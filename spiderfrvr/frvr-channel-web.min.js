(function (_0x510097) {
  'use strict';

  function _0x5baa30(_0x57d11c, _0x52df0d, _0x2b341a, _0x272e64) {
    return new (_0x2b341a || (_0x2b341a = Promise))(function (_0x5a46a0, _0x5b41c0) {
      function _0x363afa(_0x2afd00) {
        try {
          _0x156315(_0x272e64.next(_0x2afd00));
        } catch (_0x2aaf12) {
          _0x5b41c0(_0x2aaf12);
        }
      }
      function _0x40e6bc(_0xe88e5a) {
        try {
          _0x156315(_0x272e64.throw(_0xe88e5a));
        } catch (_0x80cd74) {
          _0x5b41c0(_0x80cd74);
        }
      }
      function _0x156315(_0x5b22c1) {
        var _0x43f3bd;
        if (_0x5b22c1.done) {
          _0x5a46a0(_0x5b22c1.value);
        } else {
          (_0x43f3bd = _0x5b22c1.value, _0x43f3bd instanceof _0x2b341a ? _0x43f3bd : new _0x2b341a(function (_0x374ad7) {
            _0x374ad7(_0x43f3bd);
          })).then(_0x363afa, _0x40e6bc);
        }
      }
      _0x156315((_0x272e64 = _0x272e64.apply(_0x57d11c, _0x52df0d || [])).next());
    });
  }
  if (typeof SuppressedError == "function") {
    SuppressedError;
  }
  class _0x42bb24 {
    constructor(_0x527b6a, _0x470878, _0x18db83) {
      this.remoteUrl = _0x42bb24.DEFAULT_REMOTE_ADS_CONFIG_URL;
      this.platformId = _0x527b6a;
      this.channelId = _0x470878;
      this.logger = _0x18db83;
    }
    setBaseUrl(_0x2b4138) {
      this.remoteUrl = _0x2b4138;
    }
    get(_0x4193a0) {
      return _0x5baa30(this, undefined, undefined, function* () {
        var _0x4585cc;
        if (!(_0x4193a0 && this.platformId && this.channelId)) {
          throw new Error("gameId, platformId and channelId are required to retrieve remote ads config");
        }
        if (!((_0x4585cc = this.logger) === null || _0x4585cc === undefined)) {
          _0x4585cc.debug("[FRVR-SDK] fetching remote ads config");
        }
        const _0x5e2e7e = yield fetch(this.getRemoteConfigUrl(_0x4193a0));
        if (!_0x5e2e7e.ok) {
          throw new Error(_0x5e2e7e.statusText);
        }
        return yield _0x5e2e7e.json();
      });
    }
    getRemoteConfigUrl(_0x3d1bc4) {
      return this.remoteUrl.replace("{GAME}", _0x3d1bc4).replace("{PLATFORM}", this.platformId).replace("{CHANNEL}", this.channelId);
    }
  }
  var _0x52fc35;
  _0x42bb24.DEFAULT_REMOTE_ADS_CONFIG_URL = "https://fran-cdn.frvr.com/configs/ads/{GAME}/{PLATFORM}/{CHANNEL}/sdk.json";
  (function (_0x10e2dd) {
    _0x10e2dd.INTERSTITIAL = "interstitial";
    _0x10e2dd.REWARD = "reward";
    _0x10e2dd.BANNER = "banner";
    _0x10e2dd.SURVEY = "survey";
    _0x10e2dd.REWARDED_INTERSTITIAL = "rewarded-interstitial";
  })(_0x52fc35 || (_0x52fc35 = {}));
  const _0x51cd8e = {
    [_0x52fc35.INTERSTITIAL]: {
      stopsGameFlow: true,
      throttleable: true
    },
    [_0x52fc35.REWARD]: {
      stopsGameFlow: true,
      throttleable: false
    },
    [_0x52fc35.BANNER]: {
      stopsGameFlow: false,
      throttleable: false
    },
    [_0x52fc35.SURVEY]: {
      stopsGameFlow: true,
      throttleable: true
    },
    [_0x52fc35.REWARDED_INTERSTITIAL]: {
      stopsGameFlow: true,
      throttleable: true
    }
  };
  const _0x34b584 = {
    onSuspend: () => {},
    onResume: () => {},
    onAudioSuspend: () => {},
    onAudioResume: () => {}
  };
  var _0x26e0c2;
  var _0x122d73;
  var _0x37ee22;
  var _0x418110;
  (function (_0x49aa44) {
    _0x49aa44.DELIVERED = "delivered";
    _0x49aa44.COMPLETED = "completed";
  })(_0x26e0c2 || (_0x26e0c2 = {}));
  (function (_0x5c1afb) {
    _0x5c1afb.ON_LOAD = "on_load";
    _0x5c1afb.ON_SHOW = "on_show";
    _0x5c1afb.BLOCKED = "blocked";
    _0x5c1afb.NOFILL = "nofill";
    _0x5c1afb.TIMED_OUT = "timed_out";
  })(_0x122d73 || (_0x122d73 = {}));
  (function (_0x2dba85) {
    _0x2dba85[_0x2dba85.NO_THROTTLING = 0] = "NO_THROTTLING";
    _0x2dba85.INIT_TIME = "INIT_TIME";
    _0x2dba85.FREQUENCY = "FREQUENCY";
  })(_0x37ee22 || (_0x37ee22 = {}));
  class _0x26b678 {
    constructor() {
      this.maxfrequency = 0;
      this.initTimeBlock = 0;
      this.forceFirstAd = false;
      this.MAX_FREQUENCY_DEFAULT = 300000;
      this.FIRST_SESSION_AD_SPEED_RATE = 3;
    }
    getFirstIntervalTime(_0x1228a6) {
      const _0x129926 = _0x1228a6.isFirstAdEver ? this.maxfrequency : this.maxfrequency / this.FIRST_SESSION_AD_SPEED_RATE;
      return _0x1228a6.initTime - _0x129926;
    }
    getInitialisedState(_0x3d592e) {
      if (_0x3d592e.lastShownAd) {
        return _0x3d592e;
      } else {
        return Object.assign(Object.assign({}, _0x3d592e), {
          lastShownAd: this.getFirstIntervalTime(_0x3d592e)
        });
      }
    }
    shouldBlockByInitTime(_0x37dff4, _0x3be441) {
      return _0x3be441 - _0x37dff4.initTime < this.initTimeBlock;
    }
    shouldBlockByFrequency(_0x2c7566, _0x11936d) {
      const _0x5177b1 = _0x11936d - _0x2c7566.lastShownAd;
      return this.maxfrequency > 0 && _0x5177b1 < this.maxfrequency && !(_0x2c7566.isFirstAd && this.forceFirstAd);
    }
    init(_0x167db4) {
      this.initTimeBlock = _0x167db4.initTimeBlock || 0;
      this.maxfrequency = _0x167db4.maxfrequency === undefined ? this.MAX_FREQUENCY_DEFAULT : _0x167db4.maxfrequency;
      this.forceFirstAd = _0x167db4.forceFirstAd || false;
    }
    mustThrottle(_0x3f9b56, _0x58ac7f) {
      _0x58ac7f = _0x58ac7f === undefined ? new Date().getTime() : _0x58ac7f;
      const _0x5d4e7f = this.getInitialisedState(_0x3f9b56);
      if (this.shouldBlockByInitTime(_0x5d4e7f, _0x58ac7f)) {
        return _0x37ee22.INIT_TIME;
      } else if (this.shouldBlockByFrequency(_0x5d4e7f, _0x58ac7f)) {
        return _0x37ee22.FREQUENCY;
      } else {
        return _0x37ee22.NO_THROTTLING;
      }
    }
    checkpoint(_0x407b5e, _0x45494a) {
      _0x45494a = _0x45494a === undefined ? new Date().getTime() : _0x45494a;
      return Object.assign(Object.assign({}, _0x407b5e), {
        isFirstAd: false,
        isFirstAdEver: false,
        lastShownAd: _0x45494a
      });
    }
  }
  (function (_0x1f61ba) {
    _0x1f61ba.DEVELOPMENT = "dev";
    _0x1f61ba.BETA = "beta";
    _0x1f61ba.PRODUCTION = "prod";
  })(_0x418110 || (_0x418110 = {}));
  const _0x7e3ea6 = {
    log: () => {},
    error: () => {},
    warn: () => {},
    info: () => {},
    debug: () => {}
  };
  class _0x25f2c3 {
    constructor() {
      this.values = {};
    }
    setItems(_0x464ad2) {
      return _0x5baa30(this, undefined, undefined, function* () {
        for (const _0x2600ce of _0x464ad2) {
          this.values[_0x2600ce.key] = _0x2600ce.value;
        }
      });
    }
    getItems(_0x4f6423) {
      return _0x5baa30(this, undefined, undefined, function* () {
        const _0x34d5d5 = {};
        for (const _0x559bbe of _0x4f6423) {
          const _0x161426 = this.values[_0x559bbe];
          if (_0x161426 !== undefined) {
            _0x34d5d5[_0x559bbe] = _0x161426;
          }
        }
        return _0x34d5d5;
      });
    }
    removeItems(_0x5d783a) {
      return _0x5baa30(this, undefined, undefined, function* () {
        for (const _0x1bdba9 of _0x5d783a) {
          delete this.values[_0x1bdba9];
        }
      });
    }
    isPersistent() {
      return false;
    }
  }
  _0x25f2c3.providerName = "memory";
  const _0x41a76b = new class {
    constructor({
      provider: _0x52a192,
      logger: _0x21eb00
    }) {
      this.provider = _0x52a192;
      this.logger = _0x21eb00 || _0x7e3ea6;
    }
    setItems(_0x3c7b8e) {
      const _0x30e8d9 = _0x3c7b8e.map(({
        key: _0x4e9f33,
        value: _0x230026
      }) => ({
        key: _0x4e9f33,
        value: JSON.stringify(_0x230026)
      }));
      return this.provider.setItems(_0x30e8d9);
    }
    getItems(_0x256381) {
      return _0x5baa30(this, undefined, undefined, function* () {
        const _0x2907d7 = yield this.provider.getItems(_0x256381);
        const _0x21b2b1 = {};
        for (const _0x3bc181 in _0x2907d7) {
          try {
            _0x21b2b1[_0x3bc181] = JSON.parse(_0x2907d7[_0x3bc181]);
          } catch (_0x354415) {
            _0x21b2b1[_0x3bc181] = _0x2907d7[_0x3bc181];
            this.logger.error("[storage] parsing error on key " + _0x3bc181, _0x354415.message);
          }
        }
        return _0x21b2b1;
      });
    }
    removeItems(_0x2c2ae3) {
      return this.provider.removeItems(_0x2c2ae3);
    }
    setItem(_0x1c0edd, _0x27372e) {
      return this.provider.setItems([{
        key: _0x1c0edd,
        value: JSON.stringify(_0x27372e)
      }]);
    }
    getItem(_0x190693, _0x316dbc) {
      return _0x5baa30(this, undefined, undefined, function* () {
        let _0x1d507c;
        const _0x40bd9d = (yield this.provider.getItems([_0x190693]))[_0x190693];
        try {
          _0x1d507c = _0x40bd9d !== undefined ? JSON.parse(_0x40bd9d) : _0x316dbc;
        } catch (_0x526e4f) {
          _0x1d507c = _0x316dbc != null ? _0x316dbc : _0x40bd9d;
          this.logger.error("[storage] parsing error on key " + _0x190693, _0x526e4f.message);
        }
        return _0x1d507c;
      });
    }
    removeItem(_0xd2fffb) {
      return _0x5baa30(this, undefined, undefined, function* () {
        return this.provider.removeItems([_0xd2fffb]);
      });
    }
    isPersistent() {
      return this.provider.isPersistent();
    }
  }({
    provider: new _0x25f2c3()
  });
  var _0x447619;
  (function (_0x334a33) {
    _0x334a33[_0x334a33.None = 0] = "None";
    _0x334a33[_0x334a33.P1StoreInformationOnADevice = 2] = "P1StoreInformationOnADevice";
    _0x334a33[_0x334a33.P2SelectBasicAds = 4] = "P2SelectBasicAds";
    _0x334a33[_0x334a33.P3PersonalizedAdsProfile = 8] = "P3PersonalizedAdsProfile";
    _0x334a33[_0x334a33.P4PersonalizedAds = 16] = "P4PersonalizedAds";
    _0x334a33[_0x334a33.P5PersonalizedContentProfile = 32] = "P5PersonalizedContentProfile";
    _0x334a33[_0x334a33.P6PersonalizedContent = 64] = "P6PersonalizedContent";
    _0x334a33[_0x334a33.P7MeasureAdPerformance = 128] = "P7MeasureAdPerformance";
    _0x334a33[_0x334a33.P8MeasureContentPerformance = 256] = "P8MeasureContentPerformance";
    _0x334a33[_0x334a33.P9MarketResearchForAudienceInsights = 512] = "P9MarketResearchForAudienceInsights";
    _0x334a33[_0x334a33.P10DevelopAndImproveProducts = 1024] = "P10DevelopAndImproveProducts";
    _0x334a33[_0x334a33.All = 2046] = "All";
  })(_0x447619 || (_0x447619 = {}));
  const _0x4f4d99 = {
    logEvent: () => {}
  };
  var _0x483bc9;
  var _0x181c0d;
  (function (_0x8b1cb0) {
    _0x8b1cb0.AD_CLOSED = "adclosed";
    _0x8b1cb0.AD_LEAVING_APPLICATION = "adleavingapplication";
    _0x8b1cb0.CANCELED = "canceled";
    _0x8b1cb0.ERROR = "error";
    _0x8b1cb0.INTERNAL_ERROR = "internalerror";
    _0x8b1cb0.INVALID_REQUEST = "invalidrequest";
    _0x8b1cb0.NETWORK_ERROR = "networkerror";
    _0x8b1cb0.NOFILL = "nofill";
    _0x8b1cb0.SUCCESS = "success";
    _0x8b1cb0.THROTTLED = "throttled";
    _0x8b1cb0.TIMEOUT = "timeout";
  })(_0x483bc9 || (_0x483bc9 = {}));
  (function (_0x72587a) {
    _0x72587a.ERROR = "error";
    _0x72587a.NOFILL = "nofill";
    _0x72587a.SKIPPED = "skipped";
    _0x72587a.SUCCESS = "success";
    _0x72587a.TIMEDOUT = "timedout";
  })(_0x181c0d || (_0x181c0d = {}));
  const _0xb728e9 = {
    [_0x52fc35.INTERSTITIAL]: "mandatory",
    [_0x52fc35.REWARD]: "rewarded",
    [_0x52fc35.BANNER]: "banner"
  };
  class _0x10a10a {
    constructor(_0x5a6b61, _0xe29592) {
      this.tracker = _0x5a6b61;
      this.params = _0xe29592;
    }
    getEventName(_0x487986) {
      var _0x3e45c0;
      return "ad_" + ((_0x3e45c0 = _0xb728e9[this.params.adType]) !== null && _0x3e45c0 !== undefined ? _0x3e45c0 : this.params.adType) + "_" + _0x487986;
    }
    logEvent(_0x176d8f, _0xfda3a9) {
      this.tracker.logEvent(_0x176d8f, _0xfda3a9, _0x447619.None);
    }
    requestingAd(_0x207cea, _0x15040f) {
      const _0xdc55e = this.getEventName("request");
      this.logEvent(_0xdc55e, Object.assign(Object.assign({}, _0x15040f), {
        provider: this.params.provider,
        advertisement_id: _0x207cea
      }));
    }
    receivedAdResponse(_0x59f27a, _0x3f9382, _0x26fb7d) {
      const _0x377d53 = this.getEventName("response");
      this.logEvent(_0x377d53, Object.assign(Object.assign({}, _0x26fb7d), {
        provider: this.params.provider,
        advertisement_id: _0x3f9382,
        ad_response: _0x59f27a
      }));
    }
    willShowAd(_0x48dce1, _0x2f3027, _0xe0902c) {
      const _0x39a120 = this.getEventName("show");
      this.logEvent(_0x39a120, Object.assign(Object.assign({}, _0xe0902c), {
        provider: this.params.provider,
        advertisement_id: _0x2f3027,
        preloaded: _0x48dce1
      }));
    }
    finishedAd(_0x58f757, _0x244b68, _0x2cede5) {
      const _0x232c93 = this.getEventName("finish");
      this.logEvent(_0x232c93, Object.assign(Object.assign({}, _0x2cede5), {
        provider: this.params.provider,
        advertisement_id: _0x244b68,
        ad_result: _0x58f757
      }));
    }
  }
  var _0x2efaba;
  var _0x48cbd6;
  var _0x347034;
  (function (_0x30d042) {
    _0x30d042.NOT_DISPLAYED = "not_displayed";
    _0x30d042.DELIVERED = "delivered";
    _0x30d042.COMPLETED = "completed";
  })(_0x2efaba || (_0x2efaba = {}));
  class _0x4254da {
    constructor({
      env: _0x4c63d2,
      logger: _0x226e8e = _0x7e3ea6,
      throttler: _0x2ab159,
      storage: _0x531ba4 = _0x41a76b,
      tracker: _0x225670 = _0x4f4d99,
      controls: _0x35da99 = _0x34b584,
      onBeforeInit: _0x20db1a = () => Promise.resolve()
    } = {}) {
      this.config = {};
      this.registeredProviders = {};
      this.providers = [];
      this.ADSTORAGE_FIRST_TIME_KEY = "__ads_firstTimeView";
      this.adShownListeners = [];
      this.adShownCount = {
        [_0x52fc35.INTERSTITIAL]: 0,
        [_0x52fc35.REWARD]: 0,
        [_0x52fc35.BANNER]: 0,
        [_0x52fc35.SURVEY]: 0,
        [_0x52fc35.REWARDED_INTERSTITIAL]: 0
      };
      this.AdType = _0x52fc35;
      this.AdSuccess = _0x26e0c2;
      this.AdShowResult = _0x2efaba;
      this.env = _0x4c63d2;
      this.logger = _0x226e8e;
      this.throttler = _0x2ab159 || new _0x26b678();
      this.storage = _0x531ba4;
      this.tracker = _0x225670;
      this.controls = _0x35da99;
      this.onBeforeInit = _0x20db1a;
      this.throttlerState = {
        initTime: new Date().getTime(),
        isFirstAd: true,
        isFirstAdEver: false,
        lastShownAd: 0
      };
    }
    register(_0x19b25d) {
      const _0x335788 = _0x19b25d.getName() + "#" + _0x19b25d.getType();
      this.registeredProviders[_0x335788] = _0x19b25d;
    }
    configure(_0x4f415b) {
      this.config = _0x4f415b;
    }
    init() {
      return _0x5baa30(this, undefined, undefined, function* () {
        var _0x25c545;
        yield (_0x25c545 = this.onBeforeInit) === null || _0x25c545 === undefined ? undefined : _0x25c545.call(this);
        this.throttlerState.isFirstAdEver = (yield this.storage.getItem(this.ADSTORAGE_FIRST_TIME_KEY, true)) || false;
        this.logger.log("[ads] first time ever?", this.throttlerState.isFirstAdEver);
        this.throttler.init(this.config.throttling || {});
        const _0x18b6d4 = [...(this.config.providers || [])];
        _0x18b6d4.sort((_0x56afb8, _0x11091d) => _0x56afb8.priority - _0x11091d.priority);
        const _0x47514d = _0x18b6d4.map(_0x2e8cbb => {
          const _0x427c4d = _0x2e8cbb.name + "#" + _0x2e8cbb.type;
          return {
            provider: this.registeredProviders[_0x427c4d],
            providerConfig: _0x2e8cbb,
            key: _0x427c4d
          };
        }).filter(({
          provider: _0x2710de
        }) => _0x2710de).map(({
          provider: _0x25faad,
          providerConfig: _0x4cbc5f,
          key: _0x1f34a4
        }) => {
          const _0x4bf9c5 = new _0x10a10a(this.tracker, {
            adType: _0x25faad.getType(),
            provider: _0x25faad.getName()
          });
          return _0x25faad.init(_0x4cbc5f, this.controls, _0x4bf9c5).then(() => _0x25faad).catch(_0x43df8a => {
            this.logger.warn("[ads] Ad provider " + _0x1f34a4 + " could not be initialised", _0x43df8a);
          });
        });
        const _0xf24811 = (yield Promise.all(_0x47514d)).filter(_0x48a4d5 => _0x48a4d5 !== undefined);
        this.providers = _0xf24811;
      });
    }
    getProviders() {
      return this.providers;
    }
    getProvidersByType(_0x31b9bb) {
      return this.providers.filter(_0x132d65 => _0x132d65.getType() === _0x31b9bb);
    }
    isSupported(_0x49b836) {
      return this.getProvidersByType(_0x49b836).length > 0;
    }
    isReady(_0x2a473a) {
      return this.getProvidersByType(_0x2a473a).find(_0x4f1cba => _0x4f1cba.isReady()) !== undefined;
    }
    show(_0x37885f) {
      return _0x5baa30(this, undefined, undefined, function* () {
        const _0x118a44 = _0x51cd8e[_0x37885f].throttleable;
        if (_0x118a44) {
          const _0x3de3b7 = this.throttler.mustThrottle(this.throttlerState);
          if (_0x3de3b7) {
            this.logger.log("[ads] Ad was throttled, reason =", _0x3de3b7);
            return Promise.resolve(_0x2efaba.NOT_DISPLAYED);
          }
        }
        const _0x3138fe = this.getProvidersByType(_0x37885f);
        if (_0x3138fe.length === 0) {
          this.logger.error("[ads] no providers for", _0x37885f);
        }
        let _0x379d91 = false;
        const _0x7b53c3 = yield function (_0x1b1fed, _0x2064f5) {
          const _0x4d92d6 = _0x1d574e => {
            const _0x1f35d1 = _0x1b1fed[_0x1d574e];
            if (_0x1f35d1) {
              return _0x2064f5(_0x1f35d1).then(_0xf42c7d => _0xf42c7d === undefined ? _0x4d92d6(_0x1d574e + 1) : _0xf42c7d);
            } else {
              return Promise.resolve(undefined);
            }
          };
          return _0x4d92d6(0);
        }(_0x3138fe, _0x3ddccc => _0x5baa30(this, undefined, undefined, function* () {
          try {
            if (!_0x3ddccc.isReady()) {
              this.logger.warn("[ads] provider", _0x3ddccc.getName(), "not ready");
              return;
            }
            if (!(_0x379d91 || !_0x51cd8e[_0x37885f].stopsGameFlow || _0x3ddccc.useManualControl())) {
              this.controls.onSuspend();
              this.controls.onAudioSuspend();
              _0x379d91 = true;
            }
            this.logger.log("[ads] showing", _0x3ddccc.getName(), "for", _0x37885f);
            const _0x5f29f9 = yield _0x3ddccc.show();
            if (_0x5f29f9.success === false) {
              this.logger.error("[ads] show error", _0x5f29f9.message);
              this.trackAdError(_0x3ddccc, _0x37885f, _0x5f29f9);
            }
            if (_0x5f29f9.success) {
              return _0x5f29f9.code;
            } else {
              return undefined;
            }
          } catch (_0x269717) {
            this.logger.error("[ads] show error", _0x269717);
          }
        }));
        if (_0x379d91) {
          this.controls.onAudioResume();
          this.controls.onResume();
        }
        if (_0x7b53c3 !== undefined) {
          if (this.env === _0x418110.DEVELOPMENT) {
            window.focus();
          }
          if (_0x118a44) {
            this.throttlerState = this.throttler.checkpoint(this.throttlerState);
            yield this.storage.setItem(this.ADSTORAGE_FIRST_TIME_KEY, false);
          }
          this.adShownCount[_0x37885f] = (this.adShownCount[_0x37885f] || 0) + 1;
          this.notifyAdShown(_0x37885f, _0x7b53c3);
          if (_0x7b53c3 === _0x26e0c2.COMPLETED) {
            return _0x2efaba.COMPLETED;
          } else {
            return _0x2efaba.DELIVERED;
          }
        } else {
          this.logger.warn("[ads] no ad shown for", _0x37885f);
          return _0x2efaba.NOT_DISPLAYED;
        }
      });
    }
    hide(_0x33fc41) {
      return _0x5baa30(this, undefined, undefined, function* () {
        const _0x5cff64 = this.getProvidersByType(_0x33fc41);
        for (const _0xf171a3 of _0x5cff64) {
          try {
            yield _0xf171a3.hide();
          } catch (_0x45afb4) {
            this.logger.error("[ads] hide error", _0x45afb4);
          }
        }
      });
    }
    setUserConsent(_0x5d1505) {
      this.providers.forEach(_0x17613d => {
        var _0x372b02;
        if ((_0x372b02 = _0x17613d.setUserConsent) === null || _0x372b02 === undefined) {
          return undefined;
        } else {
          return _0x372b02.call(_0x17613d, _0x5d1505);
        }
      });
    }
    onAdShown(_0x3c490a) {
      this.adShownListeners.push(_0x3c490a);
      return () => {
        const _0x275c18 = this.adShownListeners.indexOf(_0x3c490a);
        if (_0x275c18 >= 0) {
          this.adShownListeners.splice(_0x275c18, 1);
        }
      };
    }
    notifyAdShown(_0x4f2d9b, _0x4be3b6) {
      this.adShownListeners.forEach(_0x2466bf => _0x2466bf(_0x4f2d9b, this.adShownCount, _0x4be3b6));
    }
    getAdShownCount() {
      return this.adShownCount;
    }
    trackAdError(_0x2cdb19, _0x35286e, _0x477207) {
      const _0x3a287f = {
        provider: _0x2cdb19.getName(),
        type: _0x35286e,
        code: _0x477207.code
      };
      const _0x5ef8cf = {
        msg: _0x477207.message + " - " + JSON.stringify(_0x3a287f),
        line: 0,
        col: 0,
        label: JSON.stringify(_0x3a287f)
      };
      this.tracker.logEvent("error", _0x5ef8cf, _0x447619.None);
    }
  }
  class _0x4bbaec {
    debug(..._0x2b2506) {
      console.debug(JSON.stringify(_0x2b2506));
    }
    error(..._0x3f661d) {
      console.error(JSON.stringify(_0x3f661d));
    }
    info(..._0x327036) {
      console.info(JSON.stringify(_0x327036));
    }
    log(..._0xe22781) {
      console.log(JSON.stringify(_0xe22781));
    }
    warn(..._0x3a5670) {
      console.warn(JSON.stringify(_0x3a5670));
    }
  }
  class _0x59c6ca {
    constructor() {
      this._promise = new Promise((_0x7a5e30, _0x3e3da9) => {
        this._resolve = _0x7a5e30;
        this._reject = _0x3e3da9;
      });
    }
    get promise() {
      return this._promise;
    }
    resolve(_0x5988f7) {
      this._resolve(_0x5988f7);
    }
    reject(_0x318499) {
      this._reject(_0x318499);
    }
  }
  class _0x1315dd {
    static isFrame() {
      return window.self !== window.top;
    }
    static getBrowserWidth() {
      var _0x6fcfae;
      let _0x49daf9;
      const _0x3ba066 = _0x1315dd.isFrame() ? window : window.top || window;
      const _0x5d2bf4 = _0x3ba066.outerWidth || 9999;
      _0x49daf9 = _0x3ba066.innerWidth !== undefined ? _0x3ba066.innerWidth : _0x3ba066.document.documentElement !== undefined && _0x3ba066.document.documentElement.clientWidth !== undefined && _0x3ba066.document.documentElement.clientWidth !== 0 ? _0x3ba066.document.documentElement.clientWidth : (_0x6fcfae = _0x3ba066.document.body) === null || _0x6fcfae === undefined ? undefined : _0x6fcfae.clientWidth;
      return Math.min(_0x49daf9, _0x5d2bf4);
    }
    static getBrowserHeight() {
      var _0x277fbe;
      let _0x4c1a27;
      const _0x4cf807 = _0x1315dd.isFrame() ? window : window.top || window;
      const _0x354faf = _0x4cf807.outerHeight || 9999;
      _0x4c1a27 = _0x4cf807.innerHeight !== undefined ? _0x4cf807.innerHeight : _0x4cf807.document.documentElement !== undefined && _0x4cf807.document.documentElement.clientHeight !== undefined && _0x4cf807.document.documentElement.clientHeight !== 0 ? _0x4cf807.document.documentElement.clientHeight : (_0x277fbe = _0x4cf807.document.body) === null || _0x277fbe === undefined ? undefined : _0x277fbe.clientHeight;
      return Math.min(_0x4c1a27, _0x354faf);
    }
    static isInterstitial(_0x4046ef) {
      return _0x4046ef.ortb2Imp && _0x4046ef.ortb2Imp.instl && _0x4046ef.ortb2Imp.instl === 1;
    }
    static filterAdUnitSizes(_0x15381d, _0x5c2f8a, _0xba4daf, _0x3ca2f7) {
      const _0x5d3e50 = _0x5c2f8a.mediaTypes || {};
      const _0x80308f = _0x1315dd.isInterstitial(_0x5c2f8a);
      _0xba4daf = _0xba4daf || _0x1315dd.getBrowserWidth();
      _0x3ca2f7 = _0x3ca2f7 || _0x1315dd.getBrowserHeight();
      if (_0x5d3e50.banner) {
        if (!(Array.isArray(_0x5d3e50.banner.sizes) && _0x5d3e50.banner.sizes.length > 0)) {
          _0x5d3e50.banner.sizes = _0x15381d.banner;
        }
        if (_0x80308f) {
          _0xba4daf *= 0.9;
          _0x3ca2f7 *= 0.9;
        }
        _0x5d3e50.banner.sizes = _0x1315dd.filterSizesArray(_0x5d3e50.banner.sizes, _0xba4daf, _0x3ca2f7);
      }
      if (_0x5d3e50.video) {
        if (!(_0x5d3e50.video.playerSize && Array.isArray(_0x5d3e50.video.playerSize) && _0x5d3e50.video.playerSize.length > 0)) {
          _0x5d3e50.video.playerSize = _0x1315dd.filterSizesArray(_0x15381d.video, _0xba4daf, _0x3ca2f7)[0];
        }
      }
    }
    static generateUUID() {
      if (window.crypto && window.crypto.randomUUID) {
        return window.crypto.randomUUID();
      }
      let _0x5a7ff3 = new Date().getTime();
      let _0x213551 = typeof performance != "undefined" && performance.now && performance.now() * 1000 || 0;
      return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (_0x5038a2) {
        let _0x15075f = Math.random() * 16;
        if (_0x5a7ff3 > 0) {
          _0x15075f = (_0x5a7ff3 + _0x15075f) % 16 | 0;
          _0x5a7ff3 = Math.floor(_0x5a7ff3 / 16);
        } else {
          _0x15075f = (_0x213551 + _0x15075f) % 16 | 0;
          _0x213551 = Math.floor(_0x213551 / 16);
        }
        return (_0x5038a2 === "x" ? _0x15075f : _0x15075f & 3 | 8).toString(16);
      });
    }
    static loadScript(_0x25f969) {
      if (_0x25f969) {
        const _0x289dce = document.createElement("script");
        _0x289dce.type = "text/javascript";
        _0x289dce.async = true;
        _0x289dce.src = _0x25f969;
        return document.head.appendChild(_0x289dce);
      }
    }
    static overridePollfishContainerZIndex(_0x2fb63a) {
      const _0x20e339 = document.getElementById("pollfishSurveyContainer");
      if (_0x20e339) {
        _0x20e339.style["z-index"] = _0x2fb63a;
      }
    }
    static loadGPT(_0x46fcbc) {
      if (!_0x1315dd.gptLoaded) {
        if (window.googletag && window.googletag.apiReady) {
          return;
        }
        let _0x52d5f7 = _0x1315dd.DEFAULT_GPT_URL;
        if (_0x46fcbc && _0x46fcbc.url) {
          _0x52d5f7 = _0x46fcbc.url;
        }
        _0x1315dd.loadScript(_0x52d5f7);
        _0x1315dd.gptLoaded = true;
      }
    }
    static loadPubX(_0x409f77) {
      if ((_0x409f77 == null ? undefined : _0x409f77.enabled) && (_0x409f77 == null ? undefined : _0x409f77.tagURI) && !_0x1315dd.pubxLoaded) {
        _0x1315dd.loadScript(_0x409f77 == null ? undefined : _0x409f77.tagURI);
        _0x1315dd.pubxLoaded = true;
      }
    }
    static loadAdmiralABR(_0x258ef7) {
      var _0x14c444;
      if (((_0x14c444 = _0x258ef7 == null ? undefined : _0x258ef7.abr) === null || _0x14c444 === undefined ? undefined : _0x14c444.enabled) && _0x258ef7.abr.pid && !_0x1315dd.admiralABRLoaded) {
        const _0x47de18 = "https://fran-cdn.frvr.com/admiral/" + _0x258ef7.abr.pid + "_bootstrap.js";
        _0x1315dd.loadScript(_0x47de18);
        _0x1315dd.admiralABRLoaded = true;
      }
    }
    static loadPrebid(_0xa00357) {
      if (!_0x1315dd.prebidLoaded) {
        let _0x409f43 = _0x1315dd.DEFAULT_PREBID_URL;
        if (_0xa00357 && _0xa00357.url) {
          _0x409f43 = _0xa00357.url;
        }
        _0x1315dd.loadScript(_0x409f43);
        _0x1315dd.prebidLoaded = true;
      }
    }
    static loadPollfish(_0x361093) {
      if (!_0x1315dd.pollfishLoaded) {
        let _0x4a7ed3 = _0x1315dd.DEFAULT_JQUERY_URL;
        let _0x4d87a2 = _0x1315dd.DEFAULT_POLLFISH_SDK_URL;
        if (_0x361093) {
          if (_0x361093.jqueryUrl) {
            _0x4a7ed3 = _0x361093.jqueryUrl;
          }
          if (_0x361093.pollfishSdkUrl) {
            _0x4d87a2 = _0x361093.pollfishSdkUrl;
          }
        }
        _0x1315dd.loadScript(_0x4a7ed3).onload = function () {
          _0x1315dd.loadScript(_0x4d87a2);
        };
        window.pollfishConfig = Object.assign(Object.assign({}, window.pollfishConfig || {}), {
          api_key: _0x361093.apiKey,
          debug: !!_0x361093.debug
        });
        _0x1315dd.pollfishLoaded = true;
      }
    }
    static loadIMA(_0x45dc0a) {
      if (!_0x1315dd.imaLoaded) {
        let _0xcf72b4 = _0x1315dd.DEFAULT_IMA_URL;
        if (_0x45dc0a && _0x45dc0a.url) {
          _0xcf72b4 = _0x45dc0a.url;
        }
        const _0x495a09 = _0x1315dd.loadScript(_0xcf72b4);
        _0x495a09.onerror = _0x38de41 => {
          _0x1315dd.imaReady.reject(_0x38de41);
        };
        _0x495a09.onload = () => {
          _0x1315dd.imaReady.resolve();
        };
        _0x1315dd.imaLoaded = true;
      }
    }
    static loadApsTag(_0x39f2c6) {
      if (!_0x1315dd.apsTagLoaded && _0x39f2c6 && _0x39f2c6.pubID) {
        (function (_0x40ca39, _0x33543e, _0x4aae55, _0x76d070, _0x4a168f, _0x1bb802, _0x410fef) {
          function _0x3f20e0(_0x93d42, _0x4e63dc) {
            _0x33543e[_0x40ca39]._Q.push([_0x93d42, _0x4e63dc]);
          }
          if (!_0x33543e[_0x40ca39]) {
            _0x33543e[_0x40ca39] = {
              init: function () {
                _0x3f20e0("i", arguments);
              },
              fetchBids: function () {
                _0x3f20e0("f", arguments);
              },
              setDisplayBids: function () {},
              targetingKeys: function () {
                return [];
              },
              _Q: []
            };
            (_0x1bb802 = _0x4aae55.createElement(_0x76d070)).async = true;
            _0x1bb802.src = _0x4a168f;
            (_0x410fef = _0x4aae55.getElementsByTagName(_0x76d070)[0]).parentNode.insertBefore(_0x1bb802, _0x410fef);
            _0x33543e[_0x40ca39].init({
              pubID: _0x39f2c6.pubID,
              adServer: "googletag",
              videoAdServer: "DFP"
            });
          }
        })("apstag", window, document, "script", window.getScriptSrc ? window.getScriptSrc("https://c.amazon-adsystem.com/aax2/apstag.js") : "//c.amazon-adsystem.com/aax2/apstag.js");
        _0x1315dd.apsTagLoaded = true;
      }
    }
    static onIMAReady() {
      return this.imaReady.promise;
    }
    static initializePrebid(_0x21f0d8) {
      const _0x2d0181 = (_0x21f0d8 = _0x21f0d8 || {}).config || {};
      const _0x420c71 = _0x21f0d8.analytics || {};
      const _0x51d15b = _0x1315dd.getPrebidS2SAliases(_0x2d0181 == null ? undefined : _0x2d0181.s2sConfig);
      if (_0x51d15b && _0x51d15b.length) {
        window.pbjs.que.push(() => {
          _0x51d15b.forEach(_0x40e9b4 => {
            var _0x126330;
            if (!((_0x126330 = window.pbjs) === null || _0x126330 === undefined)) {
              _0x126330.aliasBidder(_0x40e9b4.bidder, _0x40e9b4.alias);
            }
          });
        });
      }
      window.pbjs.que.push(() => {
        if (!_0x1315dd.prebidInitialized) {
          if (_0x420c71 && _0x420c71.enabled) {
            window.pbjs.que.push(() => {
              window.pbjs.enableAnalytics({
                provider: _0x420c71.provider,
                options: _0x420c71.options
              });
            });
          }
          window.pbjs.setConfig(_0x2d0181);
          _0x1315dd.prebidInitialized = true;
        }
      });
    }
    static setPrebidPageUrl(_0xdb9f31) {
      if (_0xdb9f31 && window.pbjs && window.pbjs.que) {
        window.pbjs.que.push(() => {
          window.pbjs.setConfig({
            pageUrl: _0xdb9f31
          });
        });
      }
    }
    static addPrebidAdUnit(_0x464a66) {
      if (window.pbjs && window.pbjs.que) {
        window.pbjs.que.push(() => {
          window.pbjs.addAdUnits(_0x464a66);
        });
      }
    }
    static stringToHTMLElement(_0x184d06) {
      const _0x4d2784 = document.createElement("div");
      _0x4d2784.innerHTML = _0x184d06.trim();
      return _0x4d2784.firstChild;
    }
    static isIMAPresent() {
      return window.google && window.google.ima;
    }
    static toUrlQueryParameters(_0x9a3d53) {
      const _0x2e6c12 = [];
      for (const _0xfb223 in _0x9a3d53) {
        if ({}.hasOwnProperty.call(_0x9a3d53, _0xfb223)) {
          _0x2e6c12.push(encodeURIComponent(_0xfb223) + "=" + encodeURIComponent(_0x9a3d53[_0xfb223]));
        }
      }
      return _0x2e6c12.join("&");
    }
    static extractParamsFromUrl(_0xb291cd) {
      const _0x325806 = _0xb291cd.split("?");
      if (_0x325806.length === 2) {
        return _0x1315dd.parseParameters(_0x325806[1]);
      } else {
        return {};
      }
    }
    static parseParameters(_0x3f7395) {
      return function (_0x148b09) {
        const _0x4f081a = {};
        _0x148b09.replace(/([^=&]+)=([^&]*)/g, function (_0x3374d5, _0x5b1ae9, _0x54f3c2) {
          const _0x492c0c = decodeURIComponent(_0x54f3c2);
          if (_0x492c0c && _0x492c0c !== "undefined") {
            _0x4f081a[decodeURIComponent(_0x5b1ae9)] = decodeURIComponent(_0x54f3c2);
          }
        });
        return _0x4f081a;
      }(_0x3f7395);
    }
    static isHTMLElementInViewport(_0xabf0d0) {
      var _0x28d189;
      var _0x5b17b1;
      if (!_0xabf0d0) {
        return false;
      }
      if (window) {
        const _0x5d0ebf = _0xabf0d0.getBoundingClientRect();
        const _0x155b4f = window.innerHeight || ((_0x28d189 = window.document.documentElement) === null || _0x28d189 === undefined ? undefined : _0x28d189.clientHeight);
        const _0x4e73c0 = window.innerWidth || ((_0x5b17b1 = window.document.documentElement) === null || _0x5b17b1 === undefined ? undefined : _0x5b17b1.clientWidth);
        const _0x396b36 = _0x5d0ebf.top <= _0x155b4f && _0x5d0ebf.top + _0x5d0ebf.height >= 0;
        const _0x5b89c9 = _0x5d0ebf.left <= _0x4e73c0 && _0x5d0ebf.left + _0x5d0ebf.width >= 0;
        return _0x5d0ebf.bottom > 0 && _0x5d0ebf.right > 0 && _0x396b36 && _0x5b89c9;
      }
      return false;
    }
    static isHTMLElementVisible(_0x2f1f0b) {
      return !!_0x2f1f0b && !!(_0x2f1f0b.offsetWidth || _0x2f1f0b.offsetHeight || _0x2f1f0b.getClientRects().length) && _0x1315dd.isHTMLElementInViewport(_0x2f1f0b);
    }
    static isTabVisible() {
      var _0x2b7f84;
      return ((_0x2b7f84 = window === null || window === undefined ? undefined : window.document) === null || _0x2b7f84 === undefined ? undefined : _0x2b7f84.visibilityState) !== "hidden";
    }
    static isFunction(_0x1c921a) {
      return !!(_0x1c921a && _0x1c921a.constructor && _0x1c921a.call && _0x1c921a.apply);
    }
    static toUAMAdUnit(_0x14f968) {
      var _0x1ef743;
      var _0x522931;
      var _0x2a4982;
      var _0x218ef7;
      const _0x5b558f = _0x1315dd.isFunction(_0x14f968.code) ? _0x14f968.code() : _0x14f968.code;
      return {
        slotName: _0x5b558f,
        slotID: _0x5b558f,
        sizes: ((_0x522931 = (_0x1ef743 = _0x14f968.mediaTypes) === null || _0x1ef743 === undefined ? undefined : _0x1ef743.banner) === null || _0x522931 === undefined ? undefined : _0x522931.sizes) || [].concat((_0x218ef7 = (_0x2a4982 = _0x14f968.mediaTypes) === null || _0x2a4982 === undefined ? undefined : _0x2a4982.video) === null || _0x218ef7 === undefined ? undefined : _0x218ef7.playerSize)
      };
    }
    static mergeVendorConsents(_0x3daeaa, _0x522b0e) {
      if (!(_0x3daeaa != null)) {
        _0x3daeaa = {};
      }
      if (!(_0x522b0e != null)) {
        _0x522b0e = {};
      }
      const _0xa6f870 = Object.assign(Object.assign({}, _0x3daeaa), _0x522b0e);
      Object.keys(_0xa6f870).forEach(_0x2df689 => {
        _0xa6f870[_0x2df689] = !!_0x3daeaa[_0x2df689] || !!_0x522b0e[_0x2df689];
      });
      return _0xa6f870;
    }
    static adUnitPath2NetworkAndCode(_0x510246) {
      const _0x5b557b = (_0x510246 || "").split("/").filter(Boolean);
      if (_0x5b557b.length >= 2) {
        return {
          network: _0x5b557b[0],
          code: _0x5b557b[_0x5b557b.length - 1]
        };
      } else {
        return null;
      }
    }
    static getPrebidS2SAliases(_0x37b055) {
      let _0xa3204a = [];
      if (_0x37b055 && _0x37b055.length) {
        _0x37b055.forEach(_0xc77d48 => {
          var _0xd92ab5;
          if (_0xc77d48.enabled && ((_0xd92ab5 = _0xc77d48.extPrebid) === null || _0xd92ab5 === undefined ? undefined : _0xd92ab5.aliases)) {
            const _0x451742 = Object.keys(_0xc77d48.extPrebid.aliases).map(_0x57b3ae => ({
              bidder: _0xc77d48.extPrebid.aliases[_0x57b3ae],
              alias: _0x57b3ae
            }));
            _0xa3204a = _0xa3204a.concat(_0x451742);
          }
        });
      }
      return _0xa3204a;
    }
    static resolveCustomTargeting(_0x51e332) {
      if (!_0x51e332) {
        return {};
      }
      const _0x5cbf37 = {};
      Object.entries(_0x51e332).forEach(([_0x596a68, _0x39b9c8]) => {
        if (typeof _0x39b9c8 == "string" && _0x39b9c8.trim().startsWith("function")) {
          const _0x3a8a30 = new Function("return " + _0x39b9c8)();
          let _0x4f53fe = {};
          try {
            _0x4f53fe = _0x3a8a30.call(window);
          } catch (_0x525db) {}
          if (_0x4f53fe && typeof _0x4f53fe == "object" && !Array.isArray(_0x4f53fe) && Object.keys(_0x4f53fe).length > 0) {
            for (const [_0x11a85f, _0x2e51cd] of Object.entries(_0x4f53fe)) {
              _0x5cbf37[_0x11a85f] = String(_0x2e51cd).toString();
            }
          }
        } else {
          _0x5cbf37[_0x596a68] = String(_0x39b9c8).toString();
        }
      });
      return _0x5cbf37;
    }
    static checkAdBlock(_0x42f016) {
      let _0x3d2261 = "https://www3.doubleclick.net";
      if (_0x42f016 && _0x42f016.targetUrl) {
        _0x3d2261 = _0x42f016.targetUrl;
      }
      if ((_0x42f016 == null ? undefined : _0x42f016.enabled) === false || typeof window.fetch != "function") {
        return Promise.resolve(false);
      } else {
        return new Promise(_0x530fb9 => {
          const _0x34c87b = // TOLOOK
          setTimeout(() => {
            _0x530fb9(false);
          }, (_0x42f016 == null ? undefined : _0x42f016.timeout) || 3000);
          window.fetch(_0x3d2261, {
            method: "HEAD",
            mode: "no-cors",
            cache: "no-store"
          }).then(_0x5ee3bc => {
            clearTimeout(_0x34c87b);
            if (_0x5ee3bc.redirected) {
              _0x530fb9(true);
            } else {
              _0x530fb9(false);
            }
          }).catch(() => {
            clearTimeout(_0x34c87b);
            _0x530fb9(true);
          });
        });
      }
    }
    static filterSizesArray(_0x4eb3b3, _0x90bead, _0x1b4ca3) {
      const _0x154b85 = [];
      _0x4eb3b3.forEach(_0x32aacb => {
        if (_0x32aacb[0] <= _0x90bead && _0x32aacb[1] <= _0x1b4ca3) {
          _0x154b85.push(_0x32aacb);
        }
      });
      return _0x154b85;
    }
  }
  function _0x512640() {
    window.pbjs = window.pbjs || {};
    window.pbjs.que = window.pbjs.que || [];
    window.googletag = window.googletag || {};
    window.googletag.cmd = window.googletag.cmd || [];
  }
  _0x1315dd.imaReady = new _0x59c6ca();
  _0x1315dd.GOOGLE_VENDOR_ID = 755;
  _0x1315dd.TCF_P1_CONSENT = 1;
  _0x1315dd.TCF_P4_CONSENT = 4;
  _0x1315dd.DEFAULT_GPT_URL = "https://securepubads.g.doubleclick.net/tag/js/gpt.js";
  _0x1315dd.DEFAULT_PREBID_URL = "https://fran-cdn.frvr.com/prebid.7.23.0.js";
  _0x1315dd.DEFAULT_IMA_URL = "https://imasdk.googleapis.com/js/sdkloader/ima3.js";
  _0x1315dd.DEFAULT_JQUERY_URL = "https://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js";
  _0x1315dd.DEFAULT_POLLFISH_SDK_URL = "https://storage.googleapis.com/pollfish_production/sdk/webplugin/pollfish.min.js";
  _0x1315dd.prebidLoaded = false;
  _0x1315dd.prebidInitialized = false;
  _0x1315dd.gptLoaded = false;
  _0x1315dd.pubxLoaded = false;
  _0x1315dd.imaLoaded = false;
  _0x1315dd.apsTagLoaded = false;
  _0x1315dd.pollfishLoaded = false;
  _0x1315dd.admiralABRLoaded = false;
  (function (_0x4f7de9) {
    _0x4f7de9.DISPLAY = "display";
    _0x4f7de9.VIDEO = "video";
    _0x4f7de9.SURVEY = "survey";
  })(_0x48cbd6 || (_0x48cbd6 = {}));
  (function (_0xee225f) {
    _0xee225f.IDFA = "idfa";
    _0xee225f.GAID = "gaid";
    _0xee225f.SAMSUNG = "tifa";
  })(_0x347034 || (_0x347034 = {}));
  if (typeof window != "undefined") {
    _0x512640();
  }
  class _0x271e77 {
    constructor(_0x575531, _0x9c9561, _0x2d225c) {
      this.PROVIDER = "fran";
      this.DEFAULT_REFRESH_INTERVAL = 61000;
      this.hasP1Consent = true;
      this.hasP4Consent = true;
      this.isInitialized = false;
      this.isAdAvailable = false;
      this.isPreloadingAd = false;
      this.defaultSizes = {
        banner: [[1024, 768], [768, 1024], [480, 320], [336, 280], [320, 480], [300, 600], [300, 250], [250, 250], [728, 90]],
        video: [[1024, 768], [768, 1024], [640, 480], [640, 390], [640, 360], [480, 320], [400, 300], [400, 225], [390, 640], [320, 480]]
      };
      this.volume = 1;
      this.defaultTimeoutMS = 1500;
      this.preloadTimeout = null;
      _0x512640();
      this.type = _0x575531;
      this.mediaType = _0x9c9561;
      this.logger = _0x2d225c || new _0x4bbaec();
    }
    getName() {
      return this.PROVIDER + "#" + this.mediaType;
    }
    getType() {
      return this.type;
    }
    useManualControl() {
      return false;
    }
    init(_0x186865, _0x434868, _0x31875f) {
      return _0x5baa30(this, undefined, undefined, function* () {
        var _0x454a07;
        var _0xfb2451;
        var _0x1d1cb8;
        var _0x4a18e9;
        var _0x21cd01;
        var _0x41dc4a;
        var _0x13619d;
        this.controls = _0x434868;
        this.tracker = _0x31875f;
        const _0x1f1114 = _0x186865.config;
        if (!(_0x1f1114.adUnit || _0x1f1114.adUnits && Array.isArray(_0x1f1114.adUnits) && _0x1f1114.adUnits.length !== 0)) {
          if (!((_0x454a07 = this.logger) === null || _0x454a07 === undefined)) {
            _0x454a07.error(this.getFullName() + ": adUnit or adUnits is required");
          }
          throw new Error(this.getFullName() + ": adUnit or adUnits is required");
        }
        if (_0x1f1114.adUnit) {
          if (!((_0xfb2451 = (_0x41dc4a = _0x1f1114.adUnit).timeout) !== null && _0xfb2451 !== undefined)) {
            _0x41dc4a.timeout = ((_0x4a18e9 = (_0x1d1cb8 = window === null || window === undefined ? undefined : window.pbjs) === null || _0x1d1cb8 === undefined ? undefined : _0x1d1cb8.getConfig) === null || _0x4a18e9 === undefined ? undefined : _0x4a18e9.call(_0x1d1cb8, "bidderTimeout")) || this.defaultTimeoutMS;
          }
          _0x1f1114.adUnit.code = _0x1315dd.isFunction(_0x1f1114.adUnit.code) ? _0x1f1114.adUnit.code() : _0x1f1114.adUnit.code;
          if (!((_0x21cd01 = (_0x13619d = _0x1f1114.adUnit).uam) !== null && _0x21cd01 !== undefined)) {
            _0x13619d.uam = !!window.apstag;
          }
          this.defaultTimeoutMS = _0x1f1114.adUnit.timeout;
        }
        if (_0x1f1114.adUnits) {
          _0x1f1114.adUnits.forEach(_0x589ebc => {
            var _0x4c957f;
            var _0x27527b;
            var _0x13cc7a;
            if (!((_0x4c957f = _0x589ebc.timeout) !== null && _0x4c957f !== undefined)) {
              _0x589ebc.timeout = ((_0x13cc7a = (_0x27527b = window === null || window === undefined ? undefined : window.pbjs) === null || _0x27527b === undefined ? undefined : _0x27527b.getConfig) === null || _0x13cc7a === undefined ? undefined : _0x13cc7a.call(_0x27527b, "bidderTimeout")) || this.defaultTimeoutMS;
            }
            _0x589ebc.code = _0x1315dd.isFunction(_0x589ebc.code) ? _0x589ebc.code() : _0x589ebc.code;
            if (_0x589ebc.timeout > this.defaultTimeoutMS) {
              this.defaultTimeoutMS = _0x589ebc.timeout;
            }
          });
        }
        this.config = JSON.parse(JSON.stringify(_0x1f1114));
        this.adUnit = _0x1f1114.adUnit;
        this.adUnits = this.config.adUnits;
        window.addEventListener("resize", () => {
          this.reset();
        });
        if (this.adUnit && this.type != _0x52fc35.BANNER) {
          _0x1315dd.filterAdUnitSizes(this.defaultSizes, this.adUnit);
        }
        if (yield _0x1315dd.checkAdBlock(_0x1f1114 == null ? undefined : _0x1f1114.adBlockDetection)) {
          this.isInitialized = false;
          throw new Error(this.getFullName() + ": ad block detected, disabling provider");
        }
        this.isInitialized = true;
      });
    }
    show() {
      return _0x5baa30(this, undefined, undefined, function* () {
        var _0x1b0fa8;
        var _0x1ec715;
        if (this.isInitialized) {
          if (this.isAdAvailable) {
            return {
              success: true,
              code: _0x26e0c2.COMPLETED
            };
          } else {
            if (!((_0x1ec715 = this.logger) === null || _0x1ec715 === undefined)) {
              _0x1ec715.debug(this.getFullName() + ": no ad available");
            }
            return {
              success: false,
              code: _0x122d73.ON_SHOW,
              message: this.getFullName() + ": no ad available"
            };
          }
        } else {
          if (!((_0x1b0fa8 = this.logger) === null || _0x1b0fa8 === undefined)) {
            _0x1b0fa8.error(this.getFullName() + ": not initialized, call init()");
          }
          return {
            success: false,
            code: _0x122d73.ON_SHOW,
            message: this.getFullName() + ": not initialized, call init()"
          };
        }
      });
    }
    preload() {
      return _0x5baa30(this, undefined, undefined, function* () {
        var _0x1de660;
        var _0x5ebff2;
        var _0x11da4f;
        if (this.isInitialized) {
          if (this.isAdAvailable) {
            if (!((_0x5ebff2 = this.logger) === null || _0x5ebff2 === undefined)) {
              _0x5ebff2.debug(this.getFullName() + ": an ad is already available");
            }
            return {
              success: false,
              code: _0x122d73.ON_LOAD,
              message: this.getFullName() + ": an ad is already available"
            };
          } else {
            if (!this.isPreloadingAd) {
              this.isAdAvailable = false;
              this.isPreloadingAd = true;
              // TOLOOK
              setTimeout(() => {
                if (this.isPreloadingAd) {
                  this.reset();
                }
              }, this.defaultTimeoutMS * 1.25);
              if (!((_0x11da4f = this.logger) === null || _0x11da4f === undefined)) {
                _0x11da4f.debug(this.getFullName() + ": preloading ad");
              }
            }
            return {
              success: true,
              code: _0x26e0c2.DELIVERED
            };
          }
        } else {
          if (!((_0x1de660 = this.logger) === null || _0x1de660 === undefined)) {
            _0x1de660.error(this.getFullName() + ": not initialized, call init()");
          }
          return {
            success: false,
            code: _0x122d73.ON_LOAD,
            message: this.getFullName() + ": not initialized, call init()"
          };
        }
      });
    }
    reset() {
      this.isPreloadingAd = false;
      this.isAdAvailable = false;
    }
    getFullName() {
      return this.getName() + "#" + this.getType();
    }
    getMediaType() {
      return this.mediaType;
    }
    getUserP1Consent() {
      return this.hasP1Consent;
    }
    setUserP1Consent(_0x34623a) {
      this.hasP1Consent = _0x34623a;
    }
    getUserP4Consent() {
      return this.hasP1Consent;
    }
    setUserP4Consent(_0x4f99b5) {
      this.hasP4Consent = _0x4f99b5;
    }
    getVendorConsent(_0x4a5141) {
      return !this.vendorConsents || this.vendorConsents[_0x4a5141];
    }
    setVendorConsents(_0x35ba33) {
      this.vendorConsents = _0x35ba33;
    }
    setDeviceId(_0x5dd413) {
      this.deviceId = _0x5dd413;
    }
    setPublisherProvidedId(_0x550c04) {
      this.ppid = _0x550c04;
    }
    getDeviceIdTargeting() {
      if (!this.deviceId) {
        return null;
      }
      const _0x40336b = {
        rdid: this.deviceId.value,
        is_lat: this.getUserP1Consent() ? "0" : "1"
      };
      switch (this.deviceId.type) {
        case _0x347034.IDFA:
          _0x40336b.idtype = "idfa";
          return _0x40336b;
        case _0x347034.GAID:
          _0x40336b.idtype = "adid";
          return _0x40336b;
        case _0x347034.SAMSUNG:
          _0x40336b.idtype = "tifa";
          return _0x40336b;
        default:
          return null;
      }
    }
    getVolume() {
      return this.volume;
    }
    setVolume(_0x5455da) {
      if (_0x5455da < 0 || _0x5455da > 1) {
        _0x5455da = 1;
      }
      this.volume = _0x5455da;
    }
    getAdUnitCode() {
      if (this.adUnit) {
        if (_0x1315dd.isFunction(this.adUnit.code)) {
          return this.adUnit.code();
        } else {
          return this.adUnit.code;
        }
      } else if (this.adUnits) {
        return this.adUnits.map(_0xa5b95d => _0xa5b95d.code).join(",");
      } else {
        return undefined;
      }
    }
  }
  class _0x45ec20 extends _0x271e77 {
    constructor(_0x18aa06, _0x12ed28) {
      super(_0x18aa06, _0x48cbd6.DISPLAY, _0x12ed28);
      this.adPreloading = null;
      this.adSlot = null;
    }
    init(_0x549fdf, _0x3ed154, _0x260e5e) {
      const _0x4dd440 = Object.create(null, {
        init: {
          get: () => super.init
        }
      });
      return _0x5baa30(this, undefined, undefined, function* () {
        yield _0x4dd440.init.call(this, _0x549fdf, _0x3ed154, _0x260e5e);
        window.googletag.cmd.push(() => {
          if (this.config.pageUrl) {
            window.googletag.pubads().set("page_url", this.config.pageUrl);
          }
          window.googletag.pubads().addEventListener("slotRenderEnded", _0x2e197e => {
            var _0x3b2924;
            var _0x4500e8;
            var _0x1d00c7;
            var _0x2e6a5c;
            if (this.adSlot === _0x2e197e.slot) {
              this.isAdAvailable = !_0x2e197e.isEmpty;
              this.isPreloadingAd = false;
              if (this.isAdAvailable) {
                if (!((_0x3b2924 = this.logger) === null || _0x3b2924 === undefined)) {
                  _0x3b2924.debug(this.getFullName() + ": ad filled");
                }
                if (!((_0x4500e8 = this.tracker) === null || _0x4500e8 === undefined)) {
                  _0x4500e8.receivedAdResponse(_0x483bc9.SUCCESS, this.getAdUnitCode(), this.getAdSlotTargeting());
                }
              } else {
                if (!((_0x1d00c7 = this.logger) === null || _0x1d00c7 === undefined)) {
                  _0x1d00c7.debug(this.getFullName() + ": unable to load ad");
                }
                if (!((_0x2e6a5c = this.tracker) === null || _0x2e6a5c === undefined)) {
                  _0x2e6a5c.receivedAdResponse(_0x483bc9.NOFILL, this.getAdUnitCode(), this.getAdSlotTargeting());
                }
                if (this.adPreloading) {
                  this.adPreloading.resolve({
                    success: false,
                    code: _0x122d73.ON_LOAD,
                    message: this.getFullName() + ": unable to load ad"
                  });
                  this.adPreloading = null;
                }
              }
            }
          });
          window.googletag.pubads().disableInitialLoad();
          window.googletag.pubads().enableSingleRequest();
          window.googletag.enableServices();
          if (this.config.pageUrl) {
            _0x1315dd.setPrebidPageUrl(this.config.pageUrl);
          }
        });
      });
    }
    reset() {
      super.reset();
      if (this.adSlot) {
        window.googletag.destroySlots([this.adSlot]);
      }
      if (this.adPreloading) {
        this.adPreloading.resolve({
          success: false,
          code: _0x122d73.ON_LOAD,
          message: this.getFullName() + ": unable to load ad"
        });
        this.adPreloading = null;
      }
    }
    isReady() {
      return _0x1315dd.gptLoaded;
    }
    setTargeting(_0x37cd9d) {
      var _0x4350aa;
      var _0x67422c;
      var _0xd655c1;
      if (this.adSlot) {
        if ((_0x4350aa = this.config) === null || _0x4350aa === undefined ? undefined : _0x4350aa.customTargeting) {
          this.addAdSlotTargeting(_0x1315dd.resolveCustomTargeting(this.config.customTargeting));
        }
        if (this.deviceId) {
          this.addAdSlotTargeting(this.getDeviceIdTargeting());
        }
        if (this.ppid) {
          if (!((_0xd655c1 = (_0x67422c = window === null || window === undefined ? undefined : window.googletag) === null || _0x67422c === undefined ? undefined : _0x67422c.pubads) === null || _0xd655c1 === undefined)) {
            _0xd655c1.call(_0x67422c).setPublisherProvidedId(this.ppid);
          }
        }
        if (_0x37cd9d) {
          this.addAdSlotTargeting(_0x37cd9d);
        }
      }
    }
    getAdSlotTargeting() {
      if (this.adSlot && this.adSlot.getTargetingMap()) {
        const _0x559898 = {};
        const _0x47267c = this.adSlot.getTargetingMap();
        for (const _0x5ee48f in _0x47267c) {
          if ({}.hasOwnProperty.call(_0x47267c, _0x5ee48f)) {
            const _0x4645e9 = _0x47267c[_0x5ee48f];
            _0x559898[_0x5ee48f] = Array.isArray(_0x4645e9) ? _0x4645e9.join() : _0x4645e9;
          }
        }
        return _0x559898;
      }
      return {};
    }
    addAdSlotTargeting(_0x32b938) {
      if (_0x32b938 && typeof _0x32b938 == "object" && this.adSlot && this.adSlot.setTargeting) {
        for (const _0x10f459 in _0x32b938) {
          if (_0x32b938.hasOwnProperty(_0x10f459)) {
            this.adSlot.setTargeting(_0x10f459, _0x32b938[_0x10f459]);
          }
        }
      }
    }
  }
  class _0x3c8581 extends _0x45ec20 {
    constructor(_0x1c8f86) {
      super(_0x52fc35.INTERSTITIAL, _0x1c8f86);
      this.adShownPromise = null;
      this.manualInterstitialEvent = null;
      this.lastCalled = new Date(-8640000000000000).getTime();
      this.THROTTLE_PERIOD_MS = 120000;
    }
    init(_0x294009, _0x4ba4dc, _0x14e0f8) {
      const _0x396502 = Object.create(null, {
        init: {
          get: () => super.init
        }
      });
      return _0x5baa30(this, undefined, undefined, function* () {
        yield _0x396502.init.call(this, _0x294009, _0x4ba4dc, _0x14e0f8);
        window.googletag.cmd.push(() => {
          window.googletag.pubads().addEventListener("gameManualInterstitialSlotReady", _0x1965d9 => {
            if (this.adSlot === _0x1965d9.slot) {
              this.isAdAvailable = true;
              this.lastCalled = Date.now();
              this.manualInterstitialEvent = _0x1965d9;
              if (this.adPreloading) {
                this.adPreloading.resolve({
                  success: true,
                  code: _0x26e0c2.DELIVERED
                });
                this.adPreloading = null;
              }
            }
          });
          window.googletag.pubads().addEventListener("gameManualInterstitialSlotClosed", () => {
            var _0x4c27ef;
            var _0x3a4473;
            this.isAdAvailable = false;
            if (!((_0x4c27ef = this.tracker) === null || _0x4c27ef === undefined)) {
              _0x4c27ef.finishedAd(_0x181c0d.SUCCESS, this.getAdUnitCode(), this.getAdSlotTargeting());
            }
            if (this.adShownPromise) {
              const _0x3d15e8 = {
                success: true,
                code: _0x26e0c2.COMPLETED
              };
              this.adShownPromise.resolve(_0x3d15e8);
              this.adShownPromise = null;
            }
            if (!((_0x3a4473 = this.logger) === null || _0x3a4473 === undefined)) {
              _0x3a4473.debug(this.getFullName() + ": ad closed");
            }
          });
        });
        _0x1315dd.addPrebidAdUnit(this.adUnit);
      });
    }
    preload() {
      const _0x39cad5 = Object.create(null, {
        preload: {
          get: () => super.preload
        }
      });
      return _0x5baa30(this, undefined, undefined, function* () {
        var _0x4de6ea;
        var _0x471899;
        if (this.isThrottled()) {
          return {
            success: false,
            code: _0x122d73.ON_LOAD,
            message: "throttled: available in " + (this.THROTTLE_PERIOD_MS - (Date.now() - this.lastCalled)) / 1000 + " seconds"
          };
        }
        const _0x2e0509 = yield _0x39cad5.preload.call(this);
        if (_0x2e0509 && _0x2e0509.success) {
          if (!this.getUserP1Consent() || !this.getVendorConsent(_0x1315dd.GOOGLE_VENDOR_ID)) {
            return {
              success: false,
              code: _0x122d73.ON_SHOW,
              message: "missing required vendor consent"
            };
          }
          if (this.adPreloading) {
            if (!((_0x4de6ea = this.logger) === null || _0x4de6ea === undefined)) {
              _0x4de6ea.debug(this.getFullName() + ": already loading an ad");
            }
            return {
              success: true,
              code: _0x26e0c2.DELIVERED
            };
          }
          const _0x14bf55 = {
            aps: false,
            prebid: false
          };
          const _0x179ee1 = _0x1315dd.generateUUID();
          const _0x5bb259 = () => {
            if (_0x14bf55.aps && _0x14bf55.prebid) {
              _0x402d54();
            }
          };
          const _0x402d54 = () => {
            window.googletag.cmd.push(() => {
              var _0x53b892;
              window.googletag.pubads().setRequestNonPersonalizedAds(this.getUserP4Consent() ? 0 : 1);
              window.googletag.pubads().setPrivacySettings({
                limitedAds: !this.getUserP1Consent()
              });
              try {
                this.setTargeting({
                  hb_aid: _0x179ee1
                });
                window.googletag.pubads().refresh([this.adSlot]);
              } catch (_0x218cd1) {
                this.isPreloadingAd = false;
                this.isAdAvailable = false;
                if (!((_0x53b892 = this.logger) === null || _0x53b892 === undefined)) {
                  _0x53b892.error(_0x218cd1);
                }
                if (this.adPreloading) {
                  this.adPreloading.resolve({
                    success: false,
                    code: _0x122d73.ON_LOAD,
                    message: this.getFullName() + ": unable to send request to ad server - " + _0x218cd1
                  });
                  this.adPreloading = null;
                }
              }
            });
          };
          const _0x5f0993 = () => {
            if (!(this.adUnit && this.adUnit.bids && this.adUnit.bids.length && window.pbjs)) {
              _0x14bf55.prebid = true;
              _0x5bb259();
              return;
            }
            window.pbjs.que.push(() => {
              const _0x3f7488 = {
                auctionId: _0x179ee1,
                timeout: this.adUnit.timeout,
                adUnits: [this.adUnit],
                bidsBackHandler: () => {
                  window.pbjs.initAdserverSet = true;
                  window.pbjs.setTargetingForGPTAsync();
                  _0x14bf55.prebid = true;
                  _0x5bb259();
                }
              };
              try {
                window.pbjs.requestBids(_0x3f7488);
              } catch (_0x2ff263) {
                _0x14bf55.prebid = true;
                _0x5bb259();
              }
            });
          };
          const _0x4f64de = () => {
            if (!(this.adUnit && this.adUnit.uam && window.apstag)) {
              _0x14bf55.aps = true;
              _0x5bb259();
              return;
            }
            const _0x3f3a0d = _0x1315dd.toUAMAdUnit(this.adUnit);
            _0x3f3a0d.slotID = this.adSlot.getSlotElementId();
            window.apstag.fetchBids({
              slots: [_0x3f3a0d],
              timeout: this.adUnit.timeout
            }, () => {
              window.googletag.cmd.push(function () {
                window.apstag.setDisplayBids();
                _0x14bf55.aps = true;
                _0x5bb259();
              });
            });
          };
          if (!((_0x471899 = this.tracker) === null || _0x471899 === undefined)) {
            _0x471899.requestingAd(this.getAdUnitCode(), {
              hb_aid: _0x179ee1
            });
          }
          window.googletag.cmd.push(() => {
            var _0x99c6e3;
            window.googletag.destroySlots([this.adSlot]);
            this.adSlot = window.googletag.defineOutOfPageSlot(this.getAdUnitCode(), window.googletag.enums.OutOfPageFormat.GAME_MANUAL_INTERSTITIAL);
            if (!this.adSlot) {
              if (!((_0x99c6e3 = this.logger) === null || _0x99c6e3 === undefined)) {
                _0x99c6e3.debug(this.getFullName() + ": unable to create ad slot");
              }
              this.isPreloadingAd = false;
              this.isAdAvailable = false;
              if (this.adPreloading) {
                this.adPreloading.resolve({
                  success: false,
                  code: _0x122d73.ON_LOAD,
                  message: this.getFullName() + ": unable to create ad slot"
                });
                this.adPreloading = null;
              }
              return;
            }
            this.adSlot.addService(window.googletag.pubads());
            _0x5f0993();
            _0x4f64de();
          });
          this.adPreloading = new _0x59c6ca();
          return this.adPreloading.promise;
        }
        return _0x2e0509;
      });
    }
    show() {
      return _0x5baa30(this, undefined, undefined, function* () {
        if (!this.isAdAvailable) {
          const _0x2b4f1c = yield this.preload();
          if (_0x2b4f1c && _0x2b4f1c.success && this.isAdAvailable) {
            return this.showAd();
          } else {
            return _0x2b4f1c;
          }
        }
        return this.showAd();
      });
    }
    reset() {
      super.reset();
      if (this.adShownPromise) {
        const _0x2bec77 = {
          success: true,
          code: _0x26e0c2.COMPLETED
        };
        this.adShownPromise.resolve(_0x2bec77);
        this.adShownPromise = null;
      }
    }
    canPreload() {
      return true;
    }
    getAdSlot() {
      return this.adSlot;
    }
    showAd() {
      const _0x3bbc43 = Object.create(null, {
        show: {
          get: () => super.show
        }
      });
      return _0x5baa30(this, undefined, undefined, function* () {
        var _0x1b7035;
        var _0x93149c;
        const _0x4025c7 = yield _0x3bbc43.show.call(this);
        if (_0x4025c7 && _0x4025c7.success) {
          if (this.adShownPromise) {
            if (!((_0x1b7035 = this.logger) === null || _0x1b7035 === undefined)) {
              _0x1b7035.debug(this.getFullName() + ": already showing ad");
            }
            return {
              success: true,
              code: _0x26e0c2.COMPLETED
            };
          } else if (this.manualInterstitialEvent) {
            if (!((_0x93149c = this.tracker) === null || _0x93149c === undefined)) {
              _0x93149c.willShowAd(true, this.getAdUnitCode(), this.getAdSlotTargeting());
            }
            this.manualInterstitialEvent.makeGameManualInterstitialVisible();
            this.adShownPromise = new _0x59c6ca();
            return this.adShownPromise.promise;
          } else {
            return {
              success: false,
              code: _0x122d73.ON_SHOW,
              message: this.getFullName() + ": failed to render ad"
            };
          }
        } else {
          return _0x4025c7;
        }
      });
    }
    isThrottled() {
      return !(Date.now() - this.lastCalled > this.THROTTLE_PERIOD_MS);
    }
  }
  class _0x57d460 extends _0x45ec20 {
    constructor(_0x3b6acf) {
      super(_0x52fc35.REWARD, _0x3b6acf);
      this.rewardSlotEvent = null;
      this.skipped = true;
      this.adShownPromise = null;
    }
    canPreload() {
      return true;
    }
    init(_0x3a6cb3, _0x2994ee, _0x396cb1) {
      const _0x3e5ce9 = Object.create(null, {
        init: {
          get: () => super.init
        }
      });
      return _0x5baa30(this, undefined, undefined, function* () {
        yield _0x3e5ce9.init.call(this, _0x3a6cb3, _0x2994ee, _0x396cb1);
        window.googletag.cmd.push(() => {
          window.googletag.pubads().addEventListener("rewardedSlotReady", _0x119eed => {
            this.rewardSlotEvent = _0x119eed;
            if (this.adPreloading) {
              this.adPreloading.resolve({
                success: true,
                code: _0x26e0c2.DELIVERED
              });
              this.adPreloading = null;
            }
          });
          window.googletag.pubads().addEventListener("rewardedSlotGranted", () => {
            this.skipped = false;
          });
          window.googletag.pubads().addEventListener("rewardedSlotClosed", () => {
            var _0x27d683;
            var _0x20705b;
            this.isAdAvailable = false;
            if (!((_0x27d683 = this.logger) === null || _0x27d683 === undefined)) {
              _0x27d683.debug(this.getFullName() + ": ad closed, skipped? " + this.skipped);
            }
            if (!((_0x20705b = this.tracker) === null || _0x20705b === undefined)) {
              _0x20705b.finishedAd(this.skipped ? _0x181c0d.SKIPPED : _0x181c0d.SUCCESS, this.getAdUnitCode());
            }
            if (this.adShownPromise) {
              const _0x3579d0 = {
                success: true,
                code: this.skipped ? _0x26e0c2.DELIVERED : _0x26e0c2.COMPLETED
              };
              this.adShownPromise.resolve(_0x3579d0);
              this.adShownPromise = null;
            }
            this.skipped = true;
            this.rewardSlotEvent = null;
          });
        });
      });
    }
    preload() {
      const _0x2f9291 = Object.create(null, {
        preload: {
          get: () => super.preload
        }
      });
      return _0x5baa30(this, undefined, undefined, function* () {
        var _0x14bc29;
        const _0x584859 = yield _0x2f9291.preload.call(this);
        if (_0x584859 && _0x584859.success) {
          if (this.adPreloading) {
            if (!((_0x14bc29 = this.logger) === null || _0x14bc29 === undefined)) {
              _0x14bc29.debug(this.getFullName() + ": already loading an ad");
            }
            return {
              success: true,
              code: _0x26e0c2.DELIVERED
            };
          } else {
            this.rewardSlotEvent = null;
            this.skipped = true;
            window.googletag.cmd.push(() => {
              var _0x1079cd;
              var _0x393dbd;
              try {
                window.googletag.pubads().setRequestNonPersonalizedAds(this.getUserP4Consent() ? 0 : 1);
                window.googletag.pubads().setPrivacySettings({
                  limitedAds: !this.getUserP1Consent()
                });
                window.googletag.destroySlots([this.adSlot]);
                this.adSlot = window.googletag.defineOutOfPageSlot(this.getAdUnitCode(), window.googletag.enums.OutOfPageFormat.REWARDED);
                this.adSlot.addService(window.googletag.pubads());
                this.setTargeting();
                if (!((_0x1079cd = this.tracker) === null || _0x1079cd === undefined)) {
                  _0x1079cd.requestingAd(this.getAdUnitCode());
                }
                window.googletag.pubads().refresh([this.adSlot]);
              } catch (_0x40115a) {
                this.reset();
                if (!((_0x393dbd = this.logger) === null || _0x393dbd === undefined)) {
                  _0x393dbd.error({
                    success: false,
                    code: _0x122d73.ON_LOAD,
                    message: JSON.stringify(_0x40115a)
                  });
                }
                if (this.adPreloading) {
                  this.adPreloading.resolve({
                    success: false,
                    code: _0x122d73.ON_LOAD,
                    message: this.getFullName() + ": unable to send request to ad server - " + _0x40115a
                  });
                  this.adPreloading = null;
                }
              }
            });
            this.adPreloading = new _0x59c6ca();
            return this.adPreloading.promise;
          }
        } else {
          return _0x584859;
        }
      });
    }
    show() {
      return _0x5baa30(this, undefined, undefined, function* () {
        if (!this.isAdAvailable) {
          const _0x42bbb8 = yield this.preload();
          if (_0x42bbb8 && _0x42bbb8.success && this.isAdAvailable) {
            return this.showAd();
          } else {
            return _0x42bbb8;
          }
        }
        return this.showAd();
      });
    }
    reset() {
      super.reset();
      if (this.adShownPromise) {
        const _0x397c13 = {
          success: true,
          code: this.skipped ? _0x26e0c2.DELIVERED : _0x26e0c2.COMPLETED
        };
        this.adShownPromise.resolve(_0x397c13);
        this.adShownPromise = null;
      }
      if (this.adPreloading) {
        this.adPreloading.resolve({
          success: false,
          code: _0x122d73.ON_LOAD,
          message: this.getFullName() + ": unable to load ad"
        });
        this.adPreloading = null;
      }
    }
    showAd() {
      const _0x342e04 = Object.create(null, {
        show: {
          get: () => super.show
        }
      });
      return _0x5baa30(this, undefined, undefined, function* () {
        var _0x2daa5c;
        var _0x523467;
        const _0x4c0d48 = yield _0x342e04.show.call(this);
        if (_0x4c0d48 && _0x4c0d48.success) {
          if (this.adShownPromise) {
            if (!((_0x2daa5c = this.logger) === null || _0x2daa5c === undefined)) {
              _0x2daa5c.debug(this.getFullName() + ": already showing ad");
            }
            return {
              success: true,
              code: _0x26e0c2.COMPLETED
            };
          } else if (this.rewardSlotEvent) {
            if (!((_0x523467 = this.tracker) === null || _0x523467 === undefined)) {
              _0x523467.willShowAd(true, this.getAdUnitCode());
            }
            this.rewardSlotEvent.makeRewardedVisible();
            this.adShownPromise = new _0x59c6ca();
            return this.adShownPromise.promise;
          } else {
            return {
              success: false,
              code: _0x122d73.ON_SHOW,
              message: this.getFullName() + ": failed to render ad"
            };
          }
        } else {
          return _0x4c0d48;
        }
      });
    }
  }
  class _0x42d617 {
    constructor(_0x1b51ab) {
      this.wrapperElement = null;
      this.videoElement = null;
      this.adElement = null;
      this.playing = false;
      this.muted = false;
      this.videoPlayerConfig = null;
      this.onToggleCallbacks = [];
      this.onSoundToggleCallbacks = [];
      this.toggleVideoElement = null;
      this.toggleSoundElement = null;
      this.videoPlayerConfig = _0x1b51ab;
      this.createHTMLElements();
    }
    createHTMLElements() {
      this.wrapperElement = _0x1315dd.stringToHTMLElement("<div></div>");
      const _0x55d60d = this.getPlayerWidth();
      const _0x559a6c = this.getPlayerHeight();
      const _0x30fb97 = "<div><video id=\"" + this.videoPlayerConfig.id + "\" " + ("width=\"" + _0x55d60d + "\" height=\"" + _0x559a6c + "\" ") + ("style=\"width: " + _0x55d60d + "px; height: " + _0x559a6c + "px;\" playsinline></video></div>");
      const _0x1074fa = _0x1315dd.stringToHTMLElement(_0x30fb97);
      this.videoElement = _0x1074fa.firstChild;
      this.adElement = _0x1315dd.stringToHTMLElement("<div style='position: absolute; top:0; min-width: 100%; min-height: 100%;'></div>");
      if (this.videoPlayerConfig.isFullscreen) {
        this.toggleVideoElement = _0x1315dd.stringToHTMLElement(`
<button title="Play/Pause"
  style="
    position: absolute;
    left: 16px;
    bottom: 16px;
    height: 32px;
    width: 32px;
    font-size: 18px;
    background-color: rgba(255,255,255,0.9);
    border-radius: 4px;
    border: none;
    color: #333;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: 0 1px 3px rgba(0,0,0,0.2);
    transition: transform 0.2s ease;
  ">
  II
</button>
`);
        this.toggleSoundElement = _0x1315dd.stringToHTMLElement(`
<button title="Mute/Unmute"
  style="
    position: absolute;
    left: 64px;
    bottom: 16px;
    height: 32px;
    width: 32px;
    font-size: 18px;
    background-color: rgba(255,255,255,0.9);
    border-radius: 4px;
    border: none;
    color: #333;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: 0 1px 3px rgba(0,0,0,0.2);
    transition: transform 0.2s ease;
  ">
  &#x1F50A;
</button>
`);
      } else {
        this.toggleVideoElement = _0x1315dd.stringToHTMLElement("<button style=\"display: none;\"></button>");
        this.toggleSoundElement = _0x1315dd.stringToHTMLElement(`
<button title="Mute/Unmute"
  style="
    position: absolute;
    right: 8px;
    bottom: 8px;
    height: 24px;
    width: 24px;
    font-size: 14px;
    background-color: rgba(255,255,255,0.9);
    border-radius: 4px;
    border: none;
    color: #333;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: 0 1px 3px rgba(0,0,0,0.12);
    transition: transform 0.2s ease;
    left: 0;
    margin-left: 5px;
  ">
  &#x1F50A;
</button>
`);
      }
      this.toggleVideoElement.onclick = () => {
        this.toggled();
      };
      this.toggleSoundElement.onclick = () => {
        this.soundToggled();
      };
      this.wrapperElement.appendChild(_0x1074fa);
      this.wrapperElement.appendChild(this.adElement);
      this.wrapperElement.appendChild(this.toggleVideoElement);
      this.wrapperElement.appendChild(this.toggleSoundElement);
    }
    toggled() {
      if (this.playing) {
        this.toggleVideoElement.textContent = String.fromCharCode(9654);
      } else {
        this.toggleVideoElement.textContent = "II";
      }
      if (this.onToggleCallbacks && this.onToggleCallbacks.length > 0) {
        this.onToggleCallbacks.forEach(_0x2079d4 => {
          try {
            _0x2079d4(this.playing);
          } catch (_0x3fba93) {
            console.error(_0x3fba93);
          }
        });
      }
      this.playing = !this.playing;
    }
    soundToggled() {
      this.muted = !this.muted;
      this.getVideoHTMLElement().muted = this.muted;
      if (this.muted) {
        this.toggleSoundElement.innerHTML = "&#x1F507;";
      } else {
        this.toggleSoundElement.innerHTML = "&#x1F50A;";
      }
      if (this.onSoundToggleCallbacks && this.onSoundToggleCallbacks.length > 0) {
        this.onSoundToggleCallbacks.forEach(_0x187add => {
          try {
            _0x187add(this.muted);
          } catch (_0x4f2eee) {
            console.error(_0x4f2eee);
          }
        });
      }
    }
    mute() {
      this.getVideoHTMLElement().muted = true;
      this.muted = true;
      this.toggleSoundElement.innerHTML = "&#x1F507;";
      if (this.onSoundToggleCallbacks && this.onSoundToggleCallbacks.length > 0) {
        this.onSoundToggleCallbacks.forEach(_0x572562 => {
          try {
            _0x572562(true);
          } catch (_0x201017) {
            console.error(_0x201017);
          }
        });
      }
    }
    paused() {
      this.playing = false;
      this.toggleVideoElement.textContent = String.fromCharCode(9654);
    }
    resumed() {
      this.playing = true;
      this.toggleVideoElement.textContent = "II";
    }
    setVolume(_0xbdef91) {
      if (_0xbdef91 > 0) {
        this.toggleSoundElement.innerHTML = "&#x1F50A;";
        this.muted = false;
      } else {
        this.toggleSoundElement.innerHTML = "&#x1F507;";
        this.muted = true;
      }
      this.getVideoHTMLElement().muted = this.muted;
      if (this.onSoundToggleCallbacks && this.onSoundToggleCallbacks.length > 0) {
        this.onSoundToggleCallbacks.forEach(_0x35021a => {
          try {
            _0x35021a(this.muted);
          } catch (_0x45e244) {
            console.error(_0x45e244);
          }
        });
      }
    }
    resize() {
      if (this.videoElement) {
        this.videoElement.setAttribute("width", this.getPlayerWidth() + "px");
        this.videoElement.setAttribute("height", this.getPlayerHeight() + "px");
      }
    }
    getVideoHTMLElement() {
      return this.videoElement;
    }
    getAdContainerHTMLElement() {
      return this.adElement;
    }
    getHTMLWrapper() {
      return this.wrapperElement;
    }
    isPlaying() {
      return this.playing;
    }
    getPlayerWidth() {
      return this.videoPlayerConfig.width || _0x1315dd.getBrowserWidth();
    }
    getPlayerHeight() {
      return this.videoPlayerConfig.height || _0x1315dd.getBrowserHeight();
    }
    onToggle(_0x3a73de) {
      this.onToggleCallbacks.push(_0x3a73de);
    }
    onSoundToggle(_0x1a7474) {
      this.onSoundToggleCallbacks.push(_0x1a7474);
    }
  }
  class _0x2b2fc1 extends _0x271e77 {
    constructor(_0x126bb0, _0x55f86d) {
      super(_0x126bb0, _0x48cbd6.VIDEO, _0x55f86d);
      this.adsManager = null;
      this.adsLoader = null;
      this.adContainer = null;
      this.skipped = true;
      this.isIMAReady = false;
      this.adShownPromise = null;
      this.adPreloading = null;
      this.videoPlayer = null;
    }
    init(_0x20fee4, _0x4cecb0, _0x484e1d) {
      const _0x162e47 = Object.create(null, {
        init: {
          get: () => super.init
        }
      });
      return _0x5baa30(this, undefined, undefined, function* () {
        yield _0x162e47.init.call(this, _0x20fee4, _0x4cecb0, _0x484e1d);
        _0x1315dd.onIMAReady().then(() => {
          this.isIMAReady = true;
        });
        this.videoPlayer = _0x2b2fc1.buildVideoPlayer(this.adUnit, _0x52fc35.INTERSTITIAL === this.getType() || _0x52fc35.REWARD === this.getType());
        if (this.videoPlayer) {
          this.videoPlayer.onToggle(_0x3442e2 => {
            if (this.adsManager) {
              if (_0x3442e2) {
                this.adsManager.pause();
              } else {
                this.adsManager.resume();
              }
            }
          });
          this.videoPlayer.onSoundToggle(_0x4502d9 => {
            if (this.adsManager) {
              if (_0x4502d9) {
                this.adsManager.setVolume(0);
              } else {
                this.adsManager.setVolume(this.getVolume() > 0 ? this.getVolume() : _0x2b2fc1.DEFAULT_VOLUME);
              }
            }
          });
          _0x1315dd.addPrebidAdUnit(this.adUnit);
          if (this.config.pageUrl) {
            _0x1315dd.setPrebidPageUrl(this.config.pageUrl);
          }
          if (this.config.volume) {
            this.setVolume(this.config.volume);
          }
        }
      });
    }
    preload() {
      const _0x48cbb0 = Object.create(null, {
        preload: {
          get: () => super.preload
        }
      });
      return _0x5baa30(this, undefined, undefined, function* () {
        var _0x126910;
        var _0x1e01b9;
        var _0x56d38d;
        var _0x69f8bb;
        var _0x176d61;
        const _0x2067c2 = yield _0x48cbb0.preload.call(this);
        if (_0x2067c2 && _0x2067c2.success) {
          if (!this.isIMAReady) {
            if (!((_0x126910 = this.logger) === null || _0x126910 === undefined)) {
              _0x126910.debug(this.getFullName() + ": unable to preload, ima sdk isn't ready yet");
            }
            this.isAdAvailable = false;
            this.isPreloadingAd = false;
            return {
              success: false,
              code: _0x122d73.ON_LOAD,
              message: this.getFullName() + ": unable to preload, ima sdk isn't ready yet"
            };
          }
          if (!this.adsLoader && !this.initializeIMAComponents()) {
            if (!((_0x1e01b9 = this.logger) === null || _0x1e01b9 === undefined)) {
              _0x1e01b9.debug(this.getFullName() + ": unable to initialize ima");
            }
            this.isAdAvailable = false;
            this.isPreloadingAd = false;
            return {
              success: false,
              code: _0x122d73.ON_LOAD,
              message: this.getFullName() + ":unable to initialize ima"
            };
          }
          if (this.adPreloading) {
            if (!((_0x56d38d = this.logger) === null || _0x56d38d === undefined)) {
              _0x56d38d.debug(this.getFullName() + ": already loading an ad");
            }
            return {
              success: true,
              code: _0x26e0c2.DELIVERED
            };
          }
          const _0x44a877 = this.adUnit;
          const _0x20ca35 = _0x1315dd.generateUUID();
          const _0x3927ed = _0x1315dd.resolveCustomTargeting(this.config.customTargeting) || {};
          const _0x2ee816 = {
            aps: false,
            apsVideoTargeting: null,
            prebid: false
          };
          const _0x2c70ac = () => {
            if (_0x2ee816.aps && _0x2ee816.prebid) {
              _0x622e0b(_0x2ea65b());
            }
          };
          const _0x622e0b = _0x4a3fe9 => {
            try {
              const _0x31df4d = new window.google.ima.AdsRequest();
              _0x31df4d.adTagUrl = _0x4a3fe9;
              if (this.config.pageUrl) {
                _0x31df4d.pageUrl = this.config.pageUrl;
              }
              _0x31df4d.linearAdSlotWidth = this.adUnit.mediaTypes.video.playerSize[0];
              _0x31df4d.linearAdSlotHeight = this.adUnit.mediaTypes.video.playerSize[1];
              this.adsLoader.requestAds(_0x31df4d);
            } catch (_0xba65f1) {
              this.isAdAvailable = false;
              this.isPreloadingAd = false;
              this.logger.error(this.getFullName() + ": unable to send request to ad server - " + _0xba65f1);
              if (this.adPreloading) {
                this.adPreloading.resolve({
                  success: false,
                  code: _0x122d73.ON_LOAD,
                  message: this.getFullName() + ": unable to send request to ad server - " + _0xba65f1
                });
                this.adPreloading = null;
              }
            }
          };
          const _0x2ea65b = () => {
            var _0x3eaa04;
            var _0x545a86;
            var _0x5bb786;
            var _0x15ab0a;
            var _0x4e043c;
            var _0x74d8dc;
            const _0x3cb688 = _0x2ee816.apsVideoTargeting ? _0x1315dd.parseParameters(decodeURIComponent(_0x2ee816.apsVideoTargeting)) : {};
            const _0x59e279 = {
              iu: this.getAdUnitCode(),
              cust_params: Object.assign(Object.assign(Object.assign({}, _0x3927ed), {
                hb_aid: _0x20ca35
              }), _0x3cb688),
              output: "vast",
              vpmute: this.getVolume() > 0 ? 0 : 1
            };
            if ((_0x545a86 = (_0x3eaa04 = this.adUnit.mediaTypes) === null || _0x3eaa04 === undefined ? undefined : _0x3eaa04.video) === null || _0x545a86 === undefined ? undefined : _0x545a86.maxduration) {
              _0x59e279.max_ad_duration = this.adUnit.mediaTypes.video.maxduration * 1000;
            }
            if ((_0x15ab0a = (_0x5bb786 = this.adUnit.mediaTypes) === null || _0x5bb786 === undefined ? undefined : _0x5bb786.video) === null || _0x15ab0a === undefined ? undefined : _0x15ab0a.minduration) {
              _0x59e279.min_ad_duration = this.adUnit.mediaTypes.video.minduration * 1000;
            }
            if (!this.adUnit.mediaTypes.video.startdelay) {
              this.adUnit.mediaTypes.video.startdelay = 0;
            }
            if (this.config.pageUrl) {
              _0x59e279.url = this.config.pageUrl;
              _0x59e279.description_url = this.config.pageUrl;
            }
            let _0x268546 = window.pbjs.adServers.dfp.buildVideoUrl({
              adUnit: _0x44a877,
              params: _0x59e279
            });
            if (!this.getUserP1Consent()) {
              _0x268546 += "&ltd=1";
            }
            if (!this.getUserP4Consent()) {
              _0x268546 += "&npa=1";
            }
            if (this.getDeviceIdTargeting()) {
              _0x268546 += "&" + _0x1315dd.toUrlQueryParameters(this.getDeviceIdTargeting());
            }
            if (this.ppid) {
              _0x268546 += "&ppid=" + this.ppid;
            }
            _0x268546 += "&ad_type=" + (((_0x74d8dc = (_0x4e043c = this.adUnit.mediaTypes) === null || _0x4e043c === undefined ? undefined : _0x4e043c.video) === null || _0x74d8dc === undefined ? undefined : _0x74d8dc.skip) ? "video" : "standardvideo");
            return _0x268546;
          };
          const _0x4265c1 = () => {
            if (!(this.adUnit && this.adUnit.bids && this.adUnit.bids.length && window.pbjs)) {
              _0x2ee816.prebid = true;
              _0x2c70ac();
              return;
            }
            window.pbjs.que.push(() => {
              const _0x24f51e = {
                auctionId: _0x20ca35,
                adUnits: [_0x44a877],
                timeout: this.adUnit.timeout,
                bidsBackHandler: () => {
                  window.pbjs.initAdserverSet = true;
                  _0x2ee816.prebid = true;
                  _0x2c70ac();
                }
              };
              try {
                window.pbjs.requestBids(_0x24f51e);
              } catch (_0x25d1db) {
                _0x2ee816.prebid = true;
                _0x2c70ac();
              }
            });
          };
          const _0x910b69 = () => {
            if (!(this.adUnit && this.adUnit.uam && window.apstag)) {
              _0x2ee816.aps = true;
              _0x2c70ac();
              return;
            }
            const _0x38ee65 = _0x1315dd.adUnitPath2NetworkAndCode(this.getAdUnitCode());
            if (!_0x38ee65) {
              _0x2ee816.aps = true;
              _0x2c70ac();
              return;
            }
            const _0x486456 = {
              slotID: (_0x446d1f = _0x38ee65.code, _0x446d1f.replaceAll("_", "").replaceAll("-", "_")),
              slotName: _0x38ee65.code,
              mediaType: "video"
            };
            var _0x446d1f;
            window.apstag.fetchBids({
              slots: [_0x486456],
              timeout: this.adUnit.timeout
            }, _0x20b9ea => {
              _0x2ee816.aps = true;
              if (_0x20b9ea && _0x20b9ea[0]) {
                _0x2ee816.apsVideoTargeting = _0x20b9ea[0].encodedQsParams;
              }
              _0x2c70ac();
            });
          };
          try {
            if (!((_0x69f8bb = this.tracker) === null || _0x69f8bb === undefined)) {
              _0x69f8bb.requestingAd(this.getAdUnitCode(), {
                hb_aid: _0x20ca35
              });
            }
            _0x4265c1();
            _0x910b69();
          } catch (_0xd80637) {
            if (!((_0x176d61 = this.logger) === null || _0x176d61 === undefined)) {
              _0x176d61.error(_0xd80637);
            }
            return;
          }
          this.adPreloading = new _0x59c6ca();
          return this.adPreloading.promise;
        }
        return _0x2067c2;
      });
    }
    show() {
      const _0x4fe978 = Object.create(null, {
        show: {
          get: () => super.show
        }
      });
      return _0x5baa30(this, undefined, undefined, function* () {
        var _0x3324de;
        var _0x4fe811;
        const _0x58d9db = yield _0x4fe978.show.call(this);
        if (_0x58d9db && _0x58d9db.success) {
          if (this.adShownPromise) {
            if (!((_0x3324de = this.logger) === null || _0x3324de === undefined)) {
              _0x3324de.debug(this.getFullName() + ": already showing ad");
            }
            return {
              success: true,
              code: _0x26e0c2.COMPLETED
            };
          } else {
            if (!((_0x4fe811 = this.tracker) === null || _0x4fe811 === undefined)) {
              _0x4fe811.willShowAd(true, this.getAdUnitCode(), this.getAdSlotParams());
            }
            this.adsManager.setVolume(this.getVolume());
            this.videoPlayer.setVolume(this.getVolume());
            this.adsManager.start();
            this.adShownPromise = new _0x59c6ca();
            return this.adShownPromise.promise;
          }
        } else {
          return _0x58d9db;
        }
      });
    }
    reset() {
      super.reset();
      if (this.adsManager) {
        this.adsManager.destroy();
      }
      if (this.videoPlayer) {
        this.videoPlayer.resize();
      }
      if (this.adShownPromise) {
        const _0x12596d = {
          success: true,
          code: this.skipped ? _0x26e0c2.DELIVERED : _0x26e0c2.COMPLETED
        };
        this.adShownPromise.resolve(_0x12596d);
        this.adShownPromise = null;
      }
      if (this.adPreloading) {
        const _0x200c94 = {
          success: false,
          code: _0x122d73.ON_LOAD,
          message: this.getFullName() + ": unable to preload ad"
        };
        this.adPreloading.resolve(_0x200c94);
        this.adPreloading = null;
      }
    }
    canPreload() {
      return true;
    }
    isReady() {
      return _0x1315dd.isIMAPresent();
    }
    isShowingAd() {
      return !!this.adShownPromise;
    }
    initializeIMAComponents() {
      var _0x154e25;
      var _0x208a86;
      if (!_0x1315dd.isIMAPresent()) {
        if (!((_0x154e25 = this.logger) === null || _0x154e25 === undefined)) {
          _0x154e25.debug(this.getFullName() + ": ima sdk not present");
        }
        return false;
      }
      try {
        window.google.ima.settings.setDisableCustomPlaybackForIOS10Plus(true);
        this.adContainer = new window.google.ima.AdDisplayContainer(this.videoPlayer.getAdContainerHTMLElement(), this.videoPlayer.getVideoHTMLElement());
        this.adContainer.initialize();
        this.adsLoader = new window.google.ima.AdsLoader(this.adContainer);
        this.adsLoader.getSettings().setVpaidMode(window.google.ima.ImaSdkSettings.VpaidMode.INSECURE);
        this.adsLoader.addEventListener(window.google.ima.AdsManagerLoadedEvent.Type.ADS_MANAGER_LOADED, _0x569827 => {
          const _0x4fadd7 = new window.google.ima.AdsRenderingSettings();
          _0x4fadd7.restoreCustomPlaybackStateOnAdBreakComplete = true;
          this.adsManager = _0x569827.getAdsManager(this.videoPlayer.getVideoHTMLElement(), _0x4fadd7);
          this.adsManager.addEventListener(window.google.ima.AdErrorEvent.Type.AD_ERROR, this.handleIMAError.bind(this));
          this.adsManager.addEventListener(window.google.ima.AdEvent.Type.ALL_ADS_COMPLETED, this.handleIMAEvent.bind(this));
          this.adsManager.addEventListener(window.google.ima.AdEvent.Type.LOADED, this.handleIMAEvent.bind(this));
          this.adsManager.addEventListener(window.google.ima.AdEvent.Type.COMPLETE, this.handleIMAEvent.bind(this));
          this.adsManager.addEventListener(window.google.ima.AdEvent.Type.SKIPPED, this.handleIMAEvent.bind(this));
          this.adsManager.addEventListener(window.google.ima.AdEvent.Type.STARTED, this.handleIMAEvent.bind(this));
          this.adsManager.addEventListener(window.google.ima.AdEvent.Type.CLICK, this.handleIMAEvent.bind(this));
          this.adsManager.addEventListener(window.google.ima.AdEvent.Type.PAUSED, this.handleIMAEvent.bind(this));
          this.adsManager.addEventListener(window.google.ima.AdEvent.Type.RESUMED, this.handleIMAEvent.bind(this));
          try {
            this.adsManager.init(this.videoPlayer.getPlayerWidth(), this.videoPlayer.getPlayerHeight(), window.google.ima.ViewMode.FULLSCREEN);
          } catch (_0x214444) {
            this.handleIMAError(_0x214444);
          }
        }, false);
        this.adsLoader.addEventListener(window.google.ima.AdErrorEvent.Type.AD_ERROR, this.handleIMAError.bind(this), false);
        return true;
      } catch (_0x386c5f) {
        if (!((_0x208a86 = this.logger) === null || _0x208a86 === undefined)) {
          _0x208a86.debug(this.getFullName() + ": unable to initialize ima components - " + _0x386c5f);
        }
      }
      return false;
    }
    handleIMAEvent(_0x40613a) {
      var _0x3b4852;
      var _0x1c74df;
      switch (_0x40613a.type) {
        case window.google.ima.AdEvent.Type.LOADED:
          if (!((_0x3b4852 = this.logger) === null || _0x3b4852 === undefined)) {
            _0x3b4852.debug(this.getFullName() + ": ad filled");
          }
          this.isAdAvailable = true;
          this.isPreloadingAd = false;
          if (!((_0x1c74df = this.tracker) === null || _0x1c74df === undefined)) {
            _0x1c74df.receivedAdResponse(_0x483bc9.SUCCESS, this.getAdUnitCode(), this.getAdSlotParams());
          }
          this.adsLoader.__cad = _0x40613a.getAd();
          if (_0x40613a.getAd() && _0x40613a.getAd().getAdId()) {
            window.google.ima.__lads = window.google.ima.__lads || [];
            window.google.ima.__lads.push(_0x40613a.getAdData());
            if (window.google.ima.__lads.length > 20) {
              window.google.ima.__lads = window.google.ima.__lads.slice(window.google.ima.__lads.length - 20);
            }
          }
          if (this.adPreloading) {
            this.adPreloading.resolve({
              success: true,
              code: _0x26e0c2.DELIVERED
            });
            this.adPreloading = null;
          }
          break;
        case window.google.ima.AdEvent.Type.SKIPPED:
          this.skipped = true;
          this.adClosed();
          break;
        case window.google.ima.AdEvent.Type.COMPLETE:
          this.skipped = false;
          this.adClosed();
          break;
        case window.google.ima.AdEvent.Type.STARTED:
          this.skipped = true;
          this.videoPlayer.resumed();
          break;
        case window.google.ima.AdEvent.Type.RESUMED:
          this.videoPlayer.resumed();
          break;
        case window.google.ima.AdEvent.Type.PAUSED:
          this.videoPlayer.paused();
          break;
        case window.google.ima.AdEvent.Type.CLICK:
          if (this.adsManager && this.videoPlayer && this.videoPlayer.isPlaying()) {
            this.videoPlayer.paused();
            this.adsManager.pause();
          }
      }
    }
    handleIMAError(_0x367c09) {
      var _0x5dd13d;
      var _0x2662f6;
      if (_0x367c09 && _0x367c09.getError && _0x367c09.getError().getErrorCode && _0x367c09.getError().getErrorCode() === 1009) {
        if (!((_0x5dd13d = this.tracker) === null || _0x5dd13d === undefined)) {
          _0x5dd13d.receivedAdResponse(_0x483bc9.NOFILL, this.getAdUnitCode(), this.getAdSlotParams());
        }
        this.skipped = true;
        this.isAdAvailable = false;
        this.isPreloadingAd = false;
        if (this.adPreloading) {
          this.adPreloading.resolve({
            success: false,
            code: _0x122d73.ON_LOAD,
            message: this.getFullName() + ": unable to preload ad"
          });
          this.adPreloading = null;
        }
        return;
      }
      if (this.adShownPromise) {
        const _0x3f0445 = {
          success: false,
          code: _0x122d73.ON_SHOW,
          message: "" + (_0x367c09 && _0x367c09.getError && _0x367c09.getError().getMessage ? _0x367c09.getError().getMessage() : "")
        };
        this.adShownPromise.resolve(_0x3f0445);
        this.adShownPromise = null;
      }
      if (this.adPreloading) {
        this.adPreloading.resolve({
          success: false,
          code: _0x122d73.ON_LOAD,
          message: this.getFullName() + ": unable to preload ad"
        });
        this.adPreloading = null;
      }
      if (!((_0x2662f6 = this.logger) === null || _0x2662f6 === undefined)) {
        _0x2662f6.error(this.getFullName() + ": " + (_0x367c09 && _0x367c09.getError && _0x367c09.getError().getMessage ? _0x367c09.getError().getMessage() : "unknown error"));
      }
      this.reset();
    }
    adClosed() {
      var _0x41aae3;
      var _0x18d650;
      if (!((_0x41aae3 = this.logger) === null || _0x41aae3 === undefined)) {
        _0x41aae3.debug(this.getFullName() + ": ad closed, skipped? " + this.skipped);
      }
      if (!((_0x18d650 = this.tracker) === null || _0x18d650 === undefined)) {
        _0x18d650.finishedAd(this.skipped ? _0x181c0d.SKIPPED : _0x181c0d.SUCCESS, this.getAdUnitCode(), this.getAdSlotParams());
      }
      this.isAdAvailable = false;
      this.videoPlayer.paused();
      if (this.adShownPromise) {
        const _0x111faf = {
          success: true,
          code: this.skipped ? _0x26e0c2.DELIVERED : _0x26e0c2.COMPLETED
        };
        this.adShownPromise.resolve(_0x111faf);
        this.adShownPromise = null;
      }
    }
    getAdSlotParams() {
      if (this.adsLoader && this.adsLoader.params) {
        return this.adsLoader.params;
      } else {
        return {};
      }
    }
    static buildVideoPlayer(_0x3322a9, _0x4fca33) {
      const _0x45c8c1 = {
        id: _0x1315dd.isFunction(_0x3322a9.code) ? _0x3322a9.code() : _0x3322a9.code,
        isFullscreen: _0x4fca33
      };
      if (!_0x4fca33) {
        _0x45c8c1.width = _0x3322a9.mediaTypes.video.playerSize[0];
        _0x45c8c1.height = _0x3322a9.mediaTypes.video.playerSize[1];
      }
      return new _0x42d617(_0x45c8c1);
    }
  }
  _0x2b2fc1.DEFAULT_VOLUME = 0.5;
  class _0x5e44ef {
    constructor(_0x3fbec3) {
      this.contentElement = null;
      this.modalElement = null;
      this.createHTMLElements(_0x3fbec3);
    }
    createHTMLElements(_0x374ed8) {
      const _0x179db9 = document.createElement("div");
      _0x179db9.style.cssText = "visibility: hidden; position: fixed;top: 0;left: 0;height: 100%;width: 100%;z-index: 9223372036854775807;background-color: rgba(0,0,0,0.85);";
      const _0x26a76d = document.createElement("div");
      _0x179db9.appendChild(_0x26a76d);
      _0x26a76d.style.cssText = "display: flex; align-items: center; justify-content: center; height: 100%; width: 100%; margin: 0; padding: 0; outline: none;";
      const _0x17b945 = document.createElement("div");
      _0x26a76d.appendChild(_0x17b945);
      _0x17b945.style.cssText = "position: relative; margin: 0; outline: none; background-color: #fff; box-shadow: 0px 8px 12px rgb(60 64 67 / 15%), 0px 4px 4px rgb(60 64 67 / 30%); border-radius: 5px;";
      if (_0x374ed8) {
        const _0x22a8f0 = document.createElement("div");
        _0x17b945.appendChild(_0x22a8f0);
        _0x22a8f0.style.cssText = "width: 100%; display: table; height: 24px; background-color: #fff; margin: 0; padding: 0; outline: none;border-radius: 5px 5px 0px 0px;";
        const _0x2851da = document.createElement("div");
        _0x22a8f0.appendChild(_0x2851da);
        _0x2851da.style.cssText = "float: left; display: table; transition: opacity 1s, background .75s; -webkit-transition: opacity 1s, background .75s; -moz-transition: opacity 1s, background .75s; -o-transition: opacity 1s, background .75s; background: transparent; color: #fff; padding-bottom: 10px; padding-top: 10px;";
        _0x2851da.innerHTML = "<div style=\"font-size: 14px; font-weight: 700; font-family: 'Roboto', arial, sans-serif; color: #202124; position: relative; height: 25px; padding: 2px 16px 0; float: left; display: table-cell; vertical-align: middle; text-align: center; line-height: 25px;\"> Ad </div>";
        const _0x31cad4 = document.createElement("div");
        _0x22a8f0.appendChild(_0x31cad4);
        _0x31cad4.style.cssText = "color: black; opacity: 0.95; padding: 12px 20px 0; float: right; display: table-cell;vertical-align: middle;";
        _0x31cad4.setAttribute("aria-label", "Close");
        _0x31cad4.setAttribute("tabindex", "1");
        _0x31cad4.innerHTML = "<div style=\"cursor: pointer; display: table-cell;vertical-align: middle;\"><svg viewBox=\"0 0 48 48\" fill=\"#5F6368\" style=\"height: 1.5em; width: 1.5em; margin-left: -0.5em; margin-right: -0.5em; vertical-align: middle; padding-bottom: 1px;\"><path d=\"M38 12.83L35.17 10 24 21.17 12.83 10 10 12.83 21.17 24 10 35.17 12.83 38 24 26.83 35.17 38 38 35.17 26.83 24z\"></path><path d=\"M0 0h48v48H0z\" fill=\"none\"></path></svg></div>";
        _0x31cad4.onclick = this.close.bind(this);
      }
      const _0x300c28 = document.createElement("div");
      _0x17b945.appendChild(_0x300c28);
      _0x300c28.style.cssText = "transition: opacity 1s; -webkit-transition: opacity 1s; position: relative; margin: 0; padding: 0; outline: none; font-size: 0";
      this.contentElement = _0x300c28;
      this.modalElement = _0x179db9;
      document.body.appendChild(this.modalElement);
    }
    close() {
      this.modalElement.style.visibility = "hidden";
    }
    show() {
      this.modalElement.style.visibility = "visible";
    }
    addContent(_0x1d2347) {
      const _0x3d7102 = document.createElement("div");
      _0x3d7102.appendChild(_0x1d2347);
      const _0x3ba216 = _0x3d7102.firstChild;
      this.contentElement.appendChild(_0x3ba216);
      return _0x3ba216;
    }
    deleteCreativeContent() {
      this.contentElement.innerHTML = "";
    }
  }
  class _0x70d309 extends _0x2b2fc1 {
    constructor(_0x124626) {
      super(_0x52fc35.INTERSTITIAL, _0x124626);
      this.modal = null;
    }
    init(_0x1ce899, _0x47dc08, _0x1fd850) {
      const _0x5f5d5d = Object.create(null, {
        init: {
          get: () => super.init
        }
      });
      return _0x5baa30(this, undefined, undefined, function* () {
        yield _0x5f5d5d.init.call(this, _0x1ce899, _0x47dc08, _0x1fd850);
        this.modal = new _0x5e44ef(false);
        this.modal.addContent(this.videoPlayer.getHTMLWrapper());
      });
    }
    show() {
      return _0x5baa30(this, undefined, undefined, function* () {
        if (!this.isAdAvailable) {
          const _0x40fbb0 = yield this.preload();
          if (_0x40fbb0.success && this.isAdAvailable) {
            return this.showAd();
          } else {
            return _0x40fbb0;
          }
        }
        return this.showAd();
      });
    }
    showAd() {
      const _0x41645e = Object.create(null, {
        show: {
          get: () => super.show
        }
      });
      return _0x5baa30(this, undefined, undefined, function* () {
        if (this.isAdAvailable && !this.isShowingAd()) {
          this.modal.show();
        }
        try {
          return yield _0x41645e.show.call(this);
        } finally {
          if (!this.isShowingAd()) {
            this.modal.close();
          }
        }
      });
    }
    reset() {
      super.reset();
      if (this.modal) {
        this.modal.close();
      }
    }
  }
  class _0x53932c extends _0x2b2fc1 {
    constructor(_0x412667) {
      super(_0x52fc35.REWARD, _0x412667);
      this.modal = null;
    }
    init(_0x188dcf, _0xea53c2, _0x1d87c) {
      const _0x4b4074 = Object.create(null, {
        init: {
          get: () => super.init
        }
      });
      return _0x5baa30(this, undefined, undefined, function* () {
        yield _0x4b4074.init.call(this, _0x188dcf, _0xea53c2, _0x1d87c);
        this.modal = new _0x5e44ef(false);
        this.modal.addContent(this.videoPlayer.getHTMLWrapper());
      });
    }
    show() {
      return _0x5baa30(this, undefined, undefined, function* () {
        if (!this.isAdAvailable) {
          const _0x25a2ad = yield this.preload();
          if (_0x25a2ad.success && this.isAdAvailable) {
            return this.showAd();
          } else {
            return _0x25a2ad;
          }
        }
        return this.showAd();
      });
    }
    showAd() {
      const _0x2391ed = Object.create(null, {
        show: {
          get: () => super.show
        }
      });
      return _0x5baa30(this, undefined, undefined, function* () {
        if (this.isAdAvailable && !this.isShowingAd()) {
          this.modal.show();
        }
        try {
          return yield _0x2391ed.show.call(this);
        } finally {
          if (!this.isShowingAd()) {
            this.modal.close();
          }
        }
      });
    }
    reset() {
      super.reset();
      if (this.modal) {
        this.modal.close();
      }
    }
  }
  class _0x62f671 extends _0x2b2fc1 {
    constructor(_0x5ec2fd, _0x297f85) {
      super(_0x52fc35.BANNER, _0x297f85);
      this.videoContainer = null;
      this.isHTMLElementVisible = false;
      this.element = _0x5ec2fd;
    }
    updateVisibility(_0x472884) {
      this.isHTMLElementVisible = _0x472884;
      this.updatePlaybackBasedOnVisibility();
    }
    updatePlaybackBasedOnVisibility() {
      const _0x4f3a8b = _0x1315dd.isTabVisible();
      const _0x2f917f = this.isHTMLElementVisible && _0x4f3a8b;
      if (this.adsManager) {
        if (_0x2f917f) {
          this.adsManager.resume();
        } else {
          this.adsManager.pause();
        }
      }
    }
    init(_0x5afc4e, _0x239eff, _0x30b7cc) {
      const _0x12c862 = Object.create(null, {
        init: {
          get: () => super.init
        }
      });
      return _0x5baa30(this, undefined, undefined, function* () {
        yield _0x12c862.init.call(this, _0x5afc4e, _0x239eff, _0x30b7cc);
        if (this.element && this.videoPlayer) {
          this.initHTMLElements();
        }
        document.addEventListener("visibilitychange", () => {
          this.updatePlaybackBasedOnVisibility();
        });
      });
    }
    static createFromBannerAdUnit(_0x45d541) {
      var _0x29cccf;
      var _0x323767;
      const _0x4c4bae = ((_0x323767 = (_0x29cccf = _0x45d541.mediaTypes) === null || _0x29cccf === undefined ? undefined : _0x29cccf.banner) === null || _0x323767 === undefined ? undefined : _0x323767.sizes) || [];
      const _0x3d8e36 = _0x4c4bae.reduce((_0x46c8b2, _0x3bfddd) => {
        const _0x1fc99e = _0x46c8b2[0] * _0x46c8b2[1];
        if (_0x3bfddd[0] * _0x3bfddd[1] > _0x1fc99e) {
          return _0x3bfddd;
        } else {
          return _0x46c8b2;
        }
      }, _0x4c4bae[0]);
      return {
        code: _0x45d541.code.toString().includes("-display-") ? _0x45d541.code.toString().replace("-display-", "-video-") : _0x45d541.code + "-video",
        timeout: _0x45d541.timeout,
        mediaTypes: {
          video: {
            placement: 5,
            context: "outstream",
            playerSize: _0x3d8e36,
            mimes: ["video/mp4", "video/3gpp", "video/mpeg", "video/ogg", "video/quicktime", "video/webm", "application/javascript"],
            protocols: [2, 3, 5, 6, 7, 8],
            playbackmethod: [1, 2],
            skip: 0,
            startdelay: 0,
            linearity: 1,
            api: [1, 2]
          }
        },
        bids: []
      };
    }
    show() {
      return _0x5baa30(this, undefined, undefined, function* () {
        if (!this.isAdAvailable) {
          this.videoPlayer.mute();
          this.setVolume(0);
          const _0x5483fb = yield this.preload();
          if (_0x5483fb.success && this.isAdAvailable) {
            return this.showAd();
          } else {
            return _0x5483fb;
          }
        }
        return this.showAd();
      });
    }
    showAd() {
      const _0x59e2be = Object.create(null, {
        show: {
          get: () => super.show
        }
      });
      return _0x5baa30(this, undefined, undefined, function* () {
        if (this.isAdAvailable && !this.isShowingAd()) {
          this.showVideoPlayer();
        }
        try {
          return yield _0x59e2be.show.call(this);
        } finally {
          if (!this.isShowingAd()) {
            this.hideVideoPlayer();
            this.setVolume(_0x62f671.DEFAULT_VOLUME);
          }
        }
      });
    }
    showVideoPlayer() {
      if (this.videoContainer) {
        this.videoContainer.style.visibility = "visible";
      }
    }
    hideVideoPlayer() {
      if (this.videoContainer) {
        this.videoContainer.style.visibility = "hidden";
      }
    }
    initHTMLElements() {
      this.videoContainer = document.createElement("div");
      this.videoContainer.style.position = "absolute";
      this.videoContainer.style.top = "0";
      this.videoContainer.style.left = "0";
      this.videoContainer.style.right = "0";
      this.videoContainer.style.bottom = "0";
      this.videoContainer.style.overflow = "hidden";
      this.videoContainer.style.zIndex = "999";
      this.videoContainer.style.visibility = "hidden";
      const _0x51fef1 = this.videoPlayer.getHTMLWrapper();
      _0x51fef1.style.position = "relative";
      _0x51fef1.style.width = "100%";
      _0x51fef1.style.height = "100%";
      _0x51fef1.style.display = "flex";
      _0x51fef1.style.alignItems = "center";
      _0x51fef1.style.justifyContent = "center";
      _0x51fef1.style.overflow = "hidden";
      const _0xbe65dc = this.videoPlayer.getVideoHTMLElement();
      _0xbe65dc.style.width = "100%";
      _0xbe65dc.style.height = "100%";
      _0xbe65dc.style.objectFit = "contain";
      this.videoContainer.appendChild(_0x51fef1);
      this.element.appendChild(this.videoContainer);
    }
    reset() {
      super.reset();
    }
  }
  class _0x3723ad extends _0x271e77 {
    constructor(_0x17e090) {
      super(_0x52fc35.BANNER, _0x48cbd6.DISPLAY, _0x17e090);
      this.banners = [];
    }
    init(_0x24c0a6, _0x59f3e3, _0x4298c9) {
      const _0x7230ba = Object.create(null, {
        init: {
          get: () => super.init
        }
      });
      return _0x5baa30(this, undefined, undefined, function* () {
        yield _0x7230ba.init.call(this, _0x24c0a6, _0x59f3e3, _0x4298c9);
        if (this.adUnits) {
          const _0x5bcf35 = [];
          this.adUnits.forEach(_0x1e09cd => {
            const _0x30e7cb = JSON.parse(JSON.stringify(_0x24c0a6));
            _0x30e7cb.config.adUnit = _0x1e09cd;
            _0x30e7cb.config.adUnits = null;
            const _0x17ea87 = new _0xea7cca(_0x1315dd.isTabVisible, this.logger);
            _0x5bcf35.push(_0x17ea87.init(_0x30e7cb, this.controls, this.tracker).then(() => {
              this.banners.push(_0x17ea87);
            }, _0x965ff6 => {
              var _0x1fe3c6;
              if (!((_0x1fe3c6 = this.logger) === null || _0x1fe3c6 === undefined)) {
                _0x1fe3c6.error(_0x965ff6);
              }
            }));
          });
          yield Promise.allSettled(_0x5bcf35).then(() => this.isAdAvailable = true);
          this.scheduleNextRefresh();
        }
      });
    }
    show() {
      const _0xdcf084 = Object.create(null, {
        show: {
          get: () => super.show
        }
      });
      return _0x5baa30(this, undefined, undefined, function* () {
        const _0x6cb387 = yield _0xdcf084.show.call(this);
        if (_0x6cb387.success && this.banners) {
          try {
            const _0x2fb2f6 = this.banners.filter(_0x5ecc56 => _0x5ecc56.isVisible() && _0x5ecc56.isRefreshable());
            const _0xfc9c62 = _0x2fb2f6.map(_0x1fbd85 => _0x1fbd85.show());
            this.auction(_0x2fb2f6);
            yield Promise.all(_0xfc9c62);
          } catch (_0xcd0271) {
            return {
              success: false,
              code: _0x122d73.ON_SHOW,
              message: _0xcd0271.message
            };
          }
        }
        return _0x6cb387;
      });
    }
    auction(_0x1f89af) {
      var _0x5b0e24;
      var _0x18603f;
      if (!_0x1f89af || _0x1f89af.length < 1) {
        return;
      }
      const _0x9a2cd5 = {
        aps: false,
        prebid: false
      };
      const _0x21f6ac = Math.max(..._0x1f89af.map(_0x150c24 => _0x150c24.getAdUnit().timeout));
      const _0x4dab63 = _0x1315dd.generateUUID();
      const _0x57ede1 = () => {
        if (_0x9a2cd5.aps && _0x9a2cd5.prebid) {
          _0x133721();
        }
      };
      const _0x133721 = () => {
        window.googletag.cmd.push(() => {
          var _0x493f78;
          window.googletag.pubads().setRequestNonPersonalizedAds(this.getUserP4Consent() ? 0 : 1);
          window.googletag.pubads().setPrivacySettings({
            limitedAds: !this.getUserP1Consent()
          });
          _0x1f89af.forEach(_0x2755a1 => _0x2755a1.setTargeting({
            hb_aid: _0x4dab63
          }));
          const _0x10567a = _0x1f89af.map(_0x25a1dc => _0x25a1dc.getAdSlot()).filter(_0xca56a5 => _0xca56a5);
          try {
            window.googletag.pubads().refresh(_0x10567a);
          } catch (_0x36d716) {
            _0x1f89af.forEach(_0x1ec422 => _0x1ec422.reset());
            if (!((_0x493f78 = this.logger) === null || _0x493f78 === undefined)) {
              _0x493f78.error(_0x36d716);
            }
            return;
          }
        });
      };
      try {
        if (!((_0x5b0e24 = this.tracker) === null || _0x5b0e24 === undefined)) {
          _0x5b0e24.requestingAd(this.getFullName(), {
            hb_aid: _0x4dab63
          });
        }
        (() => {
          const _0x1994b4 = _0x1f89af.map(_0x2f55ba => _0x2f55ba.getAdUnit()).filter(_0x47221d => _0x47221d && _0x47221d.bids && _0x47221d.bids.length);
          if (!(_0x1994b4 && _0x1994b4.length && window.pbjs)) {
            _0x9a2cd5.prebid = true;
            _0x57ede1();
            return;
          }
          window.pbjs.que.push(() => {
            const _0x556f2b = {
              auctionId: _0x4dab63,
              adUnits: _0x1994b4,
              timeout: _0x21f6ac,
              bidsBackHandler: () => {
                window.googletag.cmd.push(function () {
                  window.pbjs.initAdserverSet = true;
                  _0x9a2cd5.prebid = true;
                  window.pbjs.setTargetingForGPTAsync();
                  _0x57ede1();
                });
              }
            };
            try {
              window.pbjs.requestBids(_0x556f2b);
            } catch (_0x2c9e15) {
              _0x9a2cd5.prebid = true;
              _0x57ede1();
            }
          });
        })();
        (() => {
          const _0x151e83 = _0x1f89af.map(_0x481fa5 => _0x481fa5.getAdUnit()).filter(_0x44137c => _0x44137c && _0x44137c.uam).map(_0x4338ef => _0x1315dd.toUAMAdUnit(_0x4338ef));
          if (!(_0x151e83 && _0x151e83.length && window.apstag)) {
            _0x9a2cd5.aps = true;
            _0x57ede1();
            return;
          }
          window.apstag.fetchBids({
            slots: _0x151e83,
            timeout: _0x21f6ac
          }, () => {
            window.googletag.cmd.push(function () {
              window.apstag.setDisplayBids();
              _0x9a2cd5.aps = true;
              _0x57ede1();
            });
          });
        })();
      } catch (_0x38e6ad) {
        if (!((_0x18603f = this.logger) === null || _0x18603f === undefined)) {
          _0x18603f.error(_0x38e6ad);
        }
        return;
      }
    }
    scheduleNextRefresh() {
      const _0x3c9b87 = Math.max(Math.min(...this.banners.map(_0x49cb5b => _0x49cb5b.getLastRefresh() ? _0x49cb5b.getRefreshInterval() - (Date.now() - _0x49cb5b.getLastRefresh().getTime()) : 0)), 250);
      // TOLOOK
      setTimeout(() => {
        window.pbjs.que.push(() => {
          window.googletag.cmd.push(() => {
            this.show().finally(() => this.scheduleNextRefresh());
          });
        });
      }, _0x3c9b87);
    }
    canPreload() {
      return false;
    }
    reset() {}
    isReady() {
      return true;
    }
  }
  class _0xea7cca extends _0x45ec20 {
    constructor(_0x14b683, _0x5a0acb) {
      super(_0x52fc35.BANNER, _0x5a0acb);
      this.adShownPromise = null;
      this.refreshInterval = 31000;
      this.visibilityThreshold = 0.5;
      this.lastRefreshed = null;
      this.impressionViewed = false;
      this.visible = false;
      this.visibilityObserver = null;
      this.visibilityInterval = null;
      this.videoAdProvider = null;
      this.lastRefreshedVideo = null;
      this.isTryingVideo = false;
      this.isTabVisible = _0x14b683;
    }
    init(_0x12edda, _0x31e549, _0x1d6841) {
      const _0x5e1f7a = Object.create(null, {
        init: {
          get: () => super.init
        }
      });
      return _0x5baa30(this, undefined, undefined, function* () {
        var _0x34f707;
        var _0x35881c;
        var _0x14656b;
        yield _0x5e1f7a.init.call(this, _0x12edda, _0x31e549, _0x1d6841);
        if (this.adUnit.refresh) {
          this.refreshInterval = this.adUnit.refresh;
        }
        if (this.adUnit.visibilityThreshold && this.adUnit.visibilityThreshold > 0) {
          this.visibilityThreshold = this.adUnit.visibilityThreshold;
        }
        if (((_0x34f707 = this.adUnit) === null || _0x34f707 === undefined ? undefined : _0x34f707.enableVideo) && !((_0x14656b = (_0x35881c = this.adUnit) === null || _0x35881c === undefined ? undefined : _0x35881c.mediaTypes) === null || _0x14656b === undefined ? undefined : _0x14656b.video)) {
          const _0x4397a1 = _0x62f671.createFromBannerAdUnit(this.adUnit);
          const _0x5e832d = JSON.parse(JSON.stringify(_0x12edda));
          _0x5e832d.config.adUnit = _0x4397a1;
          _0x5e832d.config.adUnits = null;
          this.videoAdProvider = new _0x62f671(this.getAdSlotHTMLElement(), this.logger);
          yield this.videoAdProvider.init(_0x5e832d, _0x31e549, _0x1d6841).catch(_0x194ea6 => {
            var _0x13f7ed;
            if (!((_0x13f7ed = this.logger) === null || _0x13f7ed === undefined)) {
              _0x13f7ed.error("Failed to initialize video ad provider: " + _0x194ea6);
            }
            this.videoAdProvider = null;
          });
        }
        this.initVisibilityObserver();
        window.googletag.cmd.push(() => {
          var _0x112ea3;
          var _0xb70fb2;
          window.googletag.pubads().addEventListener("slotRenderEnded", _0x4a57d3 => {
            var _0x74c88;
            if (this.adSlot === _0x4a57d3.slot) {
              if (this.adShownPromise) {
                const _0x22872b = {
                  success: true,
                  code: _0x26e0c2.COMPLETED
                };
                this.adShownPromise.resolve(_0x22872b);
                this.adShownPromise = null;
                this.impressionViewed = !!_0x4a57d3.isEmpty;
              }
              if (!((_0x74c88 = this.tracker) === null || _0x74c88 === undefined)) {
                _0x74c88.finishedAd(_0x4a57d3.isEmpty ? _0x181c0d.NOFILL : _0x181c0d.SUCCESS, this.getAdUnitCode(), this.getAdSlotTargeting());
              }
            }
          });
          window.googletag.pubads().addEventListener("impressionViewable", _0xd0836 => {
            if (this.adSlot === _0xd0836.slot) {
              this.impressionViewed = true;
            }
          });
          this.adSlot = window.googletag.defineSlot(this.getAdUnitCode(), (_0xb70fb2 = (_0x112ea3 = this.adUnit.mediaTypes) === null || _0x112ea3 === undefined ? undefined : _0x112ea3.banner) === null || _0xb70fb2 === undefined ? undefined : _0xb70fb2.sizes, this.getHTMLAdContainerID());
          if (!this.adSlot) {
            this.isInitialized = false;
            throw new Error("unable to create banner ad slot");
          }
          this.adSlot.addService(window.googletag.pubads());
          _0x1315dd.addPrebidAdUnit(this.adUnit);
        });
      });
    }
    getHTMLAdContainerID() {
      return this.getAdUnitCode() + "-fran-container";
    }
    verifyAdContainer() {
      const _0xf3ec0a = this.getAdSlotHTMLElement();
      if (!_0xf3ec0a) {
        return;
      }
      const _0x160c39 = this.getHTMLAdContainerID();
      let _0x29aad8 = document.getElementById(_0x160c39);
      if (!_0x29aad8) {
        _0x29aad8 = document.createElement("div");
        _0x29aad8.id = _0x160c39;
        _0x29aad8.style.width = "100%";
        _0x29aad8.style.height = "100%";
        _0xf3ec0a.appendChild(_0x29aad8);
      }
    }
    initVisibilityObserver() {
      var _0x53b7dc;
      var _0x127fcf;
      const _0x316f9f = this.getAdSlotHTMLElement();
      if (_0x316f9f) {
        if ("IntersectionObserver" in window) {
          if (this.visibilityObserver) {
            this.visibilityObserver.disconnect();
          }
          try {
            this.visibilityObserver = new IntersectionObserver(_0x1aa597 => {
              _0x1aa597.forEach(_0x3d8b04 => {
                const _0x137718 = _0x3d8b04.intersectionRatio >= this.visibilityThreshold;
                this.visible = _0x137718;
                if (this.videoAdProvider) {
                  this.videoAdProvider.updateVisibility(_0x137718);
                }
              });
            }, {
              threshold: this.visibilityThreshold
            });
            this.visibilityObserver.observe(_0x316f9f);
          } catch (_0x44c19f) {
            if (!((_0x53b7dc = this.logger) === null || _0x53b7dc === undefined)) {
              _0x53b7dc.error("Error initializing IntersectionObserver:", _0x44c19f);
            }
            this.startVisibilityPolling(_0x316f9f, 250);
          }
        } else {
          if (!((_0x127fcf = this.logger) === null || _0x127fcf === undefined)) {
            _0x127fcf.warn("IntersectionObserver is not supported, falling back to polling");
          }
          this.startVisibilityPolling(_0x316f9f, 250);
        }
      }
    }
    startVisibilityPolling(_0x2f100b, _0x37120a) {
      if (this.visibilityInterval !== null) {
        clearInterval(this.visibilityInterval);
      }
      this.visibilityInterval = window.setInterval(() => {
        const _0xeeb593 = _0x1315dd.isHTMLElementVisible(_0x2f100b);
        this.visible = _0xeeb593;
        if (this.videoAdProvider) {
          this.videoAdProvider.updateVisibility(_0xeeb593);
        }
      }, _0x37120a);
    }
    show() {
      const _0xd46406 = Object.create(null, {
        show: {
          get: () => super.show
        }
      });
      return _0x5baa30(this, undefined, undefined, function* () {
        var _0x2d3885;
        var _0x516e57;
        var _0x4515bd;
        this.isAdAvailable = true;
        const _0x403708 = yield _0xd46406.show.call(this);
        if (_0x403708 && _0x403708.success) {
          if (this.adShownPromise) {
            if (!((_0x2d3885 = this.logger) === null || _0x2d3885 === undefined)) {
              _0x2d3885.debug(this.getFullName() + ": already fetching ad");
            }
            return {
              success: false,
              code: _0x122d73.ON_SHOW,
              message: this.getFullName() + ": already fetching ad"
            };
          }
          this.verifyAdContainer();
          if (((_0x516e57 = this.adUnit) === null || _0x516e57 === undefined ? undefined : _0x516e57.enableVideo) && this.videoAdProvider) {
            if ((this.lastRefreshedVideo ? Date.now() - this.lastRefreshedVideo.getTime() : Infinity) >= this.refreshInterval) {
              this.lastRefreshedVideo = new Date();
              return this.videoAdProvider.show();
            }
          }
          if (!((_0x4515bd = this.tracker) === null || _0x4515bd === undefined)) {
            _0x4515bd.willShowAd(true, this.getAdUnitCode(), this.getAdSlotTargeting());
          }
          this.lastRefreshed = new Date();
          this.adShownPromise = new _0x59c6ca();
          return this.adShownPromise.promise;
        }
        return _0x403708;
      });
    }
    reset() {
      if (this.videoAdProvider) {
        this.videoAdProvider.reset();
      }
      if (this.adShownPromise) {
        const _0x3ef7c3 = {
          success: true,
          code: _0x26e0c2.COMPLETED
        };
        this.adShownPromise.resolve(_0x3ef7c3);
        this.adShownPromise = null;
      }
    }
    canPreload() {
      return false;
    }
    getAdSlotHTMLElement() {
      var _0x49cd9c;
      if (this.getAdUnitCode()) {
        try {
          if ((_0x49cd9c = window === null || window === undefined ? undefined : window.document) === null || _0x49cd9c === undefined) {
            return undefined;
          } else {
            return _0x49cd9c.getElementById(this.getAdUnitCode());
          }
        } catch (_0xb50219) {
          return null;
        }
      }
    }
    getAdUnit() {
      return this.adUnit;
    }
    getAdSlot() {
      return this.adSlot;
    }
    isVisible() {
      return this.adSlot && this.visible;
    }
    isRefreshable() {
      var _0x2d17e3;
      var _0x4f81dc;
      const _0x2c2796 = Date.now();
      if (((_0x2d17e3 = this.adUnit) === null || _0x2d17e3 === undefined ? undefined : _0x2d17e3.enableVideo) && this.videoAdProvider && this.isTryingVideo) {
        return false;
      }
      if ((_0x4f81dc = this.adUnit) === null || _0x4f81dc === undefined ? undefined : _0x4f81dc.enableVideo) {
        if ((this.lastRefreshedVideo ? _0x2c2796 - this.lastRefreshedVideo.getTime() : Infinity) >= this.refreshInterval) {
          if (this.visible && this.isTabVisible()) {
            this.isTryingVideo = true;
            this.show().finally(() => this.isTryingVideo = false);
          }
          return false;
        }
      }
      return this.lastRefreshed == null || _0x2c2796 - this.lastRefreshed.getTime() > this.refreshInterval && this.impressionViewed && this.isTabVisible();
    }
    getRefreshInterval() {
      return this.refreshInterval;
    }
    getLastRefresh() {
      return this.lastRefreshed;
    }
  }
  class _0x6489b5 extends _0x271e77 {
    constructor(_0x5375c2, _0x5a018f) {
      super(_0x5a018f != null ? _0x5a018f : _0x52fc35.REWARD, _0x48cbd6.SURVEY, _0x5375c2);
      this.skipped = true;
      this.adShownPromise = null;
      this.adPreloading = null;
      this.eventFields = null;
    }
    init(_0x304533, _0x7418fb, _0x21708f) {
      const _0x49b20e = Object.create(null, {
        init: {
          get: () => super.init
        }
      });
      return _0x5baa30(this, undefined, undefined, function* () {
        yield _0x49b20e.init.call(this, _0x304533, _0x7418fb, _0x21708f);
        window.pollfishConfig = Object.assign(Object.assign({}, window.pollfishConfig || {}), {
          ready: () => {},
          surveyAvailable: this.onSurveyAvailable.bind(this),
          surveyNotAvailable: this.onSurveyNotAvailable.bind(this),
          surveyCompletedCallback: this.onSurveyCompleted.bind(this),
          userNotEligibleCallback: this.onUserDisqualified.bind(this),
          closeAndNoShowCallback: this.onSurveyCloseAndNoShow.bind(this),
          closeCallback: this.onSurveyClose.bind(this)
        });
        if (_0x1315dd.pollfishLoaded && !this.isAdAvailable) {
          this.preload();
        }
      });
    }
    isReady() {
      return _0x1315dd.pollfishLoaded;
    }
    canPreload() {
      return true;
    }
    reset() {
      super.reset();
      if (this.adPreloading) {
        this.adPreloading.resolve({
          success: false,
          code: _0x122d73.ON_LOAD,
          message: this.getFullName() + ": unable to load ad"
        });
        this.adPreloading = null;
      }
      if (this.adShownPromise) {
        const _0x16fca4 = {
          success: true,
          code: this.skipped ? _0x26e0c2.DELIVERED : _0x26e0c2.COMPLETED
        };
        window.Pollfish.hide();
        this.adShownPromise.resolve(_0x16fca4);
        this.adShownPromise = null;
      }
    }
    preload() {
      const _0x6bd00b = Object.create(null, {
        preload: {
          get: () => super.preload
        }
      });
      return _0x5baa30(this, undefined, undefined, function* () {
        var _0x5a5daa;
        var _0x1e9cea;
        var _0x1cecfe;
        const _0x220cdd = yield _0x6bd00b.preload.call(this);
        if (_0x220cdd && _0x220cdd.success) {
          if (this.adPreloading) {
            if (!((_0x5a5daa = this.logger) === null || _0x5a5daa === undefined)) {
              _0x5a5daa.debug(this.getFullName() + ": already loading an ad");
            }
            this.adPreloading.promise;
          }
          this.skipped = true;
          if (!((_0x1e9cea = this.tracker) === null || _0x1e9cea === undefined)) {
            _0x1e9cea.requestingAd(this.getAdUnitCode());
          }
          if (!((_0x1cecfe = window.Pollfish) === null || _0x1cecfe === undefined)) {
            _0x1cecfe.restart(window.pollfishConfig);
          }
          this.adPreloading = new _0x59c6ca();
          return this.adPreloading.promise;
        } else {
          return _0x220cdd;
        }
      });
    }
    show() {
      return _0x5baa30(this, undefined, undefined, function* () {
        var _0x154817;
        if (!this.isAdAvailable && ((_0x154817 = this.config) === null || _0x154817 === undefined ? undefined : _0x154817.blocking)) {
          const _0x34bdaf = yield this.preload();
          if (_0x34bdaf && _0x34bdaf.success && this.isAdAvailable) {
            return this.showAd();
          } else {
            return _0x34bdaf;
          }
        }
        return this.showAd();
      });
    }
    showAd() {
      const _0x5ede9f = Object.create(null, {
        show: {
          get: () => super.show
        }
      });
      return _0x5baa30(this, undefined, undefined, function* () {
        var _0x2f99c4;
        var _0x2dc8ba;
        const _0x1db3ab = yield _0x5ede9f.show.call(this);
        if (_0x1db3ab && _0x1db3ab.success) {
          if (this.adShownPromise) {
            if (!((_0x2f99c4 = this.logger) === null || _0x2f99c4 === undefined)) {
              _0x2f99c4.debug(this.getFullName() + ": already showing survey");
            }
            return this.adShownPromise.promise;
          } else if (this.isAdAvailable) {
            _0x1315dd.overridePollfishContainerZIndex(2147483647);
            if (!((_0x2dc8ba = this.tracker) === null || _0x2dc8ba === undefined)) {
              _0x2dc8ba.willShowAd(true, this.getAdUnitCode());
            }
            window.Pollfish.showFullSurvey();
            this.adShownPromise = new _0x59c6ca();
            return this.adShownPromise.promise;
          } else {
            return {
              success: false,
              code: _0x122d73.ON_SHOW,
              message: this.getFullName() + ": failed to render survey"
            };
          }
        } else {
          if (_0x1db3ab && !_0x1db3ab.success && !this.isAdAvailable && this.isInitialized) {
            this.preload();
          }
          return _0x1db3ab;
        }
      });
    }
    onSurveyAvailable(_0x4f173d) {
      var _0x2c12c7;
      var _0x3123cd;
      this.isAdAvailable = true;
      this.isPreloadingAd = false;
      if (this.adPreloading) {
        this.adPreloading.resolve({
          success: true,
          code: _0x26e0c2.DELIVERED
        });
        this.adPreloading = null;
      }
      if (!((_0x2c12c7 = this.logger) === null || _0x2c12c7 === undefined)) {
        _0x2c12c7.debug(this.getFullName() + ": ad filled");
      }
      this.eventFields = {
        cpm: _0x4f173d.revenue * 10,
        duration: _0x4f173d.survey_loi
      };
      if (!((_0x3123cd = this.tracker) === null || _0x3123cd === undefined)) {
        _0x3123cd.receivedAdResponse(_0x483bc9.SUCCESS, this.getAdUnitCode(), this.eventFields);
      }
    }
    onSurveyNotAvailable() {
      var _0x5cee74;
      var _0x1518d9;
      this.isAdAvailable = false;
      this.isPreloadingAd = false;
      this.eventFields = null;
      if (this.adPreloading) {
        this.adPreloading.resolve({
          success: false,
          code: _0x122d73.ON_LOAD,
          message: this.getFullName() + ": unable to load ad"
        });
        this.adPreloading = null;
      }
      if (!((_0x5cee74 = this.logger) === null || _0x5cee74 === undefined)) {
        _0x5cee74.debug(this.getFullName() + ": unable to load ad");
      }
      if (!((_0x1518d9 = this.tracker) === null || _0x1518d9 === undefined)) {
        _0x1518d9.receivedAdResponse(_0x483bc9.NOFILL, this.getAdUnitCode());
      }
    }
    onSurveyCompleted() {
      this.skipped = false;
      this.isAdAvailable = false;
    }
    onUserDisqualified() {
      this.skipped = true;
      this.isAdAvailable = false;
    }
    onSurveyCloseAndNoShow() {
      this.skipped = true;
      this.onSurveyClose();
    }
    onSurveyClose() {
      var _0x4dc08e;
      var _0x456c16;
      if (!((_0x4dc08e = this.logger) === null || _0x4dc08e === undefined)) {
        _0x4dc08e.debug(this.getFullName() + ": survey closed, skipped? " + this.skipped);
      }
      if (!((_0x456c16 = this.tracker) === null || _0x456c16 === undefined)) {
        _0x456c16.finishedAd(this.skipped ? _0x181c0d.SKIPPED : _0x181c0d.SUCCESS, this.getAdUnitCode(), this.eventFields);
      }
      if (!this.skipped) {
        this.eventFields = null;
      }
      if (this.adShownPromise) {
        const _0x4b5b52 = {
          success: true,
          code: this.skipped ? _0x26e0c2.DELIVERED : _0x26e0c2.COMPLETED
        };
        this.adShownPromise.resolve(_0x4b5b52);
        this.adShownPromise = null;
      }
    }
  }
  class _0xd717b0 extends _0x6489b5 {
    constructor(_0x1c3a05) {
      super(_0x1c3a05, _0x52fc35.SURVEY);
    }
  }
  class _0x4c9501 {
    constructor() {
      this.bootstrapMapper = {
        "fran#display#interstitial": {
          f: _0x4c9501.bootstrapDisplayInterstitial,
          Type: _0x3c8581
        },
        "fran#display#reward": {
          f: _0x4c9501.bootstrapDisplayReward,
          Type: _0x57d460
        },
        "fran#display#banner": {
          f: _0x4c9501.bootstrapDisplayBanner,
          Type: _0x3723ad
        },
        "fran#video#interstitial": {
          f: _0x4c9501.bootstrapVideoAdProvider,
          Type: _0x70d309
        },
        "fran#video#reward": {
          f: _0x4c9501.bootstrapVideoAdProvider,
          Type: _0x53932c
        },
        "fran#survey#reward": {
          f: _0x4c9501.bootstrapSurveyAdProvider,
          Type: _0x6489b5
        },
        "fran#survey#survey": {
          f: _0x4c9501.bootstrapSurveyAdProvider,
          Type: _0xd717b0
        }
      };
    }
    bootstrap(_0x4b8005, _0x523053) {
      _0x4b8005 = _0x4b8005 || {};
      const _0x40e5a0 = [];
      _0x523053.forEach(_0x32d5e2 => {
        if (_0x32d5e2 in this.bootstrapMapper) {
          _0x40e5a0.push(new this.bootstrapMapper[_0x32d5e2].Type());
          this.bootstrapMapper[_0x32d5e2].f(_0x4b8005);
        }
      });
      return _0x40e5a0;
    }
    static bootstrapDisplayInterstitial(_0x3cbca6) {
      _0x1315dd.loadGPT(_0x3cbca6.gpt);
      _0x1315dd.loadPubX(_0x3cbca6.pubx);
      _0x1315dd.loadApsTag(_0x3cbca6.uam);
      _0x1315dd.loadPrebid(_0x3cbca6.prebid);
      _0x1315dd.initializePrebid(_0x3cbca6.prebid);
      _0x1315dd.loadAdmiralABR(_0x3cbca6.admiral);
    }
    static bootstrapDisplayReward(_0x1c1ecc) {
      _0x1315dd.loadGPT(_0x1c1ecc.gpt);
      _0x1315dd.loadPubX(_0x1c1ecc.pubx);
      _0x1315dd.loadAdmiralABR(_0x1c1ecc.admiral);
    }
    static bootstrapDisplayBanner(_0xf2fefa) {
      _0x1315dd.loadGPT(_0xf2fefa.gpt);
      _0x1315dd.loadPubX(_0xf2fefa.pubx);
      _0x1315dd.loadApsTag(_0xf2fefa.uam);
      _0x1315dd.loadPrebid(_0xf2fefa.prebid);
      _0x1315dd.initializePrebid(_0xf2fefa.prebid);
      _0x1315dd.loadAdmiralABR(_0xf2fefa.admiral);
    }
    static bootstrapVideoAdProvider(_0x51aa52) {
      _0x1315dd.loadIMA(_0x51aa52.ima);
      _0x1315dd.loadPubX(_0x51aa52.pubx);
      _0x1315dd.loadApsTag(_0x51aa52.uam);
      _0x1315dd.loadPrebid(_0x51aa52.prebid);
      _0x1315dd.initializePrebid(_0x51aa52.prebid);
      _0x1315dd.loadAdmiralABR(_0x51aa52.admiral);
    }
    static bootstrapSurveyAdProvider(_0x527402) {
      _0x1315dd.loadPollfish(_0x527402.pollfish);
      _0x1315dd.loadAdmiralABR(_0x527402.admiral);
    }
  }
  class _0x11cb08 {
    constructor(_0x39190d, _0x18aff1) {
      this.endpoint = _0x39190d || "https://coeus.frvr.com/v1/gp1";
      this.timeout = _0x18aff1 || 2000;
    }
    locate() {
      return _0x5baa30(this, undefined, undefined, function* () {
        const _0x4bc9f6 = new AbortController();
        const _0x5a7bcb = // TOLOOK
        setTimeout(() => _0x4bc9f6.abort(), this.timeout);
        return fetch(this.endpoint, {
          method: "GET",
          mode: "cors",
          cache: "no-cache",
          signal: _0x4bc9f6.signal
        }).then(function (_0x50479d) {
          clearTimeout(_0x5a7bcb);
          if (!_0x50479d.ok) {
            throw Error(_0x50479d.statusText);
          }
          return _0x50479d.json();
        }).then(function (_0x31de30) {
          if (_0x31de30.ip && _0x31de30.cc) {
            return {
              ip: _0x31de30.ip,
              cc: _0x31de30.cc
            };
          }
          throw Error("unable to parse response: " + JSON.stringify(_0x31de30));
        });
      });
    }
  }
  class _0xdce0c2 {
    getInitConfig() {
      const _0x33bada = this.findScriptTag();
      return Object.assign(Object.assign(Object.assign({}, this.getFromGlobal()), this.getFromUrl(_0x33bada)), this.getFromScript(_0x33bada));
    }
    getRemoteConfig(_0x55ae34) {
      return _0x5baa30(this, undefined, undefined, function* () {
        const _0x49557f = _0x55ae34.url || _0xdce0c2.DEFAULT_CONFIG_BASE_PATH_URL;
        const _0x34571f = (() => {
          const _0x37e7f9 = parseInt(_0x55ae34.timeout || "", 10);
          if (isNaN(_0x37e7f9)) {
            return _0xdce0c2.DEFAULT_CONFIG_TIMEOUT;
          } else {
            return _0x37e7f9;
          }
        })();
        const _0x46f17e = _0x49557f + "/" + _0x55ae34.pid + "/" + _0x55ae34.cid + ".json";
        return this.loadRemoteConfiguration(_0x46f17e, _0x34571f);
      });
    }
    loadRemoteConfiguration(_0x548e50, _0x32e418) {
      return _0x5baa30(this, undefined, undefined, function* () {
        if (!_0x548e50) {
          throw new Error("url is required");
        }
        try {
          const _0x278119 = new AbortController();
          const _0x519ad5 = // TOLOOK
          setTimeout(() => _0x278119.abort(), _0x32e418);
          const _0x748d4d = yield fetch(_0x548e50, {
            headers: {
              Accept: "application/json"
            },
            signal: _0x278119.signal
          });
          clearTimeout(_0x519ad5);
          if (!_0x748d4d.ok) {
            throw new Error("unexpected http response: " + _0x748d4d.status + " " + _0x748d4d.statusText);
          }
          return yield _0x748d4d.json();
        } catch (_0x1adb1b) {
          throw _0x1adb1b;
        }
      });
    }
    getFromScript(_0x30ace5) {
      if (!_0x30ace5) {
        return {};
      }
      const _0x2626b2 = {};
      _0xdce0c2.CONFIG_KEYS.forEach(_0x415b65 => {
        const _0x27f01f = _0x30ace5.getAttribute("data-fran-" + _0x415b65);
        if (_0x27f01f) {
          _0x2626b2[_0x415b65] = _0x27f01f;
        }
      });
      return _0x2626b2;
    }
    getFromGlobal() {
      const _0x3820d = window[_0xdce0c2.GLOBAL_CONFIG_KEY];
      if (!_0x3820d || typeof _0x3820d != "object") {
        return {};
      }
      const _0x6f0473 = {};
      _0xdce0c2.CONFIG_KEYS.forEach(_0x2865cd => {
        if (_0x3820d[_0x2865cd]) {
          _0x6f0473[_0x2865cd] = _0x3820d[_0x2865cd];
        }
      });
      return _0x6f0473;
    }
    getFromUrl(_0x1cb6cc) {
      if (!(_0x1cb6cc == null ? undefined : _0x1cb6cc.src)) {
        return {};
      }
      try {
        const _0xba676e = new URL(_0x1cb6cc.src).searchParams;
        const _0x528307 = {};
        _0xdce0c2.CONFIG_KEYS.forEach(_0x344115 => {
          const _0x154bc4 = _0xba676e.get(_0x344115);
          if (_0x154bc4) {
            _0x528307[_0x344115] = _0x154bc4;
          }
        });
        return _0x528307;
      } catch (_0x3576fc) {
        return {};
      }
    }
    findScriptTag() {
      const _0x403257 = document.currentScript;
      if (_0x403257) {
        return _0x403257;
      }
      const _0x3a0f90 = Array.from(document.getElementsByTagName("script"));
      const _0x1793ff = _0x3a0f90.find(_0x73f68d => _0xdce0c2.CONFIG_KEYS.some(_0x582ab9 => _0x73f68d.hasAttribute("data-fran-" + _0x582ab9)));
      return _0x1793ff || _0x3a0f90.find(_0x4f5379 => _0x4f5379.src && _0xdce0c2.SCRIPT_URL_PATTERNS.some(_0x25b741 => _0x4f5379.src.includes(_0x25b741))) || null;
    }
  }
  _0xdce0c2.SCRIPT_URL_PATTERNS = ["/fran-sdk.js", "/fran-sdk.min.js", "fran-sdk@", "fran-cdn.frvr.com/"];
  _0xdce0c2.GLOBAL_CONFIG_KEY = "__fcfg";
  _0xdce0c2.CONFIG_KEYS = ["pid", "cid", "url", "timeout"];
  _0xdce0c2.DEFAULT_CONFIG_BASE_PATH_URL = "https://fran-cdn.frvr.com/configs/ads";
  _0xdce0c2.DEFAULT_CONFIG_TIMEOUT = 2500;
  class _0x338d23 {
    constructor() {
      this.initialized = false;
      this.ads = new _0x4254da({
        logger: new _0x4bbaec()
      });
    }
    static getInstance() {
      if (!_0x338d23.instance) {
        _0x338d23.instance = new _0x338d23();
        if (document.readyState === "loading") {
          document.addEventListener("DOMContentLoaded", () => {
            _0x338d23.instance.bootstrap(new _0xdce0c2()).catch(_0x4d8776 => {
              console.error("[FRAN SDK] initialization failed:", _0x4d8776);
            });
          });
        } else {
          _0x338d23.instance.bootstrap(new _0xdce0c2()).catch(_0x4b6246 => {
            console.error("[FRAN SDK] initialization failed:", _0x4b6246);
          });
        }
      }
      return _0x338d23.instance;
    }
    init(_0x29012f, _0x58ee65) {
      return _0x5baa30(this, undefined, undefined, function* () {
        if (yield _0x1315dd.checkAdBlock(_0x58ee65 == null ? undefined : _0x58ee65.adBlockDetection)) {
          this.initialized = false;
          throw new Error("ad block detected, disabling FRAN SDK");
        }
        if (_0x29012f) {
          this.ads.configure(_0x29012f);
        }
        const _0x275201 = _0x29012f.providers.map(_0x2ec5c8 => _0x2ec5c8.name + "#" + _0x2ec5c8.type);
        new _0x4c9501().bootstrap(_0x58ee65, _0x275201).forEach(_0x4689ea => this.ads.register(_0x4689ea));
        if (_0x58ee65 && _0x58ee65.geolocation && _0x58ee65.geolocation.blacklistedLocations && _0x58ee65.geolocation.blacklistedLocations.length) {
          const _0x3bfc53 = _0x58ee65.geolocation.blacklistedLocations.filter(_0x1b4c65 => _0x1b4c65).map(_0x3cd934 => _0x3cd934.toUpperCase());
          const _0x2e88a0 = new _0x11cb08(_0x58ee65.geolocation.endpoint, _0x58ee65.geolocation.timeout);
          const _0x7ce2aa = yield _0x2e88a0.locate();
          if (_0x3bfc53.indexOf(_0x7ce2aa.cc) > -1) {
            throw new Error("fran is not allowed");
          }
        }
        yield this.ads.init();
        (() => {
          let _0x3e7a31 = 100;
          let _0x3af576 = 0;
          const _0x5d60dd = (_0x4aa367, _0x4e99bc) => {
            var _0x508e69;
            var _0xf3fafc;
            var _0x2e59b3;
            var _0x2c0074;
            var _0xe529b0;
            var _0x5f0675;
            if (_0x4e99bc && (_0x4aa367.eventStatus === "useractioncomplete" || _0x4aa367.eventStatus === "tcloaded")) {
              if (_0x4aa367.purpose) {
                const _0x59b305 = ((_0x508e69 = _0x4aa367.purpose) === null || _0x508e69 === undefined ? undefined : _0x508e69.consents[_0x1315dd.TCF_P1_CONSENT]) === true || ((_0xf3fafc = _0x4aa367.purpose) === null || _0xf3fafc === undefined ? undefined : _0xf3fafc.legitimateInterests[_0x1315dd.TCF_P1_CONSENT]) === true;
                const _0x4634cb = ((_0x2e59b3 = _0x4aa367.purpose) === null || _0x2e59b3 === undefined ? undefined : _0x2e59b3.consents[_0x1315dd.TCF_P4_CONSENT]) === true || ((_0x2c0074 = _0x4aa367.purpose) === null || _0x2c0074 === undefined ? undefined : _0x2c0074.legitimateInterests[_0x1315dd.TCF_P4_CONSENT]) === true;
                this.setUserP1Consent(_0x59b305);
                this.setUserP4Consent(_0x4634cb);
              }
              if (_0x4aa367.vendor) {
                this.setVendorConsents(_0x1315dd.mergeVendorConsents((_0xe529b0 = _0x4aa367.vendor) === null || _0xe529b0 === undefined ? undefined : _0xe529b0.consents, (_0x5f0675 = _0x4aa367.vendor) === null || _0x5f0675 === undefined ? undefined : _0x5f0675.legitimateInterests));
              }
            }
          };
          const _0xf84c42 = () => {
            if (window.__tcfapi) {
              window.__tcfapi("addEventListener", 2, _0x5d60dd);
            } else if (_0x3af576 < 30) {
              // TOLOOK
              setTimeout(_0xf84c42, _0x3e7a31);
              _0x3af576 += 1;
              _0x3e7a31 *= 2;
              _0x3e7a31 = _0x3e7a31 > 1000 ? 1000 : _0x3e7a31;
            }
          };
          _0xf84c42();
        })();
        this.initialized = true;
      });
    }
    setDeviceId(_0x284a5c) {
      this.ads.getProviders().forEach(_0x4ae3fc => _0x4ae3fc.setDeviceId(_0x284a5c));
    }
    setPublisherProvidedId(_0x230297) {
      this.ads.getProviders().forEach(_0xbb60f => _0xbb60f.setPublisherProvidedId(_0x230297));
    }
    setVolume(_0x1fa000) {
      this.ads.getProviders().forEach(_0x1a0091 => _0x1a0091.setVolume(_0x1fa000));
    }
    setUserP1Consent(_0x289d4e) {
      this.ads.getProviders().forEach(_0x23d72a => _0x23d72a.setUserP1Consent(_0x289d4e));
    }
    setUserP4Consent(_0x4da7c5) {
      this.ads.getProviders().forEach(_0x1a0b9e => _0x1a0b9e.setUserP4Consent(_0x4da7c5));
    }
    setVendorConsents(_0x281299) {
      this.ads.getProviders().forEach(_0x1263d8 => _0x1263d8.setVendorConsents(_0x281299));
    }
    bootstrap(_0x4955a6) {
      return _0x5baa30(this, undefined, undefined, function* () {
        const _0x40d5d7 = _0x4955a6.getInitConfig();
        if (_0x40d5d7 && _0x40d5d7.pid && _0x40d5d7.cid) {
          try {
            const _0x45612c = yield _0x4955a6.getRemoteConfig(_0x40d5d7);
            const _0x4b4280 = _0x45612c.vendors.fran;
            yield this.init(_0x45612c, _0x4b4280);
            console.info("[FRAN SDK] initialization complete");
          } catch (_0x3c119a) {
            throw _0x3c119a;
          }
        }
      });
    }
  }
  _0x338d23.instance = null;
  const _0x245b0a = _0x338d23.getInstance();
  _0x245b0a.ads;
  _0x245b0a.initialized;
  _0x245b0a.init.bind(_0x245b0a);
  _0x245b0a.setUserP1Consent.bind(_0x245b0a);
  _0x245b0a.setUserP4Consent.bind(_0x245b0a);
  _0x245b0a.setVendorConsents.bind(_0x245b0a);
  _0x245b0a.setDeviceId.bind(_0x245b0a);
  _0x245b0a.setVolume.bind(_0x245b0a);
  _0x245b0a.setPublisherProvidedId.bind(_0x245b0a);
  class _0x1dc2a7 {
    ensureInit(_0x1fa692) {
      if (this.adProviders) {
        return;
      }
      if (!this.isFranConfigured(_0x1fa692)) {
        this.adProviders = [];
        return;
      }
      const _0x2b3245 = _0x1fa692.vendors.fran;
      const _0x2c3bbd = _0x1fa692.providers.map(_0x2021d7 => {
        this.expandProviderAdUnitCode(_0x2021d7.config);
        return _0x2021d7.name + "#" + _0x2021d7.type;
      });
      const _0x3db5cc = new _0x4c9501();
      this.adProviders = _0x3db5cc.bootstrap(_0x2b3245, _0x2c3bbd);
    }
    getProviders(_0x58c8b2) {
      this.ensureInit(_0x58c8b2);
      return this.adProviders;
    }
    setDeviceId(_0x935733) {
      var _0x5cdaf5;
      if (!((_0x5cdaf5 = this.adProviders) === null || _0x5cdaf5 === undefined)) {
        _0x5cdaf5.forEach(_0x5d26ba => _0x5d26ba.setDeviceId(_0x935733));
      }
    }
    setVolume(_0x6eabba) {
      var _0x3f133c;
      if (!((_0x3f133c = this.adProviders) === null || _0x3f133c === undefined)) {
        _0x3f133c.forEach(_0x2b7b32 => _0x2b7b32.setVolume(_0x6eabba));
      }
    }
    setUserP1Consent(_0x2e8277) {
      var _0x22d10e;
      if (!((_0x22d10e = this.adProviders) === null || _0x22d10e === undefined)) {
        _0x22d10e.forEach(_0x1ca38d => _0x1ca38d.setUserP1Consent(_0x2e8277));
      }
    }
    setUserP4Consent(_0x42f0c8) {
      var _0x450e35;
      if (!((_0x450e35 = this.adProviders) === null || _0x450e35 === undefined)) {
        _0x450e35.forEach(_0x3acf7a => _0x3acf7a.setUserP4Consent(_0x42f0c8));
      }
    }
    setVendorConsents(_0x5d5224) {
      var _0x388ef2;
      if (!((_0x388ef2 = this.adProviders) === null || _0x388ef2 === undefined)) {
        _0x388ef2.forEach(_0x54db33 => _0x54db33.setVendorConsents(_0x5d5224));
      }
    }
    setChannelId(_0x13f9c9) {
      this.channelId = _0x13f9c9;
    }
    isFranConfigured(_0x58c492) {
      var _0x3b805d;
      return ((_0x3b805d = _0x58c492 == null ? undefined : _0x58c492.vendors) === null || _0x3b805d === undefined ? undefined : _0x3b805d.fran) != null && (_0x58c492 == null ? undefined : _0x58c492.providers) != null;
    }
    expandProviderAdUnitCode(_0x4f4a0e) {
      const _0x412a36 = _0x257299 => {
        if (_0x257299 && _0x257299.code && this.channelId) {
          const _0x3e6e12 = _0x1dc2a7.PARTNER_ID + "-" + this.channelId;
          const _0x17ce68 = this.isFunction(_0x257299.code) ? _0x257299.code() : _0x257299.code;
          const _0x17b95d = _0x17ce68.split("/").pop();
          _0x257299.code = _0x17ce68.replace(_0x17b95d, _0x3e6e12 + "-" + _0x17b95d);
        }
      };
      if (_0x4f4a0e && _0x4f4a0e.adUnit) {
        _0x412a36(_0x4f4a0e.adUnit);
      }
      if (_0x4f4a0e && _0x4f4a0e.adUnits) {
        _0x4f4a0e.adUnits.forEach(_0x415464 => _0x412a36(_0x415464));
      }
    }
    isFunction(_0x37bcc1) {
      return !!(_0x37bcc1 && _0x37bcc1.constructor && _0x37bcc1.call && _0x37bcc1.apply);
    }
  }
  _0x1dc2a7.PARTNER_ID = "frvr";
  class _0x1ed82f {
    constructor(_0x5f4048) {
      this.logger = _0x5f4048;
    }
    init() {
      return _0x5baa30(this, undefined, undefined, function* () {});
    }
    setProgress(_0x1afc9d) {
      var _0x21ebb3;
      const _0x4f8ad9 = (_0x1afc9d * 100).toFixed(1);
      if (!((_0x21ebb3 = this.logger) === null || _0x21ebb3 === undefined)) {
        _0x21ebb3.info("[channel-web] progress: " + _0x4f8ad9 + "%");
      }
    }
    complete() {
      return _0x5baa30(this, undefined, undefined, function* () {
        var _0x59b302;
        if (!((_0x59b302 = this.logger) === null || _0x59b302 === undefined)) {
          _0x59b302.info("[channel-web] complete");
        }
      });
    }
  }
  class _0x4e0cee extends Error {
    constructor() {
      super(...arguments);
      this.code = "USER_INPUT";
      this.message = "User rejected prompt to add to home screen";
    }
  }
  class _0x1b960b {
    constructor(_0x1faf4b, _0xa2d900) {
      this.logger = _0x1faf4b;
      this.tracker = _0xa2d900;
      this.calledAlready = false;
    }
    init() {
      return _0x5baa30(this, undefined, undefined, function* () {
        if ("serviceWorker" in navigator) {
          navigator.serviceWorker.register("./service-worker.js").then(_0x2dcee7 => {
            var _0x47694c;
            if (!((_0x47694c = this.logger) === null || _0x47694c === undefined)) {
              _0x47694c.debug("ServiceWorker registration successful with scope: ", _0x2dcee7.scope);
            }
          }, _0x35bb9f => {
            var _0x5d3e1f;
            if (!((_0x5d3e1f = this.logger) === null || _0x5d3e1f === undefined)) {
              _0x5d3e1f.debug("ServiceWorker registration failed: ", _0x35bb9f);
            }
          });
          window.addEventListener("beforeinstallprompt", _0x141562 => {
            var _0x3631f5;
            var _0x15f109;
            if (!((_0x3631f5 = this.logger) === null || _0x3631f5 === undefined)) {
              _0x3631f5.debug("beforeinstallprompt event received: ", _0x141562);
            }
            if (!this.installPromptEvent) {
              if (!((_0x15f109 = this.tracker) === null || _0x15f109 === undefined)) {
                _0x15f109.logEvent("PWA Before Install Prompt", {});
              }
              _0x141562.preventDefault();
              this.installPromptEvent = _0x141562;
            }
            return false;
          });
        }
      });
    }
    canCreateShortcut() {
      return _0x5baa30(this, undefined, undefined, function* () {
        return !!this.installPromptEvent && !this.calledAlready;
      });
    }
    createShortcut() {
      return _0x5baa30(this, undefined, undefined, function* () {
        var _0x41f189;
        var _0x2a97e9;
        var _0x2f2e30;
        var _0xad338b;
        if (!((_0x41f189 = this.tracker) === null || _0x41f189 === undefined)) {
          _0x41f189.logEvent("PWA Install Prompt", {});
        }
        this.calledAlready = true;
        const _0x47039a = yield this.installPromptEvent.prompt();
        if (!((_0x2a97e9 = this.logger) === null || _0x2a97e9 === undefined)) {
          _0x2a97e9.debug("PWA Install Prompt returned: ", _0x47039a);
        }
        if (_0x47039a.outcome !== "accepted") {
          if (!((_0xad338b = this.tracker) === null || _0xad338b === undefined)) {
            _0xad338b.logEvent("PWA Dismissed", {});
          }
          throw new _0x4e0cee();
        }
        if (!((_0x2f2e30 = this.tracker) === null || _0x2f2e30 === undefined)) {
          _0x2f2e30.logEvent("PWA Installed", {});
        }
      });
    }
  }
  class _0x5365e {
    isIOS() {
      return /(ipod|iphone|ipad)/i.test(navigator.userAgent) || /(Macintosh)/i.test(navigator.userAgent) && "ontouchend" in document;
    }
    isAndroid() {
      return /(android)/i.test(navigator.userAgent) && !/(Windows)/i.test(navigator.userAgent);
    }
    configure(_0x556f5c) {
      this.config = _0x556f5c;
    }
    needsConfiguration() {
      return true;
    }
    canMoveToMobile() {
      return _0x5baa30(this, undefined, undefined, function* () {
        var _0x4eb3da;
        var _0x253209;
        return !(!(this.isIOS() && ((_0x4eb3da = this.config) === null || _0x4eb3da === undefined ? undefined : _0x4eb3da.iosAppId) || this.isAndroid()) || !((_0x253209 = this.config) === null || _0x253209 === undefined ? undefined : _0x253209.id));
      });
    }
    moveToMobile() {
      return _0x5baa30(this, undefined, undefined, function* () {
        const _0x1b7883 = this.config;
        if (this.isIOS()) {
          window.location.href = "https://apps.apple.com/app/" + (_0x1b7883 == null ? undefined : _0x1b7883.id) + "/id" + (_0x1b7883 == null ? undefined : _0x1b7883.iosAppId) + "?mt=1";
        } else if (this.isAndroid()) {
          const _0x1fec93 = "https://play.google.com/store/apps/details?id=com.frvr." + (_0x1b7883 == null ? undefined : _0x1b7883.id);
          if (navigator && navigator.getInstalledRelatedApps) {
            navigator.getInstalledRelatedApps().then(function (_0x57cc99) {
              if (_0x57cc99.length > 0) {
                window.location.href = "intent://" + (_0x1b7883 == null ? undefined : _0x1b7883.id) + "/#Intent;scheme=frvr;package=com.frvr." + (_0x1b7883 == null ? undefined : _0x1b7883.id) + ";end";
              } else {
                window.location.href = _0x1fec93;
              }
            }).catch(function () {
              console.warn("Related Apps API is not supported. Redirecting to Google Play.");
              window.location.href = _0x1fec93;
            });
          } else {
            window.location.href = _0x1fec93;
          }
        }
      });
    }
  }
  class _0x356959 {
    constructor(_0x39935b) {
      this.config = _0x39935b;
    }
    canNavigate() {
      return true;
    }
    navigate(_0xa29641, _0x2e2d37) {
      return _0x5baa30(this, undefined, undefined, function* () {
        window.open(_0xa29641, _0x2e2d37 || "_blank");
      });
    }
    canOpenChannelAppStore() {
      return true;
    }
    openChannelAppStore() {
      return _0x5baa30(this, undefined, undefined, function* () {
        this.navigate("https://" + this.config.gameId + ".frvr.com", "_self");
      });
    }
  }
  class _0x594dc6 {
    constructor(_0x1cbe76, _0x3ee9b3) {
      this.pixelId = _0x1cbe76;
      this.logger = _0x3ee9b3;
      this.hasInitEventBeenSent = false;
    }
    init(_0x7978f5) {
      return _0x5baa30(this, undefined, undefined, function* () {
        this.addFacebookMetaPixelQueue();
        _0x7978f5.onConsentChanged(_0x21b44b => {
          if ((_0x21b44b & _0x594dc6.REQUIRED_CONSENT_FLAGS) === _0x594dc6.REQUIRED_CONSENT_FLAGS) {
            this.addFacebookMetaPixelLoader();
          }
        });
      });
    }
    getName() {
      return "metapixel";
    }
    send(_0x4ac589, _0x28f4a9, _0xade583, _0x5e0684) {
      switch (_0x4ac589) {
        case "page_loading":
          this.fbqTrack("PageView");
          break;
        case "iap_request_payment_success":
          this.fbqTrack("Purchase", {
            currency: _0xade583.currencyCode,
            value: _0xade583.priceValue
          });
      }
    }
    fbqTrack(_0x59d08e, _0x3a91d2) {
      var _0x345db0;
      var _0x1de2ae;
      var _0x46aca6;
      if (window.fbq) {
        if (!this.hasInitEventBeenSent) {
          if (!((_0x1de2ae = this.logger) === null || _0x1de2ae === undefined)) {
            _0x1de2ae.debug("[metapixel-analytics] tracking fbq event", "init", this.pixelId);
          }
          window.fbq("init", this.pixelId);
          this.hasInitEventBeenSent = true;
        }
        if (!((_0x46aca6 = this.logger) === null || _0x46aca6 === undefined)) {
          _0x46aca6.debug("[metapixel-analytics] tracking fbq event", _0x59d08e, _0x3a91d2);
        }
        if (_0x3a91d2 !== undefined) {
          window.fbq("track", _0x59d08e, _0x3a91d2);
        } else {
          window.fbq("track", _0x59d08e);
        }
      } else if (!((_0x345db0 = this.logger) === null || _0x345db0 === undefined)) {
        _0x345db0.error("[metapixel-analytics] window.fbq not found, enqueueing event");
      }
    }
    addFacebookMetaPixelQueue() {
      var _0x2fce82;
      if (window.fbq) {
        return;
      }
      if (!((_0x2fce82 = this.logger) === null || _0x2fce82 === undefined)) {
        _0x2fce82.debug("[metapixel-analytics] installing metapixel queue");
      }
      this.appendScript(`
    !function(f,b,e,v,n,t,s)
    {if(f.fbq)return;n=f.fbq=function(){n.callMethod?
    n.callMethod.apply(n,arguments):n.queue.push(arguments)};
    if(!f._fbq)f._fbq=n;n.push=n;n.loaded=!0;n.version='2.0';
    n.queue=[];}(window, document,'script',
    'https://connect.facebook.net/en_US/fbevents.js');
    `);
    }
    addFacebookMetaPixelLoader() {
      var _0x2ddc56;
      if (this.hasScriptLoaderBeenAppended) {
        return;
      }
      if (!((_0x2ddc56 = this.logger) === null || _0x2ddc56 === undefined)) {
        _0x2ddc56.debug("[metapixel-analytics] installing metapixel loader");
      }
      this.appendScript(`
    !function(f,b,e,v,n,t,s)
    {t=b.createElement(e);t.async=!0;
    t.src=v;s=b.getElementsByTagName(e)[0];
    s.parentNode.insertBefore(t,s)}(window, document,'script',
    'https://connect.facebook.net/en_US/fbevents.js');
    `);
      this.hasScriptLoaderBeenAppended = true;
    }
    appendScript(_0x5677cd) {
      const _0x31a700 = document.createElement("script");
      const _0x1ddcef = document.createTextNode(_0x5677cd);
      _0x31a700.appendChild(_0x1ddcef);
      window.document.getElementsByTagName("head")[0].appendChild(_0x31a700);
    }
  }
  _0x594dc6.REQUIRED_CONSENT_FLAGS = _0x510097.ConsentOptions.P4PersonalizedAds | _0x510097.ConsentOptions.P5PersonalizedContentProfile | _0x510097.ConsentOptions.P7MeasureAdPerformance;
  (function () {
    for (var _0x163d99 = [], _0x31b746 = 0; _0x31b746 < 64;) {
      _0x163d99[_0x31b746] = Math.abs(Math.sin(++_0x31b746)) * 4294967296 | 0;
    }
  })();
  class _0x1cc920 {
    constructor(_0x3f4a7c, _0x25b281) {
      this.auth = _0x25b281;
      this.baseUrl = _0x3f4a7c.replace(/\/$/, "");
    }
    getQuery(_0x43248, _0x23fc57, _0x1aeb40) {
      return _0x5baa30(this, undefined, undefined, function* () {
        var _0xf8e2a;
        const _0x2ebb57 = new URLSearchParams();
        if (_0x43248 !== undefined) {
          _0x2ebb57.set("userIds", _0x43248 != null ? _0x43248 : "");
        }
        if (_0x23fc57 !== undefined) {
          _0x2ebb57.set("games", _0x23fc57 != null ? _0x23fc57 : "");
        }
        if (_0x1aeb40 !== undefined) {
          _0x2ebb57.set("keys", _0x1aeb40 != null ? _0x1aeb40 : "");
        }
        const _0x46114d = _0x2ebb57.toString();
        const _0x214f93 = yield (_0xf8e2a = this.auth) === null || _0xf8e2a === undefined ? undefined : _0xf8e2a.authenticatedFetch(this.baseUrl + "/player/query?" + _0x46114d, {
          method: "GET",
          headers: {
            "Content-Type": "application/json"
          }
        });
        if (!(_0x214f93 == null ? undefined : _0x214f93.ok)) {
          throw new _0x450482(_0x214f93);
        }
        return yield _0x214f93.json();
      });
    }
    getAllPlayerObjects(_0x2424cc, _0x259208, _0x106748) {
      return _0x5baa30(this, undefined, undefined, function* () {
        var _0x47738b;
        const _0x1be448 = new URLSearchParams();
        if (_0x106748 !== undefined) {
          _0x1be448.set("keys", _0x106748 != null ? _0x106748 : "");
        }
        const _0x5b0c29 = _0x1be448.toString();
        const _0x5384bb = yield (_0x47738b = this.auth) === null || _0x47738b === undefined ? undefined : _0x47738b.authenticatedFetch(this.baseUrl + "/player/" + _0x2424cc + "/" + _0x259208 + "?" + _0x5b0c29, {
          method: "GET",
          headers: {
            "Content-Type": "application/json"
          }
        });
        if (!_0x5384bb.ok) {
          throw new _0x450482(_0x5384bb);
        }
        return yield _0x5384bb.json();
      });
    }
    createPlayerObject(_0x1dc4ed, _0x19ceef, _0xe4af05) {
      return _0x5baa30(this, undefined, undefined, function* () {
        var _0x44c98a;
        const _0x233a34 = yield (_0x44c98a = this.auth) === null || _0x44c98a === undefined ? undefined : _0x44c98a.authenticatedFetch(this.baseUrl + "/player/" + _0x1dc4ed + "/" + _0x19ceef, {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify(_0xe4af05)
        });
        if (!_0x233a34.ok) {
          throw new _0x450482(_0x233a34);
        }
        return yield _0x233a34.json();
      });
    }
    updatePlayerObject(_0x2d52de, _0x17ee4d, _0x42be13, _0x328fa3) {
      return _0x5baa30(this, undefined, undefined, function* () {
        var _0x1b3339;
        const _0x4f13f3 = yield (_0x1b3339 = this.auth) === null || _0x1b3339 === undefined ? undefined : _0x1b3339.authenticatedFetch(this.baseUrl + "/player/" + _0x2d52de + "/" + _0x17ee4d + "/" + _0x42be13, {
          method: "PUT",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify(_0x328fa3)
        });
        if (!_0x4f13f3.ok) {
          throw new _0x450482(_0x4f13f3);
        }
        return yield _0x4f13f3.json();
      });
    }
    deletePlayerObject(_0x377eae, _0x31a98d, _0x34179c, _0x388b2f) {
      return _0x5baa30(this, undefined, undefined, function* () {
        var _0x4124c9;
        const _0x45a8f7 = yield (_0x4124c9 = this.auth) === null || _0x4124c9 === undefined ? undefined : _0x4124c9.authenticatedFetch(this.baseUrl + "/player/" + _0x377eae + "/" + _0x31a98d + "/" + _0x34179c, {
          method: "DELETE",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify(_0x388b2f)
        });
        if (!_0x45a8f7.ok) {
          throw new _0x450482(_0x45a8f7);
        }
        return yield _0x45a8f7.json();
      });
    }
  }
  class _0x450482 extends Error {
    constructor(_0x299a43) {
      super(_0x299a43.statusText);
      this.response = _0x299a43;
      this.response = _0x299a43;
      this.name = "ResponseError";
    }
  }
  const _0x383a46 = {
    [_0x418110.PRODUCTION]: "https://crucible.frvr.com/v1/storage",
    [_0x418110.BETA]: "https://staging.crucible.frvr.com/v1/storage",
    [_0x418110.DEVELOPMENT]: "https://staging.crucible.frvr.com/v1/storage"
  };
  class _0x22a11e {
    constructor(_0x4978bf, _0x30ff8a, _0x51582b) {
      var _0x3c9669;
      var _0xa7f87a;
      var _0x483542;
      const _0x3dbff2 = (_0x3c9669 = _0x30ff8a == null ? undefined : _0x30ff8a.overrideURL) !== null && _0x3c9669 !== undefined ? _0x3c9669 : _0x383a46[_0x4978bf];
      this.gameId = _0x30ff8a.gameId;
      this.logger = _0x51582b == null ? undefined : _0x51582b.logger;
      this.auth = _0x51582b.auth;
      if (!((_0xa7f87a = this.logger) === null || _0xa7f87a === undefined)) {
        _0xa7f87a.log("[frvr-sdk] Player Storage for game " + this.gameId + " on " + _0x3dbff2);
      }
      const _0x390cbf = (_0x483542 = _0x51582b.clientBuilder) !== null && _0x483542 !== undefined ? _0x483542 : _0x4db803 => new _0x1cc920(_0x4db803, this.auth);
      this.client = _0x390cbf(_0x3dbff2, this.auth);
    }
    canUsePublicItems() {
      return true;
    }
    setPublicItems(_0x455acf) {
      return _0x5baa30(this, undefined, undefined, function* () {
        const _0xa13e9e = _0x455acf.map(_0x3bd182 => this.upsertItem(_0x3bd182.key, _0x3bd182.value, true));
        yield Promise.allSettled(_0xa13e9e);
      });
    }
    queryPublicItems(_0x232684) {
      return _0x5baa30(this, undefined, undefined, function* () {
        var _0x2e1375;
        var _0x336cd7;
        return yield this.client.getQuery((_0x2e1375 = _0x232684.userIds) === null || _0x2e1375 === undefined ? undefined : _0x2e1375.join(","), this.gameId, (_0x336cd7 = _0x232684.keys) === null || _0x336cd7 === undefined ? undefined : _0x336cd7.join(","));
      });
    }
    setItems(_0x623367) {
      return _0x5baa30(this, undefined, undefined, function* () {
        const _0x62950b = _0x623367.map(_0x5f01b0 => this.upsertItem(_0x5f01b0.key, _0x5f01b0.value));
        yield Promise.allSettled(_0x62950b);
      });
    }
    getItems(_0x1b394d) {
      return _0x5baa30(this, undefined, undefined, function* () {
        const _0x5210ab = (yield this.client.getAllPlayerObjects(this.getUserId(), this.gameId, _0x1b394d.join(","))).items.map(_0x9e2c0c => [_0x9e2c0c.key, _0x9e2c0c.data]);
        return Object.fromEntries(_0x5210ab);
      });
    }
    removeItems(_0xaef6bf) {
      return _0x5baa30(this, undefined, undefined, function* () {
        const _0xaa6238 = this.getUserId();
        const _0x4691bf = _0xaef6bf.map(_0x48cc28 => this.client.deletePlayerObject(_0xaa6238, this.gameId, _0x48cc28, undefined));
        yield Promise.allSettled(_0x4691bf);
      });
    }
    isPersistent() {
      return true;
    }
    getAllItems() {
      return _0x5baa30(this, undefined, undefined, function* () {
        const _0x29071f = (yield this.client.getAllPlayerObjects(this.getUserId(), this.gameId)).items.map(_0x20d8ac => [_0x20d8ac.key, _0x20d8ac.data]);
        return Object.fromEntries(_0x29071f);
      });
    }
    upsertItem(_0x2a4eb0, _0x3fec41) {
      return _0x5baa30(this, arguments, undefined, function* (_0x1e1e1d, _0x40ddab, _0x2be1e7 = false) {
        const _0x32b600 = this.getUserId();
        try {
          yield this.client.updatePlayerObject(_0x32b600, this.gameId, _0x1e1e1d, {
            version: undefined,
            data: _0x40ddab,
            public: _0x2be1e7
          });
        } catch (_0x175403) {
          yield this.client.createPlayerObject(_0x32b600, this.gameId, {
            key: _0x1e1e1d,
            data: _0x40ddab,
            public: _0x2be1e7
          });
        }
      });
    }
    getUserId() {
      return this.auth.getFRVRID();
    }
  }
  class _0x5382d7 {
    constructor({
      id: _0x13870e,
      contextID: _0x277808,
      endTime: _0x56095b,
      startTime: _0x2136c2,
      refreshInterval: _0x1ba2c2,
      title: _0xc85246,
      payload: _0x5b6e65,
      offset: _0x4ef0b5,
      players: _0x5b7009,
      type: _0x2576f3,
      count: _0x14094a
    }) {
      this.id = _0x13870e;
      this.contextID = _0x277808;
      if (_0x56095b) {
        this.endTime = _0x56095b;
      }
      if (_0x2136c2) {
        this.startTime = _0x2136c2;
      }
      this.refreshInterval = _0x1ba2c2;
      this.title = _0xc85246;
      this.payload = _0x5b6e65;
      this.offset = _0x4ef0b5;
      this.count = _0x14094a;
      if (_0x5b7009) {
        this.players = _0x5b7009;
      }
      if (_0x2576f3) {
        this.type = _0x2576f3;
      }
    }
  }
  class _0x39da14 {
    constructor(_0x2a1240) {
      this.id = _0x2a1240.id;
      this.name = _0x2a1240.name;
      this.photo = _0x2a1240.photo;
      this.rank = _0x2a1240.rank;
      if (_0x2a1240.updated) {
        this.updated = _0x2a1240.updated;
      }
      this.score = _0x2a1240.score;
      this.payload = _0x2a1240.payload;
    }
  }
  const _0x2f5462 = {
    [_0x418110.PRODUCTION]: "https://crucible.frvr.com",
    [_0x418110.BETA]: "https://staging.crucible.frvr.com",
    [_0x418110.DEVELOPMENT]: "https://staging.crucible.frvr.com"
  };
  var _0x33b6b6;
  var _0x2ea019;
  (function (_0x3118dc) {
    _0x3118dc.HIGHEST = "highest";
    _0x3118dc.LATEST = "latest";
  })(_0x33b6b6 || (_0x33b6b6 = {}));
  class _0x6b843f extends Error {
    constructor(_0x2a2538) {
      super();
      this.message = _0x2a2538.message;
      this.code = _0x2a2538.code;
      Object.setPrototypeOf(this, _0x6b843f.prototype);
    }
  }
  class _0x6df3cb {
    constructor(_0x3fb599) {
      this.channel = _0x3fb599;
    }
    init(_0x135571, _0x1cb85a) {
      this.apiUrl = _0x2f5462[_0x1cb85a];
      this.gameId = _0x135571;
      this.leaderboards = {};
    }
    createLeaderboard(_0xbe8e9c, _0x7bada1) {
      return _0x5baa30(this, undefined, undefined, function* () {
        const _0x16a2bc = this.apiUrl + "/v1/leaderboards";
        const _0x4a57ac = {
          game: this.gameId,
          title: _0x7bada1.title,
          endTime: _0x7bada1.endTime,
          refreshInterval: _0x7bada1.refreshInterval,
          type: _0xbe8e9c || "default",
          data: _0x7bada1.payload,
          sortOrder: _0x7bada1.sortOrder || "HIGHER_IS_BETTER"
        };
        if (_0x7bada1.id) {
          _0x4a57ac.id = _0x7bada1.id;
        }
        const _0x365aa3 = yield fetch(_0x16a2bc, {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify(_0x4a57ac)
        });
        const _0x51eaf2 = yield _0x365aa3.json();
        if (!_0x365aa3.ok) {
          throw new _0x6b843f(_0x51eaf2.error);
        }
        return _0x51eaf2.id;
      });
    }
    getLeaderboard(_0x500788) {
      return _0x5baa30(this, arguments, undefined, function* (_0x95187c, _0x615245 = 30, _0x4b5521 = 0, _0x456d80 = _0x33b6b6.HIGHEST) {
        const _0x4d0501 = this.apiUrl + "/v1/leaderboards/" + this.gameId + "/" + _0x95187c;
        const _0x2db3d6 = {
          count: _0x615245.toString(),
          offset: _0x4b5521.toString()
        };
        const _0x352a00 = yield fetch(_0x4d0501 + "?" + new URLSearchParams(_0x2db3d6));
        const _0xf94e59 = yield _0x352a00.json();
        if (!_0x352a00.ok) {
          throw new _0x6b843f(_0xf94e59.error);
        }
        _0xf94e59.payload = _0xf94e59.data;
        const _0x4861a7 = _0xf94e59.players ? _0xf94e59.players.map(_0x451afb => {
          const _0x27b3bc = new _0x39da14(_0x451afb);
          _0x27b3bc.score = this.getCachedScore(_0x95187c, _0x27b3bc.id, _0x27b3bc.score, _0x456d80);
          return _0x27b3bc;
        }) : [];
        _0xf94e59.players = _0x4861a7;
        return new _0x5382d7(_0xf94e59);
      });
    }
    getLeaderboardEntry(_0x5568a0, _0x402f25) {
      return _0x5baa30(this, arguments, undefined, function* (_0x5a1262, _0x666883, _0x4bc4c6 = _0x33b6b6.HIGHEST) {
        const _0x325230 = this.apiUrl + "/v1/leaderboards/" + this.gameId + "/" + _0x5a1262 + "/" + _0x666883;
        const _0x16717f = {
          platform: this.channel
        };
        const _0x2249eb = yield fetch(_0x325230 + "?" + new URLSearchParams(_0x16717f));
        const _0x1acff2 = yield _0x2249eb.json();
        if (!_0x2249eb.ok) {
          throw new _0x6b843f(_0x1acff2.error);
        }
        _0x1acff2.payload = _0x1acff2.data;
        _0x1acff2.score = this.getCachedScore(_0x5a1262, _0x666883, _0x1acff2.score, _0x4bc4c6);
        return new _0x39da14(_0x1acff2);
      });
    }
    submitScore(_0x43b689, _0x323b08, _0x73de92, _0xc051ea, _0x25be0d) {
      return _0x5baa30(this, arguments, undefined, function* (_0x30aec2, _0xd8d855, _0x312cd0, _0x33e473, _0x2637cf, _0x42f62b = _0x33b6b6.HIGHEST) {
        this.cacheScore(_0x30aec2, _0xd8d855, _0x312cd0, _0x42f62b);
        const _0x18cde9 = this.apiUrl + "/v1/leaderboards/" + this.gameId + "/" + _0x30aec2;
        const _0x1d93c6 = {
          id: _0xd8d855,
          score: _0x312cd0,
          platform: this.channel,
          disableSortOrder: _0x42f62b === _0x33b6b6.LATEST
        };
        if (_0x33e473) {
          _0x1d93c6.name = _0x33e473;
        }
        if (_0x2637cf) {
          _0x1d93c6.photo = _0x2637cf;
        }
        const _0x4024c0 = yield fetch(_0x18cde9, {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify(_0x1d93c6)
        });
        const _0x35d059 = yield _0x4024c0.json();
        if (!_0x4024c0.ok) {
          throw new _0x6b843f(_0x35d059.error);
        }
        return _0x35d059;
      });
    }
    getAllLeaderboardsIdsOfType(_0x11b972) {
      return _0x5baa30(this, undefined, undefined, function* () {
        return (yield this.getAllLeaderboardsOfType(Object.assign(Object.assign({}, _0x11b972), {
          verbose: false
        }))).ids || [];
      });
    }
    getAllLeaderboardsDataOfType(_0x52e7d8) {
      return _0x5baa30(this, undefined, undefined, function* () {
        return (yield this.getAllLeaderboardsOfType(Object.assign(Object.assign({}, _0x52e7d8), {
          verbose: true
        }))).leaderboards || [];
      });
    }
    getLeaderboardEntries(_0x1c4af3, _0x30bbd5) {
      return _0x5baa30(this, arguments, undefined, function* (_0x5283cc, _0x5e3ee9, _0x107156 = _0x33b6b6.HIGHEST) {
        if (!_0x5e3ee9.length) {
          return [];
        }
        const _0x5e134d = this.apiUrl + "/v1/leaderboards/" + this.gameId + "/" + _0x5283cc + "/entries";
        const _0x4b8d42 = {
          platform: this.channel,
          players: _0x5e3ee9.join(",")
        };
        const _0x4362b1 = yield fetch(_0x5e134d + "?" + new URLSearchParams(_0x4b8d42));
        const _0x5abd0b = yield _0x4362b1.json();
        if (!_0x4362b1.ok) {
          throw new _0x6b843f(_0x5abd0b.error);
        }
        return ((_0x5abd0b == null ? undefined : _0x5abd0b.entries) || []).map(_0x2dfcc8 => {
          _0x2dfcc8.payload = _0x2dfcc8.data;
          _0x2dfcc8.score = this.getCachedScore(_0x5283cc, _0x2dfcc8.id, _0x2dfcc8.score, _0x107156);
          return new _0x39da14(_0x2dfcc8);
        });
      });
    }
    getTimelineEntries(_0x5f4bc0) {
      return _0x5baa30(this, arguments, undefined, function* ({
        leaderboardId: _0x10a4bd,
        interval: _0x4ef210,
        minScore: _0x15bda5,
        maxScore: _0x429d9c,
        limit: _0x29f7f0,
        page: _0x15774c
      }) {
        const _0x19bbca = this.apiUrl + "/v1/leaderboards/" + this.gameId + "/" + _0x10a4bd + "/timeline";
        const _0x1fd159 = {
          platform: this.channel,
          interval: _0x4ef210.toString(),
          minInterval: _0x15bda5.toString(),
          maxInterval: _0x429d9c.toString(),
          entries: _0x29f7f0 == null ? undefined : _0x29f7f0.toString(),
          page: _0x15774c == null ? undefined : _0x15774c.toString()
        };
        const _0x12cdcc = new URLSearchParams();
        for (const [_0x455f31, _0x4616a8] of Object.entries(_0x1fd159)) {
          if (_0x4616a8 !== undefined) {
            _0x12cdcc.set(_0x455f31, _0x4616a8);
          }
        }
        const _0x487655 = yield fetch(_0x19bbca + "?" + _0x12cdcc);
        const _0x200809 = yield _0x487655.json();
        if (!_0x487655.ok) {
          throw new _0x6b843f(_0x200809.error);
        }
        return ((_0x200809 == null ? undefined : _0x200809.entries) || []).map(_0x26b5c3 => new _0x39da14(_0x26b5c3));
      });
    }
    getAllLeaderboardsOfType(_0x63345e) {
      return _0x5baa30(this, arguments, undefined, function* ({
        type: _0x2bdca1,
        playerId: _0x3f3dc7,
        sortBy: _0x3787fb = "created",
        sortOrder: _0x4c89e3 = "desc",
        count: _0x4c509b = 30,
        offset: _0x44bd52 = 0,
        verbose: _0xba9418 = false
      }) {
        const _0x23f578 = this.apiUrl + "/v1/players/" + this.gameId + "/" + _0x3f3dc7;
        const _0x265996 = {
          type: _0x2bdca1,
          platform: this.channel,
          sortOrder: _0x4c89e3,
          sortBy: _0x3787fb,
          count: _0x4c509b.toString(),
          offset: _0x44bd52.toString(),
          verbose: _0xba9418 ? "true" : "false"
        };
        const _0x6dd865 = yield fetch(_0x23f578 + "?" + new URLSearchParams(_0x265996));
        const _0x42d3f7 = yield _0x6dd865.json();
        if (!_0x6dd865.ok) {
          throw new _0x6b843f(_0x42d3f7.error);
        }
        return _0x42d3f7;
      });
    }
    buildScoreCache(_0x30d50c) {
      if (!this.leaderboards[_0x30d50c]) {
        this.leaderboards[_0x30d50c] = {
          scores: {}
        };
      }
      return this.leaderboards[_0x30d50c];
    }
    getCachedScore(_0x3d5bb1, _0x3c2836, _0x48f973, _0x3cc45c) {
      const _0x3c58a6 = this.buildScoreCache(_0x3d5bb1);
      const _0x23b758 = _0x3c58a6.scores[_0x3c2836];
      if (!_0x3cc45c) {
        throw new Error("Somehow, we are missing cache policy!");
      }
      switch (_0x3cc45c) {
        case _0x33b6b6.HIGHEST:
          _0x48f973 = Math.max(_0x23b758 != null ? _0x23b758 : 0, _0x48f973);
          _0x3c58a6.scores[_0x3c2836] = _0x48f973;
          break;
        case _0x33b6b6.LATEST:
          _0x48f973 = _0x23b758 != null ? _0x23b758 : _0x48f973;
      }
      return _0x48f973;
    }
    cacheScore(_0x593690, _0x51be67, _0x9f963d, _0x54d119) {
      const _0x50cf82 = this.buildScoreCache(_0x593690);
      const _0x1f9a47 = _0x50cf82.scores[_0x51be67];
      if (!_0x54d119) {
        throw new Error("Somehow, we are missing cache policy!");
      }
      switch (_0x54d119) {
        case _0x33b6b6.HIGHEST:
          _0x9f963d = Math.max(_0x1f9a47 != null ? _0x1f9a47 : 0, _0x9f963d);
        case _0x33b6b6.LATEST:
      }
      _0x50cf82.scores[_0x51be67] = _0x9f963d;
    }
  }
  (function (_0x2e9496) {
    _0x2e9496[_0x2e9496.create = 0] = "create";
    _0x2e9496[_0x2e9496.getCurrentTournament = 1] = "getCurrentTournament";
    _0x2e9496[_0x2e9496.getActiveTournaments = 2] = "getActiveTournaments";
    _0x2e9496[_0x2e9496.postScore = 3] = "postScore";
    _0x2e9496[_0x2e9496.join = 4] = "join";
    _0x2e9496[_0x2e9496.leave = 5] = "leave";
    _0x2e9496[_0x2e9496.share = 6] = "share";
    _0x2e9496[_0x2e9496.invitePlayers = 7] = "invitePlayers";
  })(_0x2ea019 || (_0x2ea019 = {}));
  const _0x4fcae1 = {
    isSupported: () => false,
    getSupportedAPIs: () => [],
    getLeaderboardsChannelId: () => "empty",
    getCurrentTournament() {
      return _0x5baa30(this, undefined, undefined, function* () {
        return null;
      });
    },
    create() {
      return _0x5baa30(this, undefined, undefined, function* () {
        return null;
      });
    },
    postScore() {
      return _0x5baa30(this, undefined, undefined, function* () {});
    },
    share() {
      return _0x5baa30(this, undefined, undefined, function* () {});
    },
    getActiveTournaments() {
      return _0x5baa30(this, undefined, undefined, function* () {
        return [];
      });
    },
    join() {
      return _0x5baa30(this, undefined, undefined, function* () {});
    },
    leave() {
      return _0x5baa30(this, undefined, undefined, function* () {});
    },
    invitePlayers() {
      return _0x5baa30(this, undefined, undefined, function* () {});
    }
  };
  class _0x5c491d {
    constructor(_0xdb32a, _0x27769f) {
      this.consentsBitSet = _0x447619.None;
      this.legitimateInterestsBitSet = _0x447619.None;
      this.consentIsLoaded = false;
      this.getName = () => "TcfV2ConsentProvider";
      this.logger = _0x27769f;
      this.onConsentChangedHandlers = [];
      this.loadConsentManagementPlatform(_0xdb32a);
    }
    tcfDataBitSet2ConsentOptionsBitSet(_0x4faae5) {
      let _0x1e36cf = 0;
      for (const _0x1d8731 in _0x4faae5) {
        if (_0x4faae5[_0x1d8731]) {
          _0x1e36cf |= 1 << Number(_0x1d8731);
        }
      }
      return _0x1e36cf;
    }
    onLoad() {
      var _0x2934f6;
      if (window.__tcfapi) {
        if (!((_0x2934f6 = this.logger) === null || _0x2934f6 === undefined)) {
          _0x2934f6.log(this.getName() + "::onLoad()");
        }
        const _0x5c6c67 = (_0x21b550, _0x2ccbe5) => {
          var _0x1774c8;
          var _0x1d2180;
          var _0x337381;
          if (_0x2ccbe5) {
            if (!(_0x21b550.eventStatus !== "useractioncomplete" && _0x21b550.eventStatus !== "tcloaded")) {
              this.consentIsLoaded = true;
              this.consentsBitSet = this.tcfDataBitSet2ConsentOptionsBitSet((_0x1d2180 = _0x21b550.purpose.consents) !== null && _0x1d2180 !== undefined ? _0x1d2180 : {});
              this.legitimateInterestsBitSet = this.tcfDataBitSet2ConsentOptionsBitSet((_0x337381 = _0x21b550.purpose.legitimateInterests) !== null && _0x337381 !== undefined ? _0x337381 : {});
              this.dispatchConsentChanged(this.consentsBitSet, this.legitimateInterestsBitSet);
            }
          } else if (!((_0x1774c8 = this.logger) === null || _0x1774c8 === undefined)) {
            _0x1774c8.warn(this.getName() + "::onLoad::updateConsentCallback:!success");
          }
        };
        window.__tcfapi("addEventListener", 2, _0x5c6c67);
      }
    }
    dispatchConsentChanged(_0x440142, _0x39607a) {
      for (let _0x2d4e8f = 0; _0x2d4e8f < this.onConsentChangedHandlers.length; _0x2d4e8f++) {
        this.onConsentChangedHandlers[_0x2d4e8f](_0x440142, _0x39607a);
      }
    }
    hasLoaded() {
      return this.consentIsLoaded;
    }
    isConsentEditable() {
      return true;
    }
    loadConsentManagementPlatform(_0x5027a6) {
      let _0x1b263c = 1;
      const _0x28a254 = () => {
        if (window.__tcfapi) {
          this.onLoad();
        } else {
          // TOLOOK
          setTimeout(_0x28a254, _0x1b263c);
          _0x1b263c *= 2;
          if (_0x1b263c > 4000) {
            _0x1b263c = 4000;
          }
        }
      };
      _0x28a254();
    }
    consentToTerms() {
      var _0x34b0c4;
      if (!((_0x34b0c4 = this.logger) === null || _0x34b0c4 === undefined)) {
        _0x34b0c4.warn(this.getName() + "::consentToTerms(NoOpImpl)");
      }
    }
    supportsAutoInitialization() {
      return true;
    }
    onConsentChanged(_0x10ec19) {
      this.onConsentChangedHandlers.push(_0x10ec19);
      if (this.consentIsLoaded) {
        _0x10ec19(this.consentsBitSet, this.legitimateInterestsBitSet);
      }
    }
    hasConsentForAny(_0x45b0a7, _0x3ae462 = _0x447619.None) {
      return this.hasLoaded() && (this.consentsBitSet & _0x45b0a7) != 0;
    }
    hasConsentForAll(_0x3838af, _0x5d8ee5 = _0x447619.None) {
      return this.hasLoaded() && (this.consentsBitSet & _0x3838af) == _0x3838af;
    }
    consents() {
      return this.consentsBitSet;
    }
    legitimateInterests() {
      return this.legitimateInterestsBitSet;
    }
  }
  class _0x3fa2f3 extends _0x5c491d {
    constructor(_0x208634, _0x3f2513) {
      super(_0x208634, _0x3f2513);
      this.scriptIsLoaded = false;
      this.getName = () => "CookieproConsentProvider";
    }
    loadConsentManagementPlatform(_0x170b17) {
      const _0x40abad = document.createElement("script");
      _0x40abad.type = "text/javascript";
      _0x40abad.src = "https://cookie-cdn.cookiepro.com/scripttemplates/otSDKStub.js";
      _0x40abad.setAttribute("data-domain-script", _0x170b17.websiteKey);
      _0x40abad.async = true;
      _0x40abad.defer = true;
      _0x40abad.onload = () => {
        if (!this.scriptIsLoaded) {
          this.scriptIsLoaded = true;
          super.loadConsentManagementPlatform(_0x170b17);
        }
      };
      document.head.appendChild(_0x40abad);
      const _0x392fc2 = document.createElement("script");
      _0x40abad.type = "text/javascript";
      _0x392fc2.innerHTML = "function OptanonWrapper() { }";
      document.head.appendChild(_0x392fc2);
      const _0x21ee7d = document.createElement("style");
      _0x21ee7d.setAttribute("type", "text/css");
      _0x21ee7d.textContent = "div#ot-sdk-btn-floating { display: none !important; }";
      document.head.appendChild(_0x21ee7d);
    }
    consentToTerms() {
      var _0x157ec8;
      if (this.hasLoaded()) {
        if (!((_0x157ec8 = window.OneTrust) === null || _0x157ec8 === undefined)) {
          _0x157ec8.ToggleInfoDisplay();
        }
      }
    }
  }
  class _0x3b3292 {
    constructor(_0x5a84bd) {
      this.targetOrigin = _0x5a84bd;
    }
    init() {
      return _0x5baa30(this, undefined, undefined, function* () {});
    }
    getName() {
      return "post-message";
    }
    send(_0x2fc5d4, _0x550bd4, _0x3720ac, _0x1ffcb5) {
      const _0x23e5c7 = {
        debug: true,
        event: _0x2fc5d4,
        text: "Some text",
        fields: _0x3720ac
      };
      console.log("[ QA Tool Post Message (" + this.targetOrigin + ")] " + _0x23e5c7.event + " - " + JSON.stringify(_0x23e5c7.fields));
      window.parent.postMessage(_0x23e5c7, "*");
    }
  }
  class _0x275ea2 {
    constructor(_0x5514c3, _0x1fbe55, _0x33a8d2, _0x7e78ba) {
      this.leaderboardClient = _0x5514c3;
      this.logger = _0x1fbe55;
      this.auth = _0x33a8d2;
      this.profile = _0x7e78ba;
    }
    init(_0x72889e, _0x135524) {
      this.leaderboardClient.init(_0x72889e, _0x135524);
    }
    isSupported() {
      return true;
    }
    getLeaderboardEntries(_0x3201ab, _0x557ee7, _0xfd3811) {
      return this.leaderboardClient.getLeaderboardEntries(_0x3201ab, _0x557ee7, _0xfd3811);
    }
    getLeaderboardEntry(_0x3c05c7, _0xb97c84, _0x4c75d9) {
      return this.leaderboardClient.getLeaderboardEntry(_0x3c05c7, _0xb97c84, _0x4c75d9);
    }
    getLeaderboard(_0xe1942, _0x1f50b0, _0x1219c8, _0x102937) {
      return this.leaderboardClient.getLeaderboard(_0xe1942, _0x1f50b0, _0x1219c8, _0x102937);
    }
    postScore(_0x78e613, _0x90f663, _0x3edbae) {
      return _0x5baa30(this, undefined, undefined, function* () {
        var _0x50f4ca;
        var _0xc48880;
        if (!_0x78e613) {
          this.logger.error("missing leaderboard id");
          return;
        }
        const _0x2df665 = this.auth.getFRVRID();
        if (!_0x2df665) {
          this.logger.error("missing player id");
          return;
        }
        const _0x415962 = (_0x50f4ca = this.profile) === null || _0x50f4ca === undefined ? undefined : _0x50f4ca.name();
        if (!_0x415962) {
          this.logger.error("missing player name");
          return;
        }
        const _0x3c8dde = (_0xc48880 = this.profile) === null || _0xc48880 === undefined ? undefined : _0xc48880.image();
        yield this.leaderboardClient.submitScore(_0x78e613, _0x2df665, _0x90f663, _0x415962, _0x3c8dde, _0x3edbae);
      });
    }
    create(_0x1dad4e, _0xf0faa2) {
      return _0x5baa30(this, undefined, undefined, function* () {
        if (_0x1dad4e) {
          if (_0xf0faa2.refreshInterval && _0xf0faa2.refreshInterval <= 0) {
            this.logger.error("invalid refresh interval");
          } else {
            this.leaderboardClient.createLeaderboard("TOURNAMENT", {
              id: _0x1dad4e,
              title: _0xf0faa2.title || _0x1dad4e,
              refreshInterval: _0xf0faa2.refreshInterval,
              endTime: _0xf0faa2.refreshInterval ? undefined : Date.now() + 3153600000000,
              sortOrder: "HIGHER_IS_BETTER"
            });
          }
        } else {
          this.logger.error("missing leaderboard id");
        }
      });
    }
    getTimelineEntries(_0x598995) {
      return this.leaderboardClient.getTimelineEntries(_0x598995);
    }
  }
  class _0x2fa408 {
    constructor(_0x265637, _0x475725) {
      this.adConfigProvider = _0x265637;
      this.fran = _0x475725;
      this.entryPointProvider = new _0x510097.WebEntryPointProvider();
      this.adConfigProvider = _0x265637;
      this.fran = _0x475725 != null ? _0x475725 : new _0x1dc2a7();
      this.fran.setChannelId(this.getMappedChannel());
      this.characteristics = Object.assign(Object.assign({}, _0x510097.defaultCharacteristics), {
        hasDedicatedLoadingScreen: false
      });
    }
    onModulesUpdated({
      logger: _0x3d374c,
      tracker: _0xe5a93c,
      auth: _0x4ecb1b
    }) {
      this.logger = _0x3d374c;
      this.tracker = _0xe5a93c;
      this.auth = _0x4ecb1b;
      this.buildConsentProvider();
      this.buildAdConfigProvider();
    }
    buildAdConfigProvider() {
      if (!this.adConfigProvider && this.logger) {
        this.adConfigProvider = new _0x42bb24(this.getPlatform(), this.getMappedChannel(), this.logger);
      }
    }
    buildConsentProvider() {
      var _0x584367;
      if (this.consentProvider || !((_0x584367 = this.consentConfig) === null || _0x584367 === undefined ? undefined : _0x584367.providerName) || !this.logger) {
        return;
      }
      const {
        providerName: _0x2b3acd,
        config: _0x5cf41b
      } = this.consentConfig;
      if (_0x2b3acd === "tcfv2") {
        this.consentProvider = new _0x5c491d(_0x5cf41b, this.logger);
      } else if (_0x2b3acd === "cookiepro") {
        if (!_0x5cf41b) {
          throw new Error("missing config for cookiepro");
        }
        this.consentProvider = new _0x3fa2f3(_0x5cf41b, this.logger);
      }
    }
    setConfig(_0x3085c1) {
      this.gameId = _0x3085c1.gameId;
      this.consentConfig = _0x3085c1.consent;
    }
    getId() {
      return "web";
    }
    getPlatform() {
      return "web";
    }
    getMappedChannel() {
      return _0x510097.inMemoryChannelMapper.getChannel();
    }
    getBootstrapper() {
      return new _0x1ed82f(this.logger);
    }
    getConsentProvider() {
      var _0x5cab07;
      if ((_0x5cab07 = this.consentProvider) !== null && _0x5cab07 !== undefined) {
        return _0x5cab07;
      } else {
        return _0x510097.consentToAllConsentProvider;
      }
    }
    getAnalyticsProviders(_0x1c9049, _0x519de2) {
      var _0x3cba11;
      if (_0x519de2 === _0x510097.Env.DEVELOPMENT) {
        const _0x188629 = new _0x3b3292("https://localhost:3000");
        if (new URLSearchParams(window.location.search).has("qatoolEnabled")) {
          return [_0x188629];
        } else {
          return [];
        }
      }
      const _0x3e4f5a = {
        pixelId: (_0x3cba11 = _0x1c9049 == null ? undefined : _0x1c9049.metapixel) === null || _0x3cba11 === undefined ? undefined : _0x3cba11.pixelId
      };
      const _0x3ccdaa = _0x3e4f5a.pixelId && new _0x594dc6(_0x3e4f5a.pixelId);
      const _0x1448f9 = new _0x3b3292("https://beta.frvr.com");
      const _0x1c4701 = new URLSearchParams(window.location.search);
      return [new _0x510097.FRVRAnalytics({
        disableSendBeacon: !this.characteristics.allowSendBeacon
      }), ...(_0x1c4701.has("qatoolEnabled") ? [_0x1448f9] : []), ...(_0x3ccdaa ? [_0x3ccdaa] : [])];
    }
    getAnalyticsIDProvider(_0x4fa6d8) {
      return new _0x510097.WebIDProvider(_0x4fa6d8);
    }
    getAdsProviders(_0x3acadd) {
      return [...this.fran.getProviders(_0x3acadd)];
    }
    getShortcutProvider() {
      return new _0x1b960b(this.logger, this.tracker);
    }
    getLocalStorageProvider() {
      return _0x510097.buildStorageProvider([_0x510097.WebLocalStorageProvider.providerName, _0x510097.MemoryAsyncStorageProvider.providerName]);
    }
    getCloudStorageProvider(_0x78b655, _0x1663b4) {
      return _0x5baa30(this, undefined, undefined, function* () {
        return new _0x22a11e(_0x1663b4, Object.assign({
          gameId: this.gameId
        }, _0x78b655 == null ? undefined : _0x78b655.playerStorage), {
          auth: this.auth,
          logger: this.logger
        });
      });
    }
    getTrackerContextProvider(_0x169cdf) {
      return _0x510097.buildTrackerWebContextProvider(_0x169cdf);
    }
    getCrossplay() {
      return new _0x5365e();
    }
    getCharacteristics() {
      return this.characteristics;
    }
    getEntryPointProvider() {
      return this.entryPointProvider;
    }
    getAdsConfig(_0x2c1c8e) {
      return _0x5baa30(this, undefined, undefined, function* () {
        var _0x508a1f;
        if (!(_0x2c1c8e == null ? undefined : _0x2c1c8e.remote)) {
          return _0x2c1c8e;
        }
        if (!this.gameId) {
          throw new Error("Game ID is not set");
        }
        try {
          return yield this.adConfigProvider.get(this.gameId);
        } catch (_0x17e813) {
          if (!((_0x508a1f = this.logger) === null || _0x508a1f === undefined)) {
            _0x508a1f.error(_0x17e813);
          }
        }
        return _0x2c1c8e;
      });
    }
    getLeaderboardsProvider() {
      return new _0x275ea2(new _0x6df3cb(this.getId()), this.logger, this.auth);
    }
    getTournamentsProvider() {
      _0x3eb713 = this.getId();
      return Object.assign(Object.assign({}, _0x4fcae1), {
        getLeaderboardsChannelId: () => _0x3eb713
      });
      var _0x3eb713;
    }
    getNavigationProvider(_0x4659aa) {
      return new _0x356959(_0x4659aa);
    }
    getSetScoreProvider() {
      var _0xe6c1d6;
      if ((_0xe6c1d6 = this.setScoreProvider) !== null && _0xe6c1d6 !== undefined) {
        return _0xe6c1d6;
      } else {
        return undefined;
      }
    }
    getNotificationsProvider() {
      var _0x36f72b;
      if ((_0x36f72b = this.notificationProvider) !== null && _0x36f72b !== undefined) {
        return _0x36f72b;
      } else {
        return _0x510097.emptyNotificationsProvider;
      }
    }
    getCrosspromo() {
      return this.crosspromo || _0x510097.emptyCrosspromo;
    }
  }
  class _0x164463 {
    getName() {
      return "crazygames";
    }
    isReady() {
      var _0x35d380;
      var _0x5c1ac1;
      var _0x2ca725;
      return ((_0x2ca725 = (_0x5c1ac1 = (_0x35d380 = window.CrazyGames) === null || _0x35d380 === undefined ? undefined : _0x35d380.SDK) === null || _0x5c1ac1 === undefined ? undefined : _0x5c1ac1.init) === null || _0x2ca725 === undefined ? undefined : _0x2ca725.call(_0x5c1ac1)) !== undefined;
    }
    useManualControl() {
      return false;
    }
    init(_0x138121, _0x55deef, _0x5d976f) {
      return _0x5baa30(this, undefined, undefined, function* () {
        this.adTracker = _0x5d976f;
      });
    }
    setUserConsent(_0x192c26) {}
    show() {
      return new Promise((_0x2d6710, _0x5b7763) => {
        if (!window.CrazyGames.SDK.ad) {
          _0x5b7763(new Error("CrazyGames SDK not available"));
          return;
        }
        let _0x21fc6a = false;
        const _0x1aeec1 = {
          adFinished: () => {
            this.adTracker.finishedAd(_0x510097.AdFinishedStatus.SUCCESS);
            _0x2d6710({
              success: true,
              code: this.getAdSuccessCode()
            });
          },
          adError: _0xcbe97 => {
            this.adTracker.receivedAdResponse(_0x510097.AdResponseStatus.ERROR);
            this.adTracker.finishedAd(_0x510097.AdFinishedStatus.ERROR);
            _0x5b7763({
              success: false,
              code: _0x21fc6a ? _0x510097.AdError.ON_SHOW : _0x510097.AdError.ON_LOAD
            });
          },
          adStarted: () => {
            _0x21fc6a = true;
            this.adTracker.receivedAdResponse(_0x510097.AdResponseStatus.SUCCESS);
            this.adTracker.willShowAd(false);
          }
        };
        this.adTracker.requestingAd();
        window.CrazyGames.SDK.ad.requestAd(this.getCrazyGamesAdType(), _0x1aeec1);
      });
    }
  }
  class _0x73647f extends _0x164463 {
    constructor() {
      super(...arguments);
      this.CRAZYGAMES_INTERSTITIAL_TYPE = "midgame";
    }
    getType() {
      return _0x510097.AdType.INTERSTITIAL;
    }
    getCrazyGamesAdType() {
      return this.CRAZYGAMES_INTERSTITIAL_TYPE;
    }
    getAdSuccessCode() {
      return _0x510097.AdSuccess.DELIVERED;
    }
  }
  class _0x5b96f0 extends _0x164463 {
    constructor() {
      super(...arguments);
      this.CRAZYGAMES_REWARDED_TYPE = "rewarded";
    }
    getType() {
      return _0x510097.AdType.REWARD;
    }
    getCrazyGamesAdType() {
      return this.CRAZYGAMES_REWARDED_TYPE;
    }
    getAdSuccessCode() {
      return _0x510097.AdSuccess.COMPLETED;
    }
  }
  function _0x492139(_0x2a1ac4, _0x636ae5) {
    return new Promise(_0x108c16 => {
      let _0x5127b4 = document.getElementById(_0x636ae5);
      if (_0x5127b4) {
        _0x108c16();
      } else {
        _0x5127b4 = document.createElement("script");
        _0x5127b4.setAttribute("id", _0x636ae5);
        _0x5127b4.setAttribute("type", "text/javascript");
        _0x5127b4.setAttribute("src", _0x2a1ac4);
        document.getElementsByTagName("head")[0].appendChild(_0x5127b4);
        _0x5127b4.onload = () => _0x108c16();
      }
    });
  }
  function _0x8b3c71(_0x5e23db, _0x4ccf16, _0x8772e) {
    return new Promise((_0x4c9f56, _0x590e2a) => {
      let _0x253f03;
      let _0xeb6946 = 0;
      (function _0x1c017a() {
        if (_0xeb6946++ > _0x4ccf16) {
          if (_0x253f03) {
            clearTimeout(_0x253f03);
          }
          _0x590e2a(new Error("Retry limit exceeded"));
          return;
        }
        _0x5e23db().then(_0x28c047 => {
          if (_0x28c047 !== undefined) {
            if (_0x253f03) {
              clearTimeout(_0x253f03);
            }
            _0x4c9f56(_0x28c047);
            return;
          }
          _0x253f03 = // TOLOOK
          setTimeout(_0x1c017a, _0x8772e);
        }).catch(() => {
          _0x253f03 = // TOLOOK
          setTimeout(_0x1c017a, _0x8772e);
        });
      })();
    });
  }
  class _0x29f424 {
    constructor(_0x4828b6) {
      this.logger = _0x4828b6;
    }
    init() {
      return _0x5baa30(this, undefined, undefined, function* () {
        var _0x16c8f4;
        this.logger.info("CrazyGames bootstrapper init");
        yield _0x492139("https://sdk.crazygames.com/crazygames-sdk-v3.js", "crazySdkScript");
        for (; !((_0x16c8f4 = window.CrazyGames) === null || _0x16c8f4 === undefined ? undefined : _0x16c8f4.SDK);) {
          yield new Promise(_0x562028 => // TOLOOK
          setTimeout(_0x562028, 100));
        }
        yield window.CrazyGames.SDK.init();
        window.CrazyGames.SDK.game.loadingStart();
      });
    }
    setProgress(_0x66e6f0) {}
    complete() {
      return _0x5baa30(this, undefined, undefined, function* () {
        window.CrazyGames.SDK.game.loadingStop();
        window.CrazyGames.SDK.game.gameplayStart();
      });
    }
  }
  class _0x1b1082 extends _0x2fa408 {
    constructor(_0x1f7463, _0x5489d9) {
      super(_0x1f7463, _0x5489d9);
    }
    getId() {
      return "crazygames";
    }
    getBootstrapper() {
      return new _0x29f424(this.logger);
    }
    getAdsProviders(_0x15e3c0) {
      return super.getAdsProviders(_0x15e3c0).concat([new _0x73647f(), new _0x5b96f0()]);
    }
  }
  class _0x29e0cc {
    constructor() {
      this.isHolding = true;
    }
    getName() {
      return "microsoft";
    }
    isReady() {
      return !!this.adInstance;
    }
    init(_0x5c8d06, _0x297961, _0x4b21d2) {
      return _0x5baa30(this, undefined, undefined, function* () {
        this.adTracker = _0x4b21d2;
        // TOLOOK
        setTimeout(() => this.preload(), 3000);
        this.startHoldingPeriod();
      });
    }
    startHoldingPeriod() {
      this.isHolding = true;
      // TOLOOK
      setTimeout(() => this.isHolding = false, 30000);
    }
    preload() {
      if (!this.adInstance) {
        if (!this.loadingPromise) {
          this.loadingPromise = _0x8b3c71(() => this.load(), 5, 2500).catch(() => {
            this.adTracker.receivedAdResponse(_0x510097.AdResponseStatus.NOFILL);
          }).finally(() => {
            this.loadingPromise = undefined;
          });
        }
        return this.loadingPromise;
      }
    }
    load() {
      return _0x5baa30(this, undefined, undefined, function* () {
        this.adTracker.requestingAd();
        const _0x38122f = yield function (_0x43af7b, _0x445213) {
          return _0x5baa30(this, undefined, undefined, function* () {
            return yield Promise.race([_0x43af7b, new Promise(_0x3d749f => // TOLOOK
            setTimeout(_0x3d749f, _0x445213))]);
          });
        }(this.loadAdsAsync(), 5000);
        if (_0x38122f == null ? undefined : _0x38122f.instanceId) {
          this.adInstance = _0x38122f;
          this.adTracker.receivedAdResponse(_0x510097.AdResponseStatus.SUCCESS, _0x38122f.instanceId);
          return _0x38122f;
        }
        this.adTracker.receivedAdResponse(_0x510097.AdResponseStatus.NOFILL);
      });
    }
    show() {
      return _0x5baa30(this, undefined, undefined, function* () {
        if (this.isHolding) {
          return {
            success: false,
            code: _0x510097.AdError.BLOCKED,
            message: "In holding period"
          };
        }
        const _0x57b0c5 = !!this.adInstance;
        if (!_0x57b0c5) {
          yield this.preload();
        }
        if (!this.adInstance) {
          return {
            success: false,
            code: _0x510097.AdError.NOFILL,
            message: "No ad instance"
          };
        }
        const _0x27fef8 = this.adInstance;
        let _0x3f5746;
        this.adTracker.willShowAd(_0x57b0c5, _0x27fef8.instanceId);
        try {
          _0x3f5746 = yield $msstart.showAdsAsync(_0x27fef8.instanceId);
          this.adInstance = undefined;
        } catch (_0x183d6d) {
          return {
            success: false,
            code: _0x510097.AdError.ON_SHOW,
            message: _0x183d6d.message
          };
        }
        try {
          yield _0x3f5746.showAdsCompletedAsync;
        } catch (_0x4962b9) {
          if (this.getType() === _0x510097.AdType.REWARD) {
            return {
              success: true,
              code: _0x510097.AdSuccess.DELIVERED
            };
          } else {
            return {
              success: false,
              code: _0x510097.AdError.ON_SHOW,
              message: _0x4962b9.message
            };
          }
        }
        this.preload();
        this.startHoldingPeriod();
        return {
          success: true,
          code: _0x510097.AdSuccess.COMPLETED
        };
      });
    }
    useManualControl() {
      return false;
    }
  }
  class _0x9e3de4 extends _0x29e0cc {
    getType() {
      return _0x510097.AdType.INTERSTITIAL;
    }
    loadAdsAsync() {
      return $msstart.loadAdsAsync({
        canBackfill: true
      });
    }
  }
  class _0x4a2e89 extends _0x29e0cc {
    getType() {
      return _0x510097.AdType.REWARD;
    }
    loadAdsAsync() {
      return $msstart.loadAdsAsync({
        isRewardedAd: true,
        canBackfill: true
      });
    }
  }
  var _0x4162a6;
  (function (_0x54aca3) {
    _0x54aca3.TOP = "top:320x50";
    _0x54aca3.BOTTOM = "bottom:320x50";
  })(_0x4162a6 || (_0x4162a6 = {}));
  class _0x41607d {
    constructor() {
      this.initialized = false;
    }
    getType() {
      return _0x510097.AdType.BANNER;
    }
    getName() {
      return "microsoft";
    }
    hide() {
      return _0x5baa30(this, undefined, undefined, function* () {
        yield $msstart.hideDisplayAdsAsync();
        this.adTracker.finishedAd(_0x510097.AdFinishedStatus.SUCCESS);
      });
    }
    init(_0x364d29, _0x3e7883, _0xb8a171) {
      return _0x5baa30(this, undefined, undefined, function* () {
        this.adTracker = _0xb8a171;
        this.initialized = true;
      });
    }
    isReady() {
      return this.initialized;
    }
    show() {
      return _0x5baa30(this, undefined, undefined, function* () {
        try {
          yield $msstart.showDisplayAdsAsync(_0x4162a6.BOTTOM);
          this.adTracker.receivedAdResponse(_0x510097.AdResponseStatus.SUCCESS);
          this.adTracker.willShowAd(false);
          return {
            success: true,
            code: _0x510097.AdSuccess.COMPLETED
          };
        } catch (_0x52a4ca) {
          const _0x48e3f9 = _0x52a4ca;
          this.adTracker.receivedAdResponse(_0x510097.AdResponseStatus.ERROR);
          this.adTracker.finishedAd(_0x510097.AdFinishedStatus.ERROR);
          return {
            success: false,
            code: _0x510097.AdError.ON_SHOW,
            message: _0x48e3f9.description
          };
        }
      });
    }
    useManualControl() {
      return true;
    }
  }
  class _0x175cfe {
    constructor(_0x1f8fe7, _0xfd8f57, _0x25c72d) {
      this.logger = _0x1f8fe7;
      this.entryPoint = _0xfd8f57;
      this.tracker = _0x25c72d;
    }
    init() {
      return _0x5baa30(this, undefined, undefined, function* () {
        var _0x59894b;
        this.logger.info("Microsoft PWA bootstrapper init");
        yield _0x492139("https://assets.msn.com/staticsb/statics/latest/msstart-games-sdk/msstart-v1.0.0-rc.19.min.js", "msPwaSdkScript");
        if (!((_0x59894b = $msstart === null || $msstart === undefined ? undefined : $msstart.isInMicrosoftStart) === null || _0x59894b === undefined ? undefined : _0x59894b.call($msstart))) {
          throw new Error("Not running in Microsoft Start environment");
        }
        this.logger.info("Running in Microsoft Start environment");
        const _0x448f56 = yield this.entryPoint.getData();
        this.tracker.logEvent("entry_point", {
          channel: "microsoft",
          entry_point_id: _0x448f56.entryPointId,
          entry_point_name: _0x448f56.entryPointName
        });
      });
    }
    setProgress(_0x472b5a) {}
    complete() {
      return _0x5baa30(this, undefined, undefined, function* () {});
    }
  }
  class _0x4632c6 {
    constructor(_0xb5f484) {
      this.tracker = _0xb5f484;
    }
    init() {
      return _0x5baa30(this, undefined, undefined, function* () {});
    }
    canCreateShortcut() {
      return _0x5baa30(this, undefined, undefined, function* () {
        return $msstart.isInMicrosoftStart();
      });
    }
    createShortcut() {
      return _0x5baa30(this, undefined, undefined, function* () {
        switch (yield $msstart.promptInstallAsync()) {
          case "PROMPT_INSTALL_ACCEPTED":
            this.tracker.logEvent("ms_promp_install_successfull", {});
            break;
          case "PROMPT_INSTALL_DISMISSED":
            this.tracker.logEvent("ms_promp_install_dismissed", {});
        }
      });
    }
  }
  class _0x47ff64 {
    getData() {
      return _0x5baa30(this, undefined, undefined, function* () {
        return this.getMSEntryPoint();
      });
    }
    getName() {
      return _0x5baa30(this, undefined, undefined, function* () {
        var _0x1ebc22;
        if ((_0x1ebc22 = this.getMSEntryPoint()) === null || _0x1ebc22 === undefined) {
          return undefined;
        } else {
          return _0x1ebc22.entryPointName;
        }
      });
    }
    getMSEntryPoint() {
      if (this.msEntrypoint) {
        return this.msEntrypoint;
      }
      if (!($msstart === null || $msstart === undefined ? undefined : $msstart.isInMicrosoftStart())) {
        throw new Error("Not running in Microsoft Start environment");
      }
      this.msEntrypoint = $msstart.getEntryPointInfo();
      return this.msEntrypoint;
    }
  }
  var _0x179d50;
  var _0x2276dc;
  var _0x48f004;
  var _0x111234;
  var _0xa2b8ea;
  var _0x28e7a2;
  (function (_0x336a92) {
    _0x336a92.FRVR = "frvr";
    _0x336a92.ANONYMOUS = "anonymous";
    _0x336a92.FACEBOOK_INSTANT = "facebook-instant";
    _0x336a92.FACEBOOK_SDK = "facebook-web";
    _0x336a92.GOOGLE_INTERNAL = "google-internal";
    _0x336a92.SAMSUNG_INSTANT = "samsung-instant";
    _0x336a92.APPLE = "apple";
    _0x336a92.DISCORD = "discord";
    _0x336a92.MICROSOFT = "microsoft";
  })(_0x179d50 || (_0x179d50 = {}));
  class _0xed9d9e {
    constructor() {
      this.loggingIn = true;
      this.available = false;
    }
    getPlatformId() {
      return _0x179d50.MICROSOFT;
    }
    init() {
      return _0x5baa30(this, undefined, undefined, function* () {
        this.credentials = yield this.fetchCredentials();
        this.loggingIn = false;
      });
    }
    getCredentials() {
      return this.credentials;
    }
    getLoginSignature() {
      return _0x5baa30(this, undefined, undefined, function* () {
        var _0x1f4a63;
        if ((_0x1f4a63 = this.credentials) === null || _0x1f4a63 === undefined) {
          return undefined;
        } else {
          return _0x1f4a63.signature;
        }
      });
    }
    getUserID() {
      return _0x5baa30(this, undefined, undefined, function* () {
        var _0x183409;
        if ((_0x183409 = this.credentials) === null || _0x183409 === undefined) {
          return undefined;
        } else {
          return _0x183409.playerId;
        }
      });
    }
    isLoggedIn() {
      return !!this.credentials;
    }
    isLoggingIn() {
      return this.loggingIn;
    }
    isLoginSupported() {
      return this.available;
    }
    isLogoutSupported() {
      return false;
    }
    login() {
      return _0x5baa30(this, undefined, undefined, function* () {
        this.loggingIn = true;
        this.credentials = yield this.requestLogin();
        this.loggingIn = false;
        return !!this.credentials;
      });
    }
    logout() {}
    prohibitsLoginWithFRVRCredentials() {
      return false;
    }
    requestLogin() {
      return _0x5baa30(this, undefined, undefined, function* () {
        try {
          return yield $msstart.signInAsync();
        } catch (_0x45ab52) {
          this.available = this.checkAvailable(_0x45ab52.code);
        }
      });
    }
    fetchCredentials() {
      return _0x5baa30(this, undefined, undefined, function* () {
        try {
          const _0x5d11be = yield $msstart.getSignedInUserAsync();
          this.available = true;
          return _0x5d11be;
        } catch (_0x3a5e69) {
          this.available = this.checkAvailable(_0x3a5e69.code);
        }
      });
    }
    checkAvailable(_0xe6979) {
      return !["USER_NOT_ELIGIBLE", "API_ACCESS_DENIED"].includes(_0xe6979);
    }
  }
  class _0x28a384 {
    setScore(_0x45e545) {
      return _0x5baa30(this, undefined, undefined, function* () {
        return !!$msstart.submitGameResultsAsync && $msstart.submitGameResultsAsync(_0x45e545);
      });
    }
  }
  class _0x450add {
    constructor(_0x4c11e6) {
      this.logger = _0x4c11e6;
    }
    getName() {
      return "mspwa-notification-provider";
    }
    canScheduleMessages() {
      return Promise.resolve($msstart.scheduleNotificationAsync !== undefined);
    }
    subscribeScheduleMessages() {
      return Promise.resolve($msstart.scheduleNotificationAsync !== undefined);
    }
    scheduleLocalNotification(_0x37e038, _0x2bc59a, _0xb371d, _0x347d18) {
      return _0x5baa30(this, undefined, undefined, function* () {
        let _0x18640c;
        _0x18640c = parseInt(_0x37e038);
        if (isNaN(_0x18640c)) {
          _0x18640c = 0;
        }
        _0x18640c = Math.min(Math.max(15, _0x18640c), 0);
        try {
          const _0xe065a9 = yield $msstart.scheduleNotificationAsync({
            title: _0x2bc59a,
            description: _0xb371d,
            type: _0x18640c,
            minDelayInSeconds: _0x347d18
          });
          this.logger.info("local notification scheduled: ", _0xe065a9);
        } catch (_0x2e0eeb) {
          this.logger.error("error trying to schedule a local notification", _0x2e0eeb);
        }
      });
    }
  }
  class _0x2dcc57 {
    constructor(_0x468bbb, _0x3478b6) {
      this.gameId = _0x468bbb;
      this.tracker = _0x3478b6;
    }
    canCrosspromo() {
      return Promise.resolve($msstart.switchGameAsync !== undefined);
    }
    openGame(_0x375ed6) {
      return _0x5baa30(this, undefined, undefined, function* () {
        const _0x3df1cc = _0x375ed6.targetGame.mspwaId;
        const _0x1aba91 = {
          utm_source: "instant",
          utm_medium: _0x375ed6.placement,
          utm_campaign: this.gameId
        };
        const _0x933560 = Object.assign(Object.assign(Object.assign({}, _0x375ed6), {
          origin: this.gameId,
          target_game: _0x3df1cc,
          "game-id-from": this.gameId,
          "game-id-to": _0x3df1cc,
          "trigger-id": "frvr-sdk",
          placement: _0x375ed6.placement
        }), _0x1aba91);
        this.tracker.logEvent("crosspromo", Object.assign(Object.assign({}, _0x1aba91), {
          "game-id-from": this.gameId,
          "game-id-to": _0x3df1cc
        }));
        yield $msstart.switchGameAsync({
          id: _0x3df1cc,
          payloadData: _0x933560
        });
      });
    }
  }
  (function (_0x1217bf) {
    _0x1217bf[_0x1217bf.shareMessage = 0] = "shareMessage";
    _0x1217bf[_0x1217bf.sendUpdate = 1] = "sendUpdate";
    _0x1217bf[_0x1217bf.invite = 2] = "invite";
    _0x1217bf[_0x1217bf.getFriends = 3] = "getFriends";
    _0x1217bf[_0x1217bf.getContextId = 4] = "getContextId";
    _0x1217bf[_0x1217bf.getContextData = 5] = "getContextData";
    _0x1217bf[_0x1217bf.getContextPlayers = 6] = "getContextPlayers";
  })(_0x2276dc || (_0x2276dc = {}));
  (function (_0x10d464) {
    _0x10d464.UPDATE_STATUS = "UPDATE_STATUS";
    _0x10d464.SEND_GAME_INVITE = "SEND_GAME_INVITE";
  })(_0x48f004 || (_0x48f004 = {}));
  (function (_0x4a2776) {
    _0x4a2776.onFriendStatusUpdated = "FRIEND_STATUS_UPDATED";
    _0x4a2776.onConnect = "ON_CONNECT";
    _0x4a2776.onGameInvite = "RECEIVE_GAME_INVITE";
    _0x4a2776.onError = "ON_ERROR";
  })(_0x111234 || (_0x111234 = {}));
  (function (_0x77e62b) {
    _0x77e62b.open = "open";
    _0x77e62b.close = "close";
    _0x77e62b.error = "error";
    _0x77e62b.message = "message";
    _0x77e62b.retry = "retry";
  })(_0xa2b8ea || (_0xa2b8ea = {}));
  class _0x2a0170 {
    shareMessage(_0x2aa60d) {
      return $msstart.shareAsync({
        title: _0x2aa60d.title || "",
        text: _0x2aa60d.text || "",
        image: _0x2aa60d.image || ""
      });
    }
    sendUpdate() {
      return _0x5baa30(this, undefined, undefined, function* () {});
    }
    canInvite() {
      return _0x5baa30(this, undefined, undefined, function* () {
        return false;
      });
    }
    invite() {
      return _0x5baa30(this, undefined, undefined, function* () {});
    }
    getContextId() {
      return _0x5baa30(this, undefined, undefined, function* () {
        return Promise.resolve("");
      });
    }
    getContextData() {
      return _0x5baa30(this, undefined, undefined, function* () {
        return Promise.resolve({});
      });
    }
    getContextPlayers() {
      return _0x5baa30(this, undefined, undefined, function* () {
        return Promise.resolve([]);
      });
    }
    getFriends() {
      return _0x5baa30(this, undefined, undefined, function* () {
        return Promise.resolve([]);
      });
    }
    getSupportedAPIs() {
      return [_0x2276dc.shareMessage];
    }
  }
  class _0x5c3e54 {
    constructor(_0x348d31 = _0x510097.emptyLogger) {
      this.logger = _0x348d31;
      this.ready = false;
      this.msCatalogById = {};
      this.configCatalog = {};
      this.products = {};
      this.onIsReadyChangedHandler = () => {};
    }
    getName() {
      return "microsoft";
    }
    init() {
      return _0x5baa30(this, undefined, undefined, function* () {
        this.logger.log("[mspwa-iap] init");
        if (!("$msstart" in window)) {
          this.logger.error("[mspwa-iap] $msstart not found");
          return;
        }
        if (!$msstart.iap) {
          this.logger.warn("[mspwa-iap] $msstart.iap not found");
          return;
        }
        let _0x47a894;
        this.logger.log("[mspwa-iap] fetching ms catalog");
        try {
          _0x47a894 = yield $msstart.iap.getAllAddOnsAsync();
        } catch (_0x2edfd8) {
          this.logger.log("[mspwa-iap] No Add-Ons were found");
          return;
        }
        if ("code" in _0x47a894) {
          this.logger.log("[mspwa-iap] No Add-Ons were found");
        } else {
          this.msCatalogById = _0x47a894.reduce((_0x3b5982, _0x56b25f) => {
            _0x3b5982[_0x56b25f.inAppOfferToken] = _0x56b25f;
            return _0x3b5982;
          }, {});
          this.updateCatalog();
          this.logger.log("[mspwa-iap] calling ready callback");
          this.ready = true;
          this.onIsReadyChangedHandler(this.ready);
        }
      });
    }
    configure(_0x45a9bc) {
      return _0x5baa30(this, undefined, undefined, function* () {
        this.logger.log("[mspwa-iap] configuring catalog");
        this.configCatalog = (_0x45a9bc == null ? undefined : _0x45a9bc.catalog) || {};
        this.updateCatalog();
      });
    }
    isReady() {
      return this.ready;
    }
    getCatalog() {
      return this.products;
    }
    getProductById(_0x2a6825) {
      return this.products[_0x2a6825] || null;
    }
    purchase(_0x277ede, _0x2e5ba4) {
      return _0x5baa30(this, undefined, undefined, function* () {
        var _0x21713c;
        var _0x27b6a9;
        if (!this.getProductById(_0x277ede)) {
          throw new _0x510097.IAPPurchaseErrorUnknownProduct("Product not found in catalog");
        }
        const _0x360da7 = (_0x21713c = this.products[_0x277ede].msStoreId) !== null && _0x21713c !== undefined ? _0x21713c : _0x277ede;
        let _0x1b6358;
        try {
          _0x1b6358 = yield $msstart.iap.purchaseAsync({
            productId: _0x360da7
          });
        } catch (_0x39c54b) {
          if ("code" in _0x39c54b) {
            if (_0x39c54b.code === "IAP_PURCHASE_FAILURE") {
              if (((_0x27b6a9 = _0x39c54b.extra) === null || _0x27b6a9 === undefined ? undefined : _0x27b6a9.errorCode) === "PUR-UserAlreadyOwnsContent") {
                throw new _0x510097.IAPPurchaseErrorAlreadyOwned();
              }
              throw new _0x510097.IAPPurchaseErrorUnknownProduct(_0x39c54b.description);
            }
            throw new _0x510097.IAPError(_0x39c54b.description);
          }
          return null;
        }
        if ("receipt" in _0x1b6358 && _0x1b6358.receipt.status === "Active") {
          return {
            channelId: this.getName(),
            productId: _0x1b6358.receipt.productId,
            purchaseId: _0x1b6358.receipt.orderId,
            transactionReceipt: _0x1b6358.receiptSignature
          };
        } else {
          return null;
        }
      });
    }
    consumePurchase(_0x285a2b) {
      return _0x5baa30(this, undefined, undefined, function* () {
        var _0x36c93f;
        const _0x4a740a = (_0x36c93f = this.products[_0x285a2b.productId].msStoreId) !== null && _0x36c93f !== undefined ? _0x36c93f : _0x285a2b.productId;
        try {
          yield $msstart.iap.consumeAsync({
            productId: _0x4a740a
          });
        } catch (_0x21aba5) {
          throw new _0x510097.IAPError(_0x21aba5.description);
        }
      });
    }
    getUnconsumedPurchases() {
      return _0x5baa30(this, undefined, undefined, function* () {
        const _0x2689f6 = Object.keys(this.products);
        const _0x116d7c = yield _0x2689f6.map(_0x33eea0 => this.getUnconsumedPurchaseByProductId(_0x33eea0));
        return (yield Promise.all(_0x116d7c)).filter(_0x27e7c0 => _0x27e7c0 !== null);
      });
    }
    onIsReadyChanged(_0x11ece8) {
      if (this.onIsReadyChangedHandler !== _0x11ece8) {
        this.onIsReadyChangedHandler = _0x11ece8;
        this.logger.log("[mspwa-iap] calling ready callback");
        _0x11ece8(this.ready);
      }
    }
    getUnconsumedPurchaseByProductId(_0x1d4643) {
      return _0x5baa30(this, undefined, undefined, function* () {
        var _0x4b61ce;
        const _0x1a817a = (_0x4b61ce = this.products[_0x1d4643].msStoreId) !== null && _0x4b61ce !== undefined ? _0x4b61ce : _0x1d4643;
        let _0x5a6f82;
        try {
          _0x5a6f82 = yield $msstart.iap.getPurchasesAsync({
            productId: _0x1a817a
          });
        } catch (_0x166dbf) {
          this.logger.error("[mspwa-iap] error getting purchases", _0x1d4643);
          return null;
        }
        if ("receipt" in _0x5a6f82 && _0x5a6f82.receipt.status === "Active") {
          return {
            channelId: this.getName(),
            productId: _0x5a6f82.receipt.inAppOfferToken,
            purchaseId: _0x5a6f82.receipt.orderId,
            transactionReceipt: _0x5a6f82.receiptSignature
          };
        } else {
          return null;
        }
      });
    }
    updateCatalog() {
      this.products = {};
      for (const [_0x5cae98, _0x4870ea] of Object.entries(this.configCatalog)) {
        const _0x4684e2 = this.msCatalogById[_0x4870ea.storeId];
        if (!_0x4684e2) {
          this.logger.error("[mspwa-iap] product not found in ms catalog", _0x4870ea.storeId);
          continue;
        }
        const _0x225789 = (_0x4684e2.price && _0x4684e2.price.listPrice || 0).toFixed(2);
        this.products[_0x5cae98] = Object.assign(Object.assign({}, _0x4870ea), {
          consumable: _0x4684e2.isConsumable,
          priceValue: _0x225789,
          currencyCode: _0x4684e2.price && _0x4684e2.price.currencyCode || "",
          trackingName: _0x4684e2.title,
          label: _0x4684e2.title,
          msStoreId: _0x4684e2.productId,
          price: (_0x4684e2.price && _0x4684e2.price.currencyCode || "") + " " + _0x225789.toString()
        });
      }
    }
  }
  class _0xede69a extends _0x2fa408 {
    constructor(_0x39315a, _0x357868) {
      super(_0x39315a, _0x357868);
      this.entryPoint = new _0x47ff64();
      this.consentProvider = _0x510097.consentToAllConsentProvider;
    }
    getId() {
      return "microsoft";
    }
    onModulesUpdated(_0x5835c9) {
      var _0x5a128f;
      var _0x3cf4e1;
      var _0x6f4444;
      super.onModulesUpdated(_0x5835c9);
      if (this.gameId && this.logger && this.tracker) {
        if (!((_0x5a128f = this.crosspromo) !== null && _0x5a128f !== undefined)) {
          this.crosspromo = new _0x2dcc57(this.gameId, this.tracker);
        }
        if (!((_0x3cf4e1 = this.setScoreProvider) !== null && _0x3cf4e1 !== undefined)) {
          this.setScoreProvider = new _0x28a384();
        }
        if (!((_0x6f4444 = this.notificationProvider) !== null && _0x6f4444 !== undefined)) {
          this.notificationProvider = new _0x450add(this.logger);
        }
      }
    }
    getBootstrapper() {
      return new _0x175cfe(this.logger, this.entryPoint, this.tracker);
    }
    getAdsProviders(_0x4e358e) {
      return [new _0x9e3de4(), new _0x4a2e89(), new _0x41607d(), ...super.getAdsProviders(_0x4e358e)];
    }
    getIAPProvider() {
      return new _0x5c3e54(this.logger);
    }
    getAdsConfig(_0x42eede) {
      const _0x270240 = Object.create(null, {
        getAdsConfig: {
          get: () => super.getAdsConfig
        }
      });
      return _0x5baa30(this, undefined, undefined, function* () {
        if (!(_0x42eede == null ? undefined : _0x42eede.remote)) {
          return _0x42eede;
        }
        const _0x3a96b4 = yield _0x270240.getAdsConfig.call(this, _0x42eede);
        return this.mergedAdsConfig(_0x42eede, _0x3a96b4);
      });
    }
    mergedAdsConfig(_0x199429, _0x14f31a) {
      const _0x4d10b9 = [];
      for (const _0x523753 of _0x199429.providers) {
        const _0x35ad6a = _0x14f31a.providers.find(_0x3af637 => _0x3af637.name === _0x523753.name && _0x3af637.type === _0x523753.type);
        if (_0x35ad6a) {
          _0x4d10b9.push(Object.assign(Object.assign({}, _0x35ad6a), {
            priority: _0x523753.priority
          }));
        } else {
          _0x4d10b9.push(_0x523753);
        }
      }
      return {
        autoInit: _0x199429.autoInit,
        remote: _0x199429.remote,
        version: _0x14f31a.version,
        vendors: _0x14f31a.vendors,
        throttling: _0x199429.throttling,
        providers: _0x4d10b9
      };
    }
    getAuthProviders(_0x4f6c0b, _0x330eee) {
      return [new _0xed9d9e()];
    }
    getShortcutProvider() {
      return new _0x4632c6(this.tracker);
    }
    getEntryPointProvider() {
      return this.entryPoint;
    }
    getSocialProvider() {
      return new _0x2a0170();
    }
  }
  (function (_0x2b2de9) {
    _0x2b2de9.UNKNOWN = "UNKNOWN";
    _0x2b2de9.USER_INPUT = "USER_INPUT";
    _0x2b2de9.INVALID_PARAM = "INVALID_PARAM";
    _0x2b2de9.ALREADY_OWNED = "ALREADY_OWNED";
  })(_0x28e7a2 || (_0x28e7a2 = {}));
  class _0x1137c6 {
    constructor(_0x4f12bc, _0xf3983b) {
      this.states = {};
      this._isReady = false;
      this.requiredStates = _0x4f12bc;
      this.handler = _0xf3983b;
      for (const _0x21b386 of this.requiredStates) {
        this.states[_0x21b386] = false;
      }
      this.updateIsReady();
    }
    updateIsReady() {
      const _0xdd6cbb = this._isReady;
      this._isReady = this.requiredStates.every(_0x445ba7 => this.states[_0x445ba7]);
      if (_0xdd6cbb != this._isReady) {
        this.handler(this._isReady);
      }
    }
    setState(_0x24580d, _0x2fdf34) {
      this.states[_0x24580d] = _0x2fdf34;
      this.updateIsReady();
    }
    getState(_0x14cb85) {
      return this.states[_0x14cb85];
    }
    get isReady() {
      return this._isReady;
    }
  }
  const _0x16f17a = "discord";
  var _0x4f50a9;
  (function (_0x1b2ad6) {
    _0x1b2ad6.AED = "aed";
    _0x1b2ad6.AFN = "afn";
    _0x1b2ad6.ALL = "all";
    _0x1b2ad6.AMD = "amd";
    _0x1b2ad6.ANG = "ang";
    _0x1b2ad6.AOA = "aoa";
    _0x1b2ad6.ARS = "ars";
    _0x1b2ad6.AUD = "aud";
    _0x1b2ad6.AWG = "awg";
    _0x1b2ad6.AZN = "azn";
    _0x1b2ad6.BAM = "bam";
    _0x1b2ad6.BBD = "bbd";
    _0x1b2ad6.BDT = "bdt";
    _0x1b2ad6.BGN = "bgn";
    _0x1b2ad6.BHD = "bhd";
    _0x1b2ad6.BIF = "bif";
    _0x1b2ad6.BMD = "bmd";
    _0x1b2ad6.BND = "bnd";
    _0x1b2ad6.BOB = "bob";
    _0x1b2ad6.BOV = "bov";
    _0x1b2ad6.BRL = "brl";
    _0x1b2ad6.BSD = "bsd";
    _0x1b2ad6.BTN = "btn";
    _0x1b2ad6.BWP = "bwp";
    _0x1b2ad6.BYN = "byn";
    _0x1b2ad6.BYR = "byr";
    _0x1b2ad6.BZD = "bzd";
    _0x1b2ad6.CAD = "cad";
    _0x1b2ad6.CDF = "cdf";
    _0x1b2ad6.CHE = "che";
    _0x1b2ad6.CHF = "chf";
    _0x1b2ad6.CHW = "chw";
    _0x1b2ad6.CLF = "clf";
    _0x1b2ad6.CLP = "clp";
    _0x1b2ad6.CNY = "cny";
    _0x1b2ad6.COP = "cop";
    _0x1b2ad6.COU = "cou";
    _0x1b2ad6.CRC = "crc";
    _0x1b2ad6.CUC = "cuc";
    _0x1b2ad6.CUP = "cup";
    _0x1b2ad6.CVE = "cve";
    _0x1b2ad6.CZK = "czk";
    _0x1b2ad6.DJF = "djf";
    _0x1b2ad6.DKK = "dkk";
    _0x1b2ad6.DOP = "dop";
    _0x1b2ad6.DZD = "dzd";
    _0x1b2ad6.EGP = "egp";
    _0x1b2ad6.ERN = "ern";
    _0x1b2ad6.ETB = "etb";
    _0x1b2ad6.EUR = "eur";
    _0x1b2ad6.FJD = "fjd";
    _0x1b2ad6.FKP = "fkp";
    _0x1b2ad6.GBP = "gbp";
    _0x1b2ad6.GEL = "gel";
    _0x1b2ad6.GHS = "ghs";
    _0x1b2ad6.GIP = "gip";
    _0x1b2ad6.GMD = "gmd";
    _0x1b2ad6.GNF = "gnf";
    _0x1b2ad6.GTQ = "gtq";
    _0x1b2ad6.GYD = "gyd";
    _0x1b2ad6.HKD = "hkd";
    _0x1b2ad6.HNL = "hnl";
    _0x1b2ad6.HRK = "hrk";
    _0x1b2ad6.HTG = "htg";
    _0x1b2ad6.HUF = "huf";
    _0x1b2ad6.IDR = "idr";
    _0x1b2ad6.ILS = "ils";
    _0x1b2ad6.INR = "inr";
    _0x1b2ad6.IQD = "iqd";
    _0x1b2ad6.IRR = "irr";
    _0x1b2ad6.ISK = "isk";
    _0x1b2ad6.JMD = "jmd";
    _0x1b2ad6.JOD = "jod";
    _0x1b2ad6.JPY = "jpy";
    _0x1b2ad6.KES = "kes";
    _0x1b2ad6.KGS = "kgs";
    _0x1b2ad6.KHR = "khr";
    _0x1b2ad6.KMF = "kmf";
    _0x1b2ad6.KPW = "kpw";
    _0x1b2ad6.KRW = "krw";
    _0x1b2ad6.KWD = "kwd";
    _0x1b2ad6.KYD = "kyd";
    _0x1b2ad6.KZT = "kzt";
    _0x1b2ad6.LAK = "lak";
    _0x1b2ad6.LBP = "lbp";
    _0x1b2ad6.LKR = "lkr";
    _0x1b2ad6.LRD = "lrd";
    _0x1b2ad6.LSL = "lsl";
    _0x1b2ad6.LTL = "ltl";
    _0x1b2ad6.LVL = "lvl";
    _0x1b2ad6.LYD = "lyd";
    _0x1b2ad6.MAD = "mad";
    _0x1b2ad6.MDL = "mdl";
    _0x1b2ad6.MGA = "mga";
    _0x1b2ad6.MKD = "mkd";
    _0x1b2ad6.MMK = "mmk";
    _0x1b2ad6.MNT = "mnt";
    _0x1b2ad6.MOP = "mop";
    _0x1b2ad6.MRO = "mro";
    _0x1b2ad6.MUR = "mur";
    _0x1b2ad6.MVR = "mvr";
    _0x1b2ad6.MWK = "mwk";
    _0x1b2ad6.MXN = "mxn";
    _0x1b2ad6.MXV = "mxv";
    _0x1b2ad6.MYR = "myr";
    _0x1b2ad6.MZN = "mzn";
    _0x1b2ad6.NAD = "nad";
    _0x1b2ad6.NGN = "ngn";
    _0x1b2ad6.NIO = "nio";
    _0x1b2ad6.NOK = "nok";
    _0x1b2ad6.NPR = "npr";
    _0x1b2ad6.NZD = "nzd";
    _0x1b2ad6.OMR = "omr";
    _0x1b2ad6.PAB = "pab";
    _0x1b2ad6.PEN = "pen";
    _0x1b2ad6.PGK = "pgk";
    _0x1b2ad6.PHP = "php";
    _0x1b2ad6.PKR = "pkr";
    _0x1b2ad6.PLN = "pln";
    _0x1b2ad6.PYG = "pyg";
    _0x1b2ad6.QAR = "qar";
    _0x1b2ad6.RON = "ron";
    _0x1b2ad6.RSD = "rsd";
    _0x1b2ad6.RUB = "rub";
    _0x1b2ad6.RWF = "rwf";
    _0x1b2ad6.SAR = "sar";
    _0x1b2ad6.SBD = "sbd";
    _0x1b2ad6.SCR = "scr";
    _0x1b2ad6.SDG = "sdg";
    _0x1b2ad6.SEK = "sek";
    _0x1b2ad6.SGD = "sgd";
    _0x1b2ad6.SHP = "shp";
    _0x1b2ad6.SLL = "sll";
    _0x1b2ad6.SOS = "sos";
    _0x1b2ad6.SRD = "srd";
    _0x1b2ad6.SSP = "ssp";
    _0x1b2ad6.STD = "std";
    _0x1b2ad6.SVC = "svc";
    _0x1b2ad6.SYP = "syp";
    _0x1b2ad6.SZL = "szl";
    _0x1b2ad6.THB = "thb";
    _0x1b2ad6.TJS = "tjs";
    _0x1b2ad6.TMT = "tmt";
    _0x1b2ad6.TND = "tnd";
    _0x1b2ad6.TOP = "top";
    _0x1b2ad6.TRY = "try";
    _0x1b2ad6.TTD = "ttd";
    _0x1b2ad6.TWD = "twd";
    _0x1b2ad6.TZS = "tzs";
    _0x1b2ad6.UAH = "uah";
    _0x1b2ad6.UGX = "ugx";
    _0x1b2ad6.USD = "usd";
    _0x1b2ad6.USN = "usn";
    _0x1b2ad6.USS = "uss";
    _0x1b2ad6.UYI = "uyi";
    _0x1b2ad6.UYU = "uyu";
    _0x1b2ad6.UZS = "uzs";
    _0x1b2ad6.VEF = "vef";
    _0x1b2ad6.VND = "vnd";
    _0x1b2ad6.VUV = "vuv";
    _0x1b2ad6.WST = "wst";
    _0x1b2ad6.XAF = "xaf";
    _0x1b2ad6.XAG = "xag";
    _0x1b2ad6.XAU = "xau";
    _0x1b2ad6.XBA = "xba";
    _0x1b2ad6.XBB = "xbb";
    _0x1b2ad6.XBC = "xbc";
    _0x1b2ad6.XBD = "xbd";
    _0x1b2ad6.XCD = "xcd";
    _0x1b2ad6.XDR = "xdr";
    _0x1b2ad6.XFU = "xfu";
    _0x1b2ad6.XOF = "xof";
    _0x1b2ad6.XPD = "xpd";
    _0x1b2ad6.XPF = "xpf";
    _0x1b2ad6.XPT = "xpt";
    _0x1b2ad6.XSU = "xsu";
    _0x1b2ad6.XTS = "xts";
    _0x1b2ad6.XUA = "xua";
    _0x1b2ad6.YER = "yer";
    _0x1b2ad6.ZAR = "zar";
    _0x1b2ad6.ZMW = "zmw";
    _0x1b2ad6.ZWL = "zwl";
  })(_0x4f50a9 || (_0x4f50a9 = {}));
  const _0x398ea2 = {
    [_0x4f50a9.AED]: 2,
    [_0x4f50a9.AFN]: 2,
    [_0x4f50a9.ALL]: 2,
    [_0x4f50a9.AMD]: 2,
    [_0x4f50a9.ANG]: 2,
    [_0x4f50a9.AOA]: 2,
    [_0x4f50a9.ARS]: 2,
    [_0x4f50a9.AUD]: 2,
    [_0x4f50a9.AWG]: 2,
    [_0x4f50a9.AZN]: 2,
    [_0x4f50a9.BAM]: 2,
    [_0x4f50a9.BBD]: 2,
    [_0x4f50a9.BDT]: 2,
    [_0x4f50a9.BGN]: 2,
    [_0x4f50a9.BHD]: 3,
    [_0x4f50a9.BIF]: 0,
    [_0x4f50a9.BMD]: 2,
    [_0x4f50a9.BND]: 2,
    [_0x4f50a9.BOB]: 2,
    [_0x4f50a9.BOV]: 2,
    [_0x4f50a9.BRL]: 2,
    [_0x4f50a9.BSD]: 2,
    [_0x4f50a9.BTN]: 2,
    [_0x4f50a9.BWP]: 2,
    [_0x4f50a9.BYR]: 0,
    [_0x4f50a9.BYN]: 2,
    [_0x4f50a9.BZD]: 2,
    [_0x4f50a9.CAD]: 2,
    [_0x4f50a9.CDF]: 2,
    [_0x4f50a9.CHE]: 2,
    [_0x4f50a9.CHF]: 2,
    [_0x4f50a9.CHW]: 2,
    [_0x4f50a9.CLF]: 0,
    [_0x4f50a9.CLP]: 0,
    [_0x4f50a9.CNY]: 2,
    [_0x4f50a9.COP]: 2,
    [_0x4f50a9.COU]: 2,
    [_0x4f50a9.CRC]: 2,
    [_0x4f50a9.CUC]: 2,
    [_0x4f50a9.CUP]: 2,
    [_0x4f50a9.CVE]: 2,
    [_0x4f50a9.CZK]: 2,
    [_0x4f50a9.DJF]: 0,
    [_0x4f50a9.DKK]: 2,
    [_0x4f50a9.DOP]: 2,
    [_0x4f50a9.DZD]: 2,
    [_0x4f50a9.EGP]: 2,
    [_0x4f50a9.ERN]: 2,
    [_0x4f50a9.ETB]: 2,
    [_0x4f50a9.EUR]: 2,
    [_0x4f50a9.FJD]: 2,
    [_0x4f50a9.FKP]: 2,
    [_0x4f50a9.GBP]: 2,
    [_0x4f50a9.GEL]: 2,
    [_0x4f50a9.GHS]: 2,
    [_0x4f50a9.GIP]: 2,
    [_0x4f50a9.GMD]: 2,
    [_0x4f50a9.GNF]: 0,
    [_0x4f50a9.GTQ]: 2,
    [_0x4f50a9.GYD]: 2,
    [_0x4f50a9.HKD]: 2,
    [_0x4f50a9.HNL]: 2,
    [_0x4f50a9.HRK]: 2,
    [_0x4f50a9.HTG]: 2,
    [_0x4f50a9.HUF]: 2,
    [_0x4f50a9.IDR]: 2,
    [_0x4f50a9.ILS]: 2,
    [_0x4f50a9.INR]: 2,
    [_0x4f50a9.IQD]: 3,
    [_0x4f50a9.IRR]: 2,
    [_0x4f50a9.ISK]: 0,
    [_0x4f50a9.JMD]: 2,
    [_0x4f50a9.JOD]: 3,
    [_0x4f50a9.JPY]: 0,
    [_0x4f50a9.KES]: 2,
    [_0x4f50a9.KGS]: 2,
    [_0x4f50a9.KHR]: 2,
    [_0x4f50a9.KMF]: 0,
    [_0x4f50a9.KPW]: 2,
    [_0x4f50a9.KRW]: 0,
    [_0x4f50a9.KWD]: 3,
    [_0x4f50a9.KYD]: 2,
    [_0x4f50a9.KZT]: 2,
    [_0x4f50a9.LAK]: 2,
    [_0x4f50a9.LBP]: 2,
    [_0x4f50a9.LKR]: 2,
    [_0x4f50a9.LRD]: 2,
    [_0x4f50a9.LSL]: 2,
    [_0x4f50a9.LTL]: 2,
    [_0x4f50a9.LVL]: 2,
    [_0x4f50a9.LYD]: 3,
    [_0x4f50a9.MAD]: 2,
    [_0x4f50a9.MDL]: 2,
    [_0x4f50a9.MGA]: 2,
    [_0x4f50a9.MKD]: 2,
    [_0x4f50a9.MMK]: 2,
    [_0x4f50a9.MNT]: 2,
    [_0x4f50a9.MOP]: 2,
    [_0x4f50a9.MRO]: 2,
    [_0x4f50a9.MUR]: 2,
    [_0x4f50a9.MVR]: 2,
    [_0x4f50a9.MWK]: 2,
    [_0x4f50a9.MXN]: 2,
    [_0x4f50a9.MXV]: 2,
    [_0x4f50a9.MYR]: 2,
    [_0x4f50a9.MZN]: 2,
    [_0x4f50a9.NAD]: 2,
    [_0x4f50a9.NGN]: 2,
    [_0x4f50a9.NIO]: 2,
    [_0x4f50a9.NOK]: 2,
    [_0x4f50a9.NPR]: 2,
    [_0x4f50a9.NZD]: 2,
    [_0x4f50a9.OMR]: 3,
    [_0x4f50a9.PAB]: 2,
    [_0x4f50a9.PEN]: 2,
    [_0x4f50a9.PGK]: 2,
    [_0x4f50a9.PHP]: 2,
    [_0x4f50a9.PKR]: 2,
    [_0x4f50a9.PLN]: 2,
    [_0x4f50a9.PYG]: 0,
    [_0x4f50a9.QAR]: 2,
    [_0x4f50a9.RON]: 2,
    [_0x4f50a9.RSD]: 2,
    [_0x4f50a9.RUB]: 2,
    [_0x4f50a9.RWF]: 0,
    [_0x4f50a9.SAR]: 2,
    [_0x4f50a9.SBD]: 2,
    [_0x4f50a9.SCR]: 2,
    [_0x4f50a9.SDG]: 2,
    [_0x4f50a9.SEK]: 2,
    [_0x4f50a9.SGD]: 2,
    [_0x4f50a9.SHP]: 2,
    [_0x4f50a9.SLL]: 2,
    [_0x4f50a9.SOS]: 2,
    [_0x4f50a9.SRD]: 2,
    [_0x4f50a9.SSP]: 2,
    [_0x4f50a9.STD]: 2,
    [_0x4f50a9.SVC]: 2,
    [_0x4f50a9.SYP]: 2,
    [_0x4f50a9.SZL]: 2,
    [_0x4f50a9.THB]: 2,
    [_0x4f50a9.TJS]: 2,
    [_0x4f50a9.TMT]: 2,
    [_0x4f50a9.TND]: 3,
    [_0x4f50a9.TOP]: 2,
    [_0x4f50a9.TRY]: 2,
    [_0x4f50a9.TTD]: 2,
    [_0x4f50a9.TWD]: 2,
    [_0x4f50a9.TZS]: 2,
    [_0x4f50a9.UAH]: 2,
    [_0x4f50a9.UGX]: 0,
    [_0x4f50a9.USD]: 2,
    [_0x4f50a9.USN]: 2,
    [_0x4f50a9.USS]: 2,
    [_0x4f50a9.UYI]: 0,
    [_0x4f50a9.UYU]: 2,
    [_0x4f50a9.UZS]: 2,
    [_0x4f50a9.VEF]: 2,
    [_0x4f50a9.VND]: 0,
    [_0x4f50a9.VUV]: 0,
    [_0x4f50a9.WST]: 2,
    [_0x4f50a9.XAF]: 0,
    [_0x4f50a9.XAG]: 0,
    [_0x4f50a9.XAU]: 0,
    [_0x4f50a9.XBA]: 0,
    [_0x4f50a9.XBB]: 0,
    [_0x4f50a9.XBC]: 0,
    [_0x4f50a9.XBD]: 0,
    [_0x4f50a9.XCD]: 2,
    [_0x4f50a9.XDR]: 0,
    [_0x4f50a9.XFU]: 0,
    [_0x4f50a9.XOF]: 0,
    [_0x4f50a9.XPD]: 0,
    [_0x4f50a9.XPF]: 0,
    [_0x4f50a9.XPT]: 0,
    [_0x4f50a9.XSU]: 0,
    [_0x4f50a9.XTS]: 0,
    [_0x4f50a9.XUA]: 0,
    [_0x4f50a9.YER]: 2,
    [_0x4f50a9.ZAR]: 2,
    [_0x4f50a9.ZMW]: 2,
    [_0x4f50a9.ZWL]: 2
  };
  var _0x2dbb88;
  var _0x1cc9b1;
  var _0x551fd5 = {
    convertToPriceValue: function (_0x36ee76) {
      const {
        amount: _0x5881dc,
        currency: _0x6a1d42
      } = _0x36ee76;
      const _0x5a7b9c = _0x398ea2[_0x6a1d42];
      if (_0x5a7b9c == null) {
        console.warn("Unexpected currency " + _0x6a1d42);
        return _0x5881dc;
      } else {
        return _0x5881dc / Math.pow(10, _0x5a7b9c);
      }
    }
  };
  (function (_0x5dc8d1) {
    _0x5dc8d1[_0x5dc8d1.ONGOING = 1] = "ONGOING";
    _0x5dc8d1[_0x5dc8d1.STANDBY = 0] = "STANDBY";
  })(_0x2dbb88 || (_0x2dbb88 = {}));
  (function (_0x4fa8d7) {
    _0x4fa8d7.IsCatalogLoaded = "isCatalogLoaded";
    _0x4fa8d7.IsIAPInitialized = "isIAPInitialized";
  })(_0x1cc9b1 || (_0x1cc9b1 = {}));
  class _0x56d297 {
    constructor(_0x1a18d1, _0x5cb6b8) {
      this.serviceClient = _0x1a18d1;
      this.logger = _0x5cb6b8;
      this.completedEntitlements = [];
      this.name = _0x16f17a;
      this.isPurchaseSubscribed = false;
      const _0x58f105 = [_0x1cc9b1.IsCatalogLoaded, _0x1cc9b1.IsIAPInitialized];
      this.isReadyManager = new _0x1137c6(_0x58f105, _0x493a7e => {
        this.isReadyStateChanged(_0x493a7e);
      });
    }
    isReadyStateChanged(_0x5dc2b7) {
      if (this.onIsReadyHandler) {
        this.onIsReadyHandler(_0x5dc2b7);
      }
    }
    onIsReadyChanged(_0x931e0d) {
      this.onIsReadyHandler = _0x931e0d;
    }
    getName() {
      return this.name;
    }
    isReady() {
      return !(!this.isReadyManager.isReady || !window.discordSDK);
    }
    init() {
      return _0x5baa30(this, undefined, undefined, function* () {
        var _0xc17c99;
        var _0x355d21;
        var _0x357c58;
        if (!((_0xc17c99 = this.logger) === null || _0xc17c99 === undefined)) {
          _0xc17c99.info("[Discord - IAP]: Executing init");
        }
        if (!((_0x355d21 = this.logger) === null || _0x355d21 === undefined)) {
          _0x355d21.info("[Discord - IAP]: Executing iapReady.");
        }
        if (!this.isReadyManager.getState(_0x1cc9b1.IsIAPInitialized)) {
          if (!((_0x357c58 = this.logger) === null || _0x357c58 === undefined)) {
            _0x357c58.info("[Discord - IAP]: Will load catalog.");
          }
          yield this.loadDiscordCatalog();
          this.isReadyManager.setState(_0x1cc9b1.IsIAPInitialized, true);
        }
      });
    }
    loadDiscordCatalog() {
      return _0x5baa30(this, undefined, undefined, function* () {
        var _0xd756cc;
        var _0x551d10;
        try {
          const _0x2f878e = yield this.serviceClient.getProducts();
          if (!_0x2f878e) {
            throw new Error("[Discord - IAP]: Products not found in IAP service");
          }
          const _0x1a4579 = _0x2f878e;
          const {
            skus: _0x92ea9b
          } = yield window.discordSDK.commands.getSkus();
          const _0x2af5b2 = _0x92ea9b;
          if (!((_0xd756cc = this.logger) === null || _0xd756cc === undefined)) {
            _0xd756cc.info("[Discord - IAP]: Loaded items catalog.", _0x2af5b2);
          }
          if (!_0x2af5b2) {
            throw new Error("[Discord - IAP]: No Discord SKUs found");
          }
          const _0x53e08e = [];
          const _0x2d971d = new Map(_0x2af5b2.map(_0x380f79 => [_0x380f79.id, _0x380f79]));
          for (let _0x27c6d3 = 0; _0x27c6d3 < _0x1a4579.length; _0x27c6d3++) {
            const _0x43383d = window.discordSDK.clientId;
            const _0x615274 = _0x2d971d.get(_0x1a4579[_0x27c6d3].channels.discord.skus["" + _0x43383d]);
            if (_0x615274) {
              _0x53e08e.push(Object.assign(Object.assign({}, _0x615274), {
                productId: _0x1a4579[_0x27c6d3].sku,
                name: _0x1a4579[_0x27c6d3].name
              }));
            }
          }
          if (_0x53e08e.length <= 0) {
            throw new Error("[Discord - IAP]: Something went wrong creating the catalog");
          }
          this.catalog = _0x53e08e;
          this.isReadyManager.setState(_0x1cc9b1.IsCatalogLoaded, true);
        } catch (_0x2d61fe) {
          if (!((_0x551d10 = this.logger) === null || _0x551d10 === undefined)) {
            _0x551d10.error("[Discord - IAP]: Could not get product list: ", _0x2d61fe);
          }
        }
      });
    }
    configure() {
      return _0x5baa30(this, undefined, undefined, function* () {});
    }
    getProductById(_0x441ab8) {
      var _0x4f44cd;
      let _0x22d6c1;
      if (this.catalog) {
        const _0x153047 = this.catalog.find(_0x4a0ef8 => _0x4a0ef8.productId === _0x441ab8);
        if (_0x153047) {
          _0x22d6c1 = {
            provider: this.name,
            trackingName: _0x153047.name,
            label: _0x153047.name,
            priceValue: _0x551fd5.convertToPriceValue(_0x153047.price),
            currencyCode: (_0x4f44cd = _0x153047.price) === null || _0x4f44cd === undefined ? undefined : _0x4f44cd.currency
          };
        }
      }
      return _0x22d6c1;
    }
    getProductBySkuId(_0x11702f) {
      var _0x577340;
      let _0x379a00;
      if (this.catalog) {
        const _0x4b5014 = this.catalog.find(_0x2e132b => _0x2e132b.id === _0x11702f);
        if (_0x4b5014) {
          _0x379a00 = {
            provider: this.name,
            skuId: _0x4b5014.id,
            productId: _0x4b5014.productId,
            trackingName: _0x4b5014.name,
            label: _0x4b5014.name,
            priceValue: _0x551fd5.convertToPriceValue(_0x4b5014.price),
            currencyCode: (_0x577340 = _0x4b5014.price) === null || _0x577340 === undefined ? undefined : _0x577340.currency
          };
        }
      }
      return _0x379a00;
    }
    getSkuForProduct(_0x5118c5) {
      if (this.catalog) {
        const _0x585f9c = this.catalog.find(_0x4f70d8 => _0x4f70d8.productId === _0x5118c5);
        if (_0x585f9c) {
          return _0x585f9c.id;
        }
      }
    }
    getSkuType(_0x202571) {
      if (this.catalog) {
        const _0x34c28c = this.catalog.find(_0x40290a => _0x40290a.productId === _0x202571);
        if (_0x34c28c) {
          return _0x34c28c.type;
        }
      }
    }
    getCatalog() {
      const _0x234419 = {};
      for (const _0x269c85 of this.catalog) {
        _0x234419[_0x269c85.productId] = {
          label: _0x269c85.name,
          storeId: _0x269c85.productId
        };
      }
      return _0x234419;
    }
    purchase(_0x261cb2, _0x4d96f2) {
      return _0x5baa30(this, undefined, undefined, function* () {
        if (!this.getProductById(_0x261cb2)) {
          throw new Error("[Discord - IAP]: Product not found in catalog");
        }
        if (!this.isPurchaseSubscribed) {
          this.isPurchaseSubscribed = true;
          window.discordSDK.subscribe("ENTITLEMENT_CREATE", this.handlePurchaseComplete.bind(this));
        }
        return window.discordSDK.commands.startPurchase({
          sku_id: this.getSkuForProduct(_0x261cb2)
        }).then(_0xbe02c9 => _0x5baa30(this, undefined, undefined, function* () {
          var _0x245039;
          if (!((_0x245039 = this.logger) === null || _0x245039 === undefined)) {
            _0x245039.info("[Discord - IAP]: purchase resolved.", _0xbe02c9);
          }
          if (_0xbe02c9.length > 1) {
            throw new Error("[Discord - IAP]: Multiple entitlements found");
          }
          const _0x5d7de2 = _0xbe02c9[0];
          return new _0xd16641(Object.assign({
            productId: _0x261cb2
          }, _0x5d7de2));
        }));
      });
    }
    consumePurchase(_0x3be878) {
      return _0x5baa30(this, undefined, undefined, function* () {
        if (this.getSkuType(_0x3be878.productId) !== 2) {
          return this.serviceClient.consumePurchase(_0x3be878.transactionReceipt.applicationId, _0x3be878.purchaseId).then(_0x4aed2e => {}).catch(_0x552c63 => {
            var _0x2fa0fc;
            if (!((_0x2fa0fc = this.logger) === null || _0x2fa0fc === undefined)) {
              _0x2fa0fc.log("[Discord - IAP]: error validating purchase", _0x3be878, _0x552c63);
            }
            throw new Error("[Discord - IAP]: error consuming purchase");
          });
        }
      });
    }
    getUnconsumedPurchases() {
      return _0x5baa30(this, undefined, undefined, function* () {
        return window.discordSDK.commands.getEntitlements().then(({
          entitlements: _0x2dd126
        }) => {
          var _0x234a6d;
          if (!((_0x234a6d = this.logger) === null || _0x234a6d === undefined)) {
            _0x234a6d.info("[Discord - IAP]: Loaded inventory items.", _0x2dd126);
          }
          const _0x34c116 = _0x2dd126.filter(_0x12aae1 => !(_0x12aae1.consumed || _0x12aae1.deleted)).map(_0x78c097 => {
            var _0x562409;
            const _0x468e4b = this.getProductBySkuId(_0x78c097.sku_id);
            if (_0x468e4b) {
              return new _0xd16641(Object.assign({
                productId: _0x468e4b.productId
              }, _0x78c097));
            }
            if (!((_0x562409 = this.logger) === null || _0x562409 === undefined)) {
              _0x562409.log("[Discord - IAP]: product with given sku does not exist");
            }
          });
          return _0x34c116;
        });
      });
    }
    handlePurchaseComplete(_0x38917b) {
      return _0x5baa30(this, undefined, undefined, function* () {
        var _0x3f77c4;
        if (!((_0x3f77c4 = this.logger) === null || _0x3f77c4 === undefined)) {
          _0x3f77c4.log("[Discord - IAP]: handlePurchaseComplete event", _0x38917b);
        }
        const _0x581aa6 = this.getProductBySkuId(_0x38917b.entitlement.sku_id);
        yield this.validatePurchase(Object.assign(Object.assign({}, _0x38917b.entitlement), {
          productId: _0x581aa6.productId
        }));
      });
    }
    validatePurchase(_0x1aecae) {
      const _0x4f4ad4 = {
        transactionId: _0x1aecae.id,
        discordUserId: _0x1aecae.user_id,
        skuId: _0x1aecae.sku_id,
        applicationId: _0x1aecae.application_id,
        productId: _0x1aecae.productId
      };
      return this.serviceClient.validatePurchase(_0x4f4ad4).then(_0x53668f => {
        var _0x376956;
        if (!((_0x376956 = this.logger) === null || _0x376956 === undefined)) {
          _0x376956.log("[Discord - IAP]: validate purchase response", _0x53668f);
        }
        return _0x53668f;
      }).catch(_0x32b041 => {
        throw new Error("[Discord - IAP]: error validating purchase", _0x32b041);
      });
    }
  }
  class _0xd16641 {
    constructor(_0xc88d34) {
      this.channelId = _0x16f17a;
      this.productId = _0xc88d34.productId;
      this.purchaseId = _0xc88d34.id;
      this.transactionReceipt = {
        transactionId: _0xc88d34.id,
        discordUserId: _0xc88d34.user_id,
        skuId: _0xc88d34.sku_id,
        applicationId: _0xc88d34.application_id,
        productId: _0xc88d34.productId
      };
    }
  }
  class _0x5c843e {
    constructor(_0x29b6ba) {
      this.logger = _0x29b6ba;
    }
    init() {
      return _0x5baa30(this, undefined, undefined, function* () {});
    }
    setProgress(_0x3c6b7f) {
      var _0x2137d0;
      const _0x5ee43f = (_0x3c6b7f * 100).toFixed(1);
      if (!((_0x2137d0 = this.logger) === null || _0x2137d0 === undefined)) {
        _0x2137d0.info("[channel-web] progress: " + _0x5ee43f + "%");
      }
    }
    complete() {
      return _0x5baa30(this, undefined, undefined, function* () {
        var _0x1b3c35;
        if (!((_0x1b3c35 = this.logger) === null || _0x1b3c35 === undefined)) {
          _0x1b3c35.info("[channel-web] complete");
        }
      });
    }
  }
  const _0x167190 = 1006;
  class _0x121942 {
    constructor(_0x34e869, _0x4e6f8f, _0x3a3705, _0x90a835) {
      this.platformId = _0x179d50.DISCORD;
      this._isLoggingIn = true;
      this.isAuthorized = false;
      this._isLoggedIn = false;
      this.discordAppID = _0x3a3705;
      this.logger = _0x90a835;
    }
    init(_0x28702f) {
      return _0x5baa30(this, undefined, undefined, function* () {
        this._isLoggingIn = false;
        this.authFRVR = _0x28702f;
        yield this.doLoginChain();
      });
    }
    handleFailedAuth() {
      // TOLOOK
      setTimeout(() => {
        var _0x9cd0a;
        if (!((_0x9cd0a = this.logger) === null || _0x9cd0a === undefined)) {
          _0x9cd0a.warn("[Discord.auth] App auth failed and proceeding to close app");
        }
        window.discordSDK.close(_0x167190, "Authentication or authorization failure");
      }, 300);
    }
    doLoginChain() {
      return _0x5baa30(this, undefined, undefined, function* () {
        return _0x8b3c71(() => this.retrieveClientSignature().then(() => {
          if (this.isAuthorized && this.credentials) {
            return this.authFRVR.loginWithProvider(this);
          }
          throw new Error("[Discord.auth] Authorization failed");
        }).catch(_0x25c463 => {
          var _0x452d2a;
          var _0x307682;
          if (!((_0x452d2a = this.logger) === null || _0x452d2a === undefined)) {
            _0x452d2a.error("[Discord.auth] Login Chain error in FRVR login", _0x25c463);
          }
          if (!this.isAuthorized) {
            if (!((_0x307682 = this.logger) === null || _0x307682 === undefined)) {
              _0x307682.log("[Discord.auth] Authorization failed");
            }
            return this.handleFailedAuth();
          }
          throw _0x25c463;
        }).then(() => {
          var _0x5af004;
          if (!((_0x5af004 = this.logger) === null || _0x5af004 === undefined)) {
            _0x5af004.log("[Discord.auth] Login Chain FRVR login final step", this._isLoggedIn);
          }
          return this._isLoggedIn || undefined;
        }), 20, 300).catch(() => {
          var _0x298e61;
          if (!((_0x298e61 = this.logger) === null || _0x298e61 === undefined)) {
            _0x298e61.error("[Discord.auth] Max login attempts reached");
          }
          this._isLoggingIn = false;
          this.credentials = null;
          this.handleFailedAuth();
        });
      });
    }
    retrieveClientSignature() {
      return _0x5baa30(this, undefined, undefined, function* () {
        yield window.discordSDK.commands.authorize({
          client_id: this.discordAppID,
          response_type: "code",
          state: "",
          prompt: "none",
          scope: ["rpc.voice.read", "rpc.activities.write", "guilds", "guilds.members.read", "identify", "applications.commands"]
        }).then(_0x227372 => {
          var _0x326241;
          if (!((_0x326241 = this.logger) === null || _0x326241 === undefined)) {
            _0x326241.log("[Discord.auth] retrieveClientSignature. Authorize_RPC Response:", _0x227372);
          }
          this.isAuthorized = true;
          this.credentials = {
            code: _0x227372.code,
            appId: this.discordAppID
          };
        }).catch(_0x3a9807 => {
          var _0x15d339;
          if (!((_0x15d339 = this.logger) === null || _0x15d339 === undefined)) {
            _0x15d339.error("[Discord.auth] retrieveClientSignature. Authorize_RPC Error:", _0x3a9807);
          }
          this.isAuthorized = false;
          this._isLoggingIn = false;
          this.credentials = null;
          throw _0x3a9807;
        }).finally(() => {
          this._isLoggingIn = false;
        });
      });
    }
    onFRVRTokensReceived(_0x3fe762) {
      return _0x5baa30(this, undefined, undefined, function* () {
        var _0x564256;
        const _0x13dd96 = (_0x564256 = _0x3fe762.getRefreshPayload()) === null || _0x564256 === undefined ? undefined : _0x564256.extra;
        if (_0x13dd96.platform !== "discord") {
          return;
        }
        const _0x452632 = (_0x13dd96 == null ? undefined : _0x13dd96.credentials).accessToken;
        this.credentials.userId = _0x13dd96 == null ? undefined : _0x13dd96.identifier;
        if (this.isAuthorized && _0x452632) {
          let _0x316dad;
          yield window.discordSDK.commands.authenticate({
            access_token: _0x452632
          }).then(_0x13fb00 => {
            var _0x2866e1;
            if (!((_0x2866e1 = this.logger) === null || _0x2866e1 === undefined)) {
              _0x2866e1.log("[Discord.auth] onFRVRTokensReceived: Authenticate_RPC Response:", _0x13fb00);
            }
            _0x316dad = _0x13fb00.user;
            return window.discordSDK.commands.getInstanceConnectedParticipants();
          }).then(({
            participants: _0x495f84
          }) => {
            var _0x393c29;
            const _0x3bafd0 = _0x495f84 == null ? undefined : _0x495f84.find(_0x34e0ac => _0x34e0ac.id === _0x316dad.id);
            window.discordSDK._FRVRPatched_user = Object.assign({
              nickname: (_0x393c29 = _0x3bafd0.nickname) !== null && _0x393c29 !== undefined ? _0x393c29 : _0x3bafd0.global_name
            }, _0x316dad);
            this._isLoggedIn = true;
          }).catch(_0x39795e => {
            var _0x450b35;
            if (_0x39795e.code == 4002) {
              if (!((_0x450b35 = this.logger) === null || _0x450b35 === undefined)) {
                _0x450b35.log("[Discord.auth] onFRVRTokensReceived: Already authenticated");
              }
              this._isLoggedIn = true;
              return true;
            }
            throw _0x39795e;
          });
        }
      });
    }
    getPlatformId() {
      return this.platformId;
    }
    handlesFRVRLogin() {
      return true;
    }
    isLoginSupported() {
      return false;
    }
    isLogoutSupported() {
      return false;
    }
    prohibitsLoginWithFRVRCredentials() {
      return true;
    }
    isLoggingIn() {
      return this._isLoggingIn;
    }
    getCredentials() {
      return this.credentials;
    }
    getLoginSignature() {
      return _0x5baa30(this, undefined, undefined, function* () {
        var _0xc78749;
        if ((_0xc78749 = this.credentials) === null || _0xc78749 === undefined) {
          return undefined;
        } else {
          return _0xc78749.code;
        }
      });
    }
    getUserID() {
      return _0x5baa30(this, undefined, undefined, function* () {
        var _0x4971f9;
        if ((_0x4971f9 = this.credentials) === null || _0x4971f9 === undefined) {
          return undefined;
        } else {
          return _0x4971f9.userId;
        }
      });
    }
    isLoggedIn() {
      return this._isLoggedIn;
    }
    login() {
      return _0x5baa30(this, undefined, undefined, function* () {
        return false;
      });
    }
    logout() {}
  }
  const _0x4fe46d = (_0x1f7e75, _0x292482) => _0x292482 === null ? null : "https://cdn.discordapp.com/avatars/" + _0x1f7e75 + "/" + _0x292482 + ".png";
  class _0x497b1d {
    id() {
      var _0x2c92a4;
      if ((_0x2c92a4 = this.getDiscordUserData()) === null || _0x2c92a4 === undefined) {
        return undefined;
      } else {
        return _0x2c92a4.id;
      }
    }
    name() {
      var _0x5572e7;
      if ((_0x5572e7 = this.getDiscordUserData()) === null || _0x5572e7 === undefined) {
        return undefined;
      } else {
        return _0x5572e7.username;
      }
    }
    nickname() {
      var _0x439a03;
      if ((_0x439a03 = this.getDiscordUserData()) === null || _0x439a03 === undefined) {
        return undefined;
      } else {
        return _0x439a03.nickname;
      }
    }
    image() {
      var _0x34081a;
      const _0x4a775f = this.id();
      const _0x198076 = (_0x34081a = this.getDiscordUserData()) === null || _0x34081a === undefined ? undefined : _0x34081a.avatar;
      return _0x4fe46d(_0x4a775f, _0x198076);
    }
    loadImage(_0x9690fa) {
      return new Promise((_0x198149, _0x5745c6) => _0x5baa30(this, undefined, undefined, function* () {
        const _0x242337 = yield fetch(_0x9690fa);
        if (!_0x242337.ok) {
          _0x5745c6(new Error(_0x242337.status + " " + _0x242337.statusText));
          return;
        }
        const _0x341767 = yield _0x242337.blob();
        const _0x4b712 = new FileReader();
        _0x4b712.onerror = _0x5745c6;
        _0x4b712.onload = () => {
          _0x198149(_0x4b712.result);
        };
        _0x4b712.readAsDataURL(_0x341767);
      }));
    }
    getDiscordUserData() {
      var _0x516532;
      if ((_0x516532 = window.discordSDK) === null || _0x516532 === undefined) {
        return undefined;
      } else {
        return _0x516532._FRVRPatched_user;
      }
    }
  }
  function _0x4644cb(_0x46f08a, _0x266f98, _0x17b5fc) {
    let _0x4274ce = 0;
    for (let _0x51b8ae = 0; _0x51b8ae < _0x17b5fc; _0x51b8ae++) {
      const _0x79bcc2 = _0x46f08a[_0x266f98 + _0x51b8ae];
      if (_0x79bcc2 === undefined) {
        break;
      }
      _0x4274ce += _0x79bcc2 * Math.pow(16, _0x51b8ae);
    }
    return _0x4274ce;
  }
  function _0x1c62cd(_0x4aa909) {
    const _0x2ee678 = function (_0x2913a9) {
      const _0x2e9322 = [];
      for (let _0x640bff = 0; _0x640bff < _0x2913a9.length; _0x640bff++) {
        let _0x43f65b = Number(_0x2913a9[_0x640bff]);
        for (let _0x35b008 = 0; _0x43f65b || _0x35b008 < _0x2e9322.length; _0x35b008++) {
          _0x43f65b += (_0x2e9322[_0x35b008] || 0) * 10;
          _0x2e9322[_0x35b008] = _0x43f65b % 16;
          _0x43f65b = (_0x43f65b - _0x2e9322[_0x35b008]) / 16;
        }
      }
      return _0x2e9322;
    }(_0x4aa909);
    const _0x492796 = Array(4);
    for (let _0x45497b = 0; _0x45497b < 4; _0x45497b++) {
      _0x492796[3 - _0x45497b] = _0x4644cb(_0x2ee678, _0x45497b * 4, 4);
    }
    return _0x492796;
  }
  class _0x349bfc {
    constructor(_0xca6e7, _0x5366d8) {
      this.parts = _0xca6e7;
      this.str = _0x5366d8;
    }
    static fromString(_0x1f94ca) {
      return new _0x349bfc(_0x1c62cd(_0x1f94ca), _0x1f94ca);
    }
    static fromBit(_0x41d00f) {
      const _0x5903b3 = Array(4);
      const _0x3cd872 = Math.floor(_0x41d00f / 16);
      for (let _0x5cf653 = 0; _0x5cf653 < 4; _0x5cf653++) {
        _0x5903b3[3 - _0x5cf653] = _0x5cf653 === _0x3cd872 ? 1 << _0x41d00f - _0x3cd872 * 16 : 0;
      }
      return new _0x349bfc(_0x5903b3);
    }
    and({
      parts: _0x4b6961
    }) {
      return new _0x349bfc(this.parts.map((_0x2ec623, _0x590090) => _0x2ec623 & _0x4b6961[_0x590090]));
    }
    or({
      parts: _0x466930
    }) {
      return new _0x349bfc(this.parts.map((_0x4cae8a, _0x1e5f85) => _0x4cae8a | _0x466930[_0x1e5f85]));
    }
    xor({
      parts: _0x3f80cc
    }) {
      return new _0x349bfc(this.parts.map((_0x22a87b, _0x47497f) => _0x22a87b ^ _0x3f80cc[_0x47497f]));
    }
    not() {
      return new _0x349bfc(this.parts.map(_0xddaf17 => ~_0xddaf17));
    }
    equals({
      parts: _0x127bce
    }) {
      return this.parts.every((_0x31a7fa, _0x55c03d) => _0x31a7fa === _0x127bce[_0x55c03d]);
    }
  }
  const _0x4fbe18 = function () {
    try {
      BigInt;
      return true;
    } catch (_0x3b4054) {
      return false;
    }
  }();
  const _0x3af6ed = {};
  const _0x2108b8 = _0x4fbe18 ? function (_0xf09c06) {
    return BigInt(_0xf09c06);
  } : function (_0x192e00) {
    if (_0x192e00 instanceof _0x349bfc) {
      return _0x192e00;
    } else {
      if (typeof _0x192e00 == "number") {
        _0x192e00 = _0x192e00.toString();
      }
      if (!(_0x3af6ed[_0x192e00] != null)) {
        _0x3af6ed[_0x192e00] = _0x349bfc.fromString(_0x192e00);
      }
      return _0x3af6ed[_0x192e00];
    }
  };
  const _0x242c34 = _0x2108b8(0);
  const _0x494109 = _0x4fbe18 ? function (_0x2bd6eb = _0x242c34, _0x310e8b = _0x242c34) {
    return _0x2bd6eb & _0x310e8b;
  } : function (_0x5a22e7 = _0x242c34, _0x1ec139 = _0x242c34) {
    return _0x5a22e7.and(_0x1ec139);
  };
  const _0x91ff4a = _0x4fbe18 ? function (_0x6ae68a, _0x5446bd) {
    return _0x6ae68a === _0x5446bd;
  } : function (_0x44055d, _0xb6e037) {
    if (_0x44055d == null || _0xb6e037 == null) {
      return _0x44055d == _0xb6e037;
    } else {
      return _0x44055d.equals(_0xb6e037);
    }
  };
  const _0x1194db = {
    has: function (_0x3f9819, _0x57721e) {
      return _0x91ff4a(_0x494109(_0x3f9819, _0x57721e), _0x57721e);
    },
    deserialize: _0x2108b8,
    getFlag: _0x4fbe18 ? function (_0x3764c2) {
      return BigInt(1) << BigInt(_0x3764c2);
    } : function (_0x5910d9) {
      return _0x349bfc.fromBit(_0x5910d9);
    }
  };
  const _0x237fc9 = Object.freeze({
    CREATE_INSTANT_INVITE: _0x1194db.getFlag(0)
  });
  const _0x208887 = {
    can: function (_0x488df2, _0x37da8d) {
      return _0x1194db.has(_0x1194db.deserialize(_0x37da8d), _0x488df2);
    }
  };
  const _0x369692 = 4002;
  class _0x31e240 {
    constructor(_0x65694c) {
      this.logger = _0x65694c;
    }
    shareMessage(_0x48be1e) {
      return null;
    }
    sendUpdate(_0x79b34f) {
      return _0x5baa30(this, undefined, undefined, function* () {
        return null;
      });
    }
    canInvite() {
      return _0x5baa30(this, undefined, undefined, function* () {
        const {
          permissions: _0x2835d3
        } = yield window.discordSDK.commands.getChannelPermissions();
        return _0x208887.can(_0x237fc9.CREATE_INSTANT_INVITE, _0x2835d3);
      });
    }
    invite() {
      return _0x5baa30(this, undefined, undefined, function* () {
        var _0x39ad56;
        if (this.canInvite()) {
          try {
            yield window.discordSDK.commands.openInviteDialog();
          } catch (_0x32a381) {
            if (!((_0x39ad56 = this.logger) === null || _0x39ad56 === undefined)) {
              _0x39ad56.error("Unable to open invite dialog", _0x32a381);
            }
          }
        }
      });
    }
    getContextId() {
      return _0x5baa30(this, undefined, undefined, function* () {
        return window.discordSDK.channelId;
      });
    }
    getContextData() {
      return _0x5baa30(this, undefined, undefined, function* () {
        var _0x2c6e7d;
        const _0x12d2fb = window.discordSDK.channelId;
        if (_0x12d2fb) {
          try {
            return yield window.discordSDK.commands.getChannel({
              channel_id: _0x12d2fb
            });
          } catch (_0x5bfdc0) {
            if (_0x5bfdc0.code === _0x369692 && window.discordSDK.commands.getSelectedVoiceChannel) {
              try {
                return yield window.discordSDK.commands.getSelectedVoiceChannel();
              } catch (_0x3092b0) {
                if (!((_0x2c6e7d = this.logger) === null || _0x2c6e7d === undefined)) {
                  _0x2c6e7d.error("[Discord] getContextData legacy Error:", _0x3092b0);
                }
                return {
                  guild_id: window.discordSDK.guildId,
                  id: _0x12d2fb,
                  name: ""
                };
              }
            }
            return;
          }
        }
      });
    }
    getChannelParticipantsWrapper() {
      return _0x5baa30(this, undefined, undefined, function* () {
        var _0x1f8eb6;
        try {
          return yield window.discordSDK.commands.getInstanceConnectedParticipants();
        } catch (_0x41dd5c) {
          const _0x59891d = {
            participants: []
          };
          if (_0x41dd5c.code === _0x369692 && window.discordSDK.commands.getSelectedVoiceChannel) {
            try {
              return window.discordSDK.commands.getSelectedVoiceChannel().then(function (_0x3ab13a) {
                if (_0x3ab13a.voice_states) {
                  for (let _0x34555c = 0; _0x34555c < _0x3ab13a.voice_states.length; _0x34555c++) {
                    const _0x315ae5 = _0x3ab13a.voice_states[_0x34555c].user;
                    if (_0x315ae5) {
                      _0x59891d.participants.push({
                        id: _0x315ae5.id,
                        username: _0x315ae5.username,
                        discriminator: _0x315ae5.discriminator,
                        avatar: _0x315ae5.avatar,
                        nickname: _0x3ab13a.voice_states[_0x34555c].nick
                      });
                    }
                  }
                }
                return _0x59891d;
              });
            } catch (_0x239625) {
              if (!((_0x1f8eb6 = this.logger) === null || _0x1f8eb6 === undefined)) {
                _0x1f8eb6.error("[Discord] getChannelParticipantsWrapper legacy Error:", _0x239625);
              }
              return _0x59891d;
            }
          }
          return _0x59891d;
        }
      });
    }
    getContextPlayers() {
      return _0x5baa30(this, undefined, undefined, function* () {
        const {
          participants: _0x13fd94
        } = yield this.getChannelParticipantsWrapper();
        return (_0x13fd94 == null ? undefined : _0x13fd94.map(_0x23b15c => ({
          id: _0x23b15c.id,
          name: _0x23b15c.username,
          image: _0x4fe46d(_0x23b15c.id, _0x23b15c.avatar),
          channel: _0x16f17a,
          nickname: _0x23b15c.nickname
        }))) || [];
      });
    }
    getFriends() {
      return _0x5baa30(this, undefined, undefined, function* () {
        return this.getChannelParticipantsWrapper().then(({
          participants: _0x685146
        }) => _0x685146 == null ? undefined : _0x685146.filter(_0xc49681 => {
          var _0x25aaf4;
          const _0xf3c8c5 = (_0x25aaf4 = window.discordSDK) === null || _0x25aaf4 === undefined ? undefined : _0x25aaf4._FRVRPatched_user;
          if (_0xc49681.id !== (_0xf3c8c5 == null ? undefined : _0xf3c8c5.id)) {
            return _0xc49681;
          }
        }).map(_0x136da1 => ({
          id: _0x136da1.id,
          name: _0x136da1.username,
          image: _0x4fe46d(_0x136da1.id, _0x136da1.avatar),
          channel: _0x16f17a,
          nickname: _0x136da1.nickname
        })));
      });
    }
    getSupportedAPIs() {
      return [_0x2276dc.getContextId, _0x2276dc.getContextData, _0x2276dc.getContextPlayers, _0x2276dc.getFriends, _0x2276dc.invite];
    }
  }
  const _0x4d4228 = "/.proxy";
  const _0x2bbdaa = /\{([a-z]+)\}/g;
  function _0x12de36({
    originalURL: _0xb28cd2,
    prefix: _0x13b4e6,
    prefixHost: _0x3d3f2e,
    target: _0x170003
  }) {
    const _0x21697e = new URL("https://" + _0x170003);
    const _0x38b332 = function (_0x52d997) {
      const _0xecbb1d = _0x52d997.replaceAll(".", "\\.").replaceAll("%7B", "{").replaceAll("%7D", "}").replace(_0x2bbdaa, (_0x366d8f, _0x354118) => "(?<" + _0x354118 + ">[\\w-]+)");
      return new RegExp(_0xecbb1d + "(/|$)");
    }(_0x21697e.host);
    const _0x20478b = _0xb28cd2.toString().match(_0x38b332);
    if (_0x20478b == null) {
      return null;
    }
    const _0x2e532c = new URL(_0xb28cd2.toString());
    _0x2e532c.host = _0x3d3f2e;
    _0x2e532c.pathname = _0x13b4e6.replace(_0x2bbdaa, (_0x579ee6, _0x49e0c9) => {
      var _0xcd8bcf;
      if ((_0xcd8bcf = _0x20478b == null ? undefined : _0x20478b.groups) === null || _0xcd8bcf === undefined) {
        return undefined;
      } else {
        return _0xcd8bcf[_0x49e0c9];
      }
    });
    _0x2e532c.pathname += _0x2e532c.pathname === "/" ? _0xb28cd2.pathname.slice(1) : _0xb28cd2.pathname;
    if (!(!_0x2e532c.hostname.includes("discordsays.com") && !_0x2e532c.hostname.includes("discordsez.com") || _0x2e532c.pathname.startsWith(_0x4d4228))) {
      _0x2e532c.pathname = "/.proxy" + _0x2e532c.pathname;
    }
    _0x2e532c.pathname = _0x2e532c.pathname.replace(_0x21697e.pathname, "");
    return _0x2e532c;
  }
  function _0x291e5c(_0x3a0052, _0x626b6d = window.location.protocol, _0x1d874a = window.location.host) {
    if (_0x3a0052.startsWith("/")) {
      return new URL(_0x626b6d + "//" + _0x1d874a + _0x3a0052);
    } else if (function (_0x2c7e3f) {
      try {
        return Boolean(new URL(_0x2c7e3f));
      } catch (_0x1d689e) {
        return false;
      }
    }(_0x3a0052)) {
      return new URL(_0x3a0052);
    } else {
      return new URL(_0x626b6d + "//" + _0x1d874a + "/" + _0x3a0052);
    }
  }
  function _0x5aa629({
    url: _0x2776dd,
    mappings: _0xc18f22
  }) {
    const _0x5b6610 = new URL(_0x2776dd.toString());
    if (!(!_0x5b6610.hostname.includes("discordsays.com") && !_0x5b6610.hostname.includes("discordsez.com") || _0x5b6610.pathname.startsWith(_0x4d4228))) {
      _0x5b6610.pathname = _0x4d4228 + _0x5b6610.pathname;
    }
    for (const _0x4e593c of _0xc18f22) {
      const _0x38cf5a = _0x12de36({
        originalURL: _0x5b6610,
        prefix: _0x4e593c.prefix,
        target: _0x4e593c.target,
        prefixHost: window.location.host
      });
      if (_0x38cf5a !== null && (_0x38cf5a == null ? undefined : _0x38cf5a.toString()) !== _0x2776dd.toString()) {
        return _0x38cf5a;
      }
    }
    return _0x5b6610;
  }
  function _0x3e65e9(_0x2c06e0) {
    (function (_0x1a4e61) {
      for (const _0x308349 of _0x1a4e61) {
        const _0x2f8dc7 = _0x308349.prefix.match(/\{.*?\}/g) || [];
        const _0x3afa6a = _0x308349.target.match(/\{.*?\}/g) || [];
        if (_0x2f8dc7.length != _0x3afa6a.length) {
          throw new Error("Non matching substituition tokens in: '" + _0x308349.prefix + "', '" + _0x308349.target + "'");
        }
        for (const _0x32fd5f of _0x2f8dc7) {
          if (!_0x32fd5f.match(/^\{[a-z]+\}$/)) {
            throw new Error("Invalid substituition token: '" + _0x32fd5f + "' in: '" + _0x308349.prefix + "'. Use only the format {a-z}");
          }
          if (_0x3afa6a.indexOf(_0x32fd5f) < 0) {
            throw new Error("Non matching substituition tokens in: '" + _0x308349.prefix + "', '" + _0x308349.target + "'");
          }
        }
      }
    })(_0x2c06e0);
    _0x2c06e0 = function (_0x3dd2b5) {
      return _0x3dd2b5.sort((_0x45c639, _0x10cde2) => {
        const _0x1ab487 = new URL("https://" + _0x45c639.target).host.split(".");
        return new URL("https://" + _0x10cde2.target).host.split(".").length - _0x1ab487.length;
      });
    }(_0x2c06e0 || []);
    const _0x518b6d = window.fetch;
    window.fetch = function (_0x3fbf99, _0x5650b3) {
      const _0x20813b = _0x5aa629({
        url: _0x291e5c((_0x3fbf99 == null ? undefined : _0x3fbf99.url) || _0x3fbf99.toString()),
        mappings: _0x2c06e0
      });
      return _0x518b6d(_0x20813b.toString(), _0x5650b3);
    };
    const _0x5d5163 = XMLHttpRequest.prototype.open;
    XMLHttpRequest.prototype.open = function (_0x17dfec, _0x3a1eec, _0x12764f, _0x5e61e4, _0x4033b0) {
      const _0x41080d = _0x5aa629({
        url: _0x291e5c(_0x3a1eec),
        mappings: _0x2c06e0
      });
      _0x5d5163.apply(this, [_0x17dfec, _0x41080d.toString(), _0x12764f, _0x5e61e4, _0x4033b0]);
    };
    class _0x196e9a extends WebSocket {
      constructor(_0x2e4b90, _0xd5d798) {
        super(_0x5aa629({
          url: _0x291e5c(_0x2e4b90 instanceof URL ? _0x2e4b90.toString() : _0x2e4b90, "wss:"),
          mappings: _0x2c06e0
        }).toString(), _0xd5d798);
      }
    }
    window.WebSocket = _0x196e9a;
    window.getScriptSrc = window.getScriptSrc || {};
    window.getScriptSrc = _0xa5c828 => _0x5aa629({
      url: _0x291e5c(_0xa5c828 instanceof URL ? _0xa5c828.toString() : _0xa5c828),
      mappings: _0x2c06e0
    }).toString();
    const _0x26ab0b = Element.prototype.appendChild;
    Element.prototype.appendChild = function (_0x53f5ad) {
      if (_0x53f5ad.tagName === "SCRIPT" && _0x53f5ad.getAttribute) {
        const _0x2df2bd = _0x53f5ad.getAttribute("src");
        if (_0x2df2bd && !_0x2df2bd.includes("discord_activity_sdk")) {
          const _0x22fc70 = _0x5aa629({
            url: _0x291e5c(_0x2df2bd),
            mappings: _0x2c06e0
          });
          _0x53f5ad.setAttribute("src", _0x22fc70.toString());
        }
      }
      return _0x26ab0b.call(this, _0x53f5ad);
    };
  }
  var _0x5e6d5b;
  var _0x100087 = [{
    prefix: "/discord",
    target: "discord.com"
  }, {
    prefix: "/storagegoogleapis",
    target: "storage.googleapis.com"
  }, {
    prefix: "/google-analytics",
    target: "google-analytics.com"
  }, {
    prefix: "/coeus-frvr",
    target: "coeus.frvr.com"
  }, {
    prefix: "/stagingcrucible-frvr",
    target: "staging.crucible.frvr.com"
  }, {
    prefix: "/crucible-frvr",
    target: "crucible.frvr.com"
  }, {
    prefix: "/fran-cdn-frvr",
    target: "fran-cdn.frvr.com"
  }, {
    prefix: "/cdnfrvr",
    target: "cdn.frvr.com"
  }, {
    prefix: "/frvr",
    target: "frvr.com"
  }];
  (function (_0x26c02e) {
    _0x26c02e[_0x26c02e.getRoomData = 0] = "getRoomData";
    _0x26c02e[_0x26c02e.isInRoom = 1] = "isInRoom";
    _0x26c02e[_0x26c02e.getRoomId = 2] = "getRoomId";
    _0x26c02e[_0x26c02e.getPlayers = 3] = "getPlayers";
    _0x26c02e[_0x26c02e.subscribeToPlayerJoined = 4] = "subscribeToPlayerJoined";
    _0x26c02e[_0x26c02e.subscribeToPlayerLeft = 5] = "subscribeToPlayerLeft";
  })(_0x5e6d5b || (_0x5e6d5b = {}));
  class _0x28ba47 {
    getId() {
      return _0x16f17a;
    }
    isInRoom() {
      return _0x5baa30(this, undefined, undefined, function* () {
        return true;
      });
    }
    getRoomId() {
      return _0x5baa30(this, undefined, undefined, function* () {
        return (yield window.discordSDK.commands.getSelectedVoiceChannel()).id;
      });
    }
    getRoomData() {
      return _0x5baa30(this, undefined, undefined, function* () {
        return yield window.discordSDK.commands.getSelectedVoiceChannel();
      });
    }
    getPlayers() {
      return _0x5baa30(this, undefined, undefined, function* () {
        var _0x1dad1d;
        const _0x95d74f = yield window.discordSDK.commands.getSelectedVoiceChannel();
        return ((_0x1dad1d = _0x95d74f == null ? undefined : _0x95d74f.voice_states) === null || _0x1dad1d === undefined ? undefined : _0x1dad1d.map(_0x4978c7 => ({
          id: _0x4978c7.user.id,
          name: _0x4978c7.user.username,
          image: _0x4fe46d(_0x4978c7.user.id, _0x4978c7.user.avatar),
          channel: _0x16f17a,
          nickname: _0x4978c7.nick
        }))) || [];
      });
    }
    getSupportedAPIs() {
      return [_0x5e6d5b.isInRoom, _0x5e6d5b.getRoomId, _0x5e6d5b.getRoomData, _0x5e6d5b.getPlayers];
    }
    isSupportedAPI(_0x19d575) {
      return this.getSupportedAPIs().includes(_0x19d575);
    }
  }
  class _0xee9d9c {
    constructor() {}
    canNavigate() {
      return true;
    }
    navigate(_0x57c5c2) {
      return _0x5baa30(this, undefined, undefined, function* () {
        yield window.discordSDK.commands.openExternalLink({
          url: _0x57c5c2
        });
      });
    }
    canOpenChannelAppStore() {
      return false;
    }
    openChannelAppStore() {
      return _0x5baa30(this, undefined, undefined, function* () {});
    }
  }
  class _0x21c4d8 extends _0x2fa408 {
    constructor() {
      super(...arguments);
      this.characteristics = Object.assign(Object.assign({}, _0x510097.defaultCharacteristics), {
        allowExternalLinks: false,
        allowInternalLinks: false,
        allowNavigation: false,
        allowSendBeacon: false
      });
    }
    init() {
      return _0x5baa30(this, undefined, undefined, function* () {
        var _0x26bd78;
        var _0x3fbff8;
        var _0x4f463e;
        var _0x4ce900;
        if (!((_0x26bd78 = this.logger) === null || _0x26bd78 === undefined)) {
          _0x26bd78.log("[Discord-sub-channel] init network shims");
        }
        if (!this.disableNetworkShims) {
          _0x3e65e9(this.URLMappings);
        }
        yield _0x492139(this.discordSDKPath, "discordSdkScript");
        for (; !window.DiscordSDK;) {
          if (!((_0x3fbff8 = this.logger) === null || _0x3fbff8 === undefined)) {
            _0x3fbff8.log("[Discord-sub-channel] waiting for discord sdk to load");
          }
          yield new Promise(_0x2ac779 => // TOLOOK
          setTimeout(_0x2ac779, 100));
        }
        if (!window.discordSDK) {
          window.discordSDK = new window.DiscordSDK(this.discordAppID);
        }
        const _0x5b7d4b = // TOLOOK
        setTimeout(() => {
          var _0x3aa23a;
          if (!((_0x3aa23a = this.logger) === null || _0x3aa23a === undefined)) {
            _0x3aa23a.error("[Discord-sub-channel] discordSDK ready timeout. Likely wrong or missing appId", this.discordAppID);
          }
        }, 10000);
        yield window.discordSDK.ready();
        if (this.encourageHardwareAcceleration) {
          const _0x52bc16 = yield window.discordSDK.commands.encourageHardwareAcceleration();
          if (!((_0x4f463e = this.logger) === null || _0x4f463e === undefined)) {
            _0x4f463e.log("[Discord-sub-channel] Hardware Acceleration is " + (_0x52bc16.enabled ? "enabled" : "disabled"));
          }
        }
        clearTimeout(_0x5b7d4b);
        if (!((_0x4ce900 = this.logger) === null || _0x4ce900 === undefined)) {
          _0x4ce900.log("[Discord-sub-channel] discordSDK initialized");
        }
      });
    }
    getId() {
      return _0x16f17a;
    }
    setConfig({
      gameId: _0x32bf24,
      channels: _0x2ae7aa
    }) {
      super.setConfig({
        gameId: _0x32bf24
      });
      const _0x494223 = _0x2ae7aa == null ? undefined : _0x2ae7aa.discord;
      this.discordSDKPath = (_0x494223 == null ? undefined : _0x494223.discordSDKPath) || "assets/discord.iframe.sdk.bundle_patched.js";
      this.discordAppID = _0x494223 == null ? undefined : _0x494223.appId;
      this.URLMappings = [...((_0x494223 == null ? undefined : _0x494223.URLMappings) || []), ..._0x100087];
      this.disableNetworkShims = (_0x494223 == null ? undefined : _0x494223.disableNetworkShims) || false;
      this.encourageHardwareAcceleration = _0x494223 == null ? undefined : _0x494223.encourageHardwareAcceleration;
    }
    getBootstrapper() {
      return new _0x5c843e(this.logger);
    }
    getConsentProvider() {
      return _0x510097.consentToAllConsentProvider;
    }
    getIAPProvider(_0x34f097) {
      return new _0x56d297(_0x34f097, this.logger);
    }
    getShortcutProvider() {
      return _0x510097.emptyShortcutProvider;
    }
    getProfile() {
      return new _0x497b1d();
    }
    getSocialProvider() {
      return new _0x31e240(this.logger);
    }
    getLiveRoomProvider() {
      return new _0x28ba47();
    }
    getAuthProviders(_0x13a0b3, _0x24cbfe) {
      return [new _0x121942(_0x13a0b3, _0x24cbfe, this.discordAppID, this.logger)];
    }
    getNavigationProvider() {
      return new _0xee9d9c();
    }
  }
  const _0x833a2b = {
    crazygames: {
      "==": [{
        var: "query.partnerid"
      }, "8289067739"]
    },
    mspwa: {
      or: [{
        ">=": [{
          var: "query.mspwa"
        }, ""]
      }, {
        ">=": [{
          var: "query.msstart_sdk_init"
        }, ""]
      }]
    },
    discord: {
      endsWith: ["discordsays.com", {
        var: "location.host"
      }]
    }
  };
  function _0x27626f(_0x186a92) {
    const _0x9ea1ef = new URLSearchParams(window.location.search);
    const _0x4304b8 = {
      query: Object.fromEntries(_0x9ea1ef.entries()),
      document: document,
      location: location
    };
    const _0x10535d = function _0x10758d(_0x4d29a9, _0x57e958) {
      var _0x25fb10;
      var _0x156cad;
      if (typeof _0x4d29a9 != "object") {
        return _0x4d29a9;
      }
      const _0x2b91b8 = Object.keys(_0x4d29a9)[0];
      const _0x4b625e = _0x4d29a9[_0x2b91b8];
      switch (_0x2b91b8) {
        case "and":
          return _0x4b625e.every(_0x403920 => _0x10758d(_0x403920, _0x57e958));
        case "or":
          return _0x4b625e.some(_0x46526f => _0x10758d(_0x46526f, _0x57e958));
        case "<":
          return _0x10758d(_0x4b625e[0], _0x57e958) < _0x10758d(_0x4b625e[1], _0x57e958);
        case ">":
          return _0x10758d(_0x4b625e[0], _0x57e958) > _0x10758d(_0x4b625e[1], _0x57e958);
        case "<=":
          return _0x10758d(_0x4b625e[0], _0x57e958) <= _0x10758d(_0x4b625e[1], _0x57e958);
        case ">=":
          return _0x10758d(_0x4b625e[0], _0x57e958) >= _0x10758d(_0x4b625e[1], _0x57e958);
        case "==":
          return _0x10758d(_0x4b625e[0], _0x57e958) === _0x10758d(_0x4b625e[1], _0x57e958);
        case "!=":
          return _0x10758d(_0x4b625e[0], _0x57e958) !== _0x10758d(_0x4b625e[1], _0x57e958);
        case "var":
          return _0x4b625e.split(".").reduce((_0x3cb878, _0x85397c) => _0x3cb878 && _0x3cb878[_0x85397c], _0x57e958);
        case "in":
          return ((_0x25fb10 = _0x10758d(_0x4b625e[1], _0x57e958)) !== null && _0x25fb10 !== undefined ? _0x25fb10 : "").includes(_0x10758d(_0x4b625e[0], _0x57e958));
        case "endsWith":
          return ((_0x156cad = _0x10758d(_0x4b625e[1], _0x57e958)) !== null && _0x156cad !== undefined ? _0x156cad : "").endsWith(_0x10758d(_0x4b625e[0], _0x57e958));
        default:
          throw new Error("Unknown operator: " + _0x2b91b8);
      }
    }(_0x186a92, _0x4304b8);
    return !!_0x10535d;
  }
  const _0x2201b0 = [{
    isDetected: _0x6dee07 => _0x27626f(_0x6dee07.crazygames),
    build: () => new _0x1b1082()
  }, {
    isDetected: _0x7ba753 => _0x27626f(_0x7ba753.mspwa),
    build: () => new _0xede69a()
  }, {
    isDetected: _0x4ddbbf => _0x27626f(_0x4ddbbf.discord),
    build: () => new _0x21c4d8()
  }];
  var _0x301ac5;
  var _0x2d1b4e;
  if (window.FRVR) {
    const _0x3e27eb = (_0x2d1b4e = (_0x301ac5 = window.FRVR.config) === null || _0x301ac5 === undefined ? undefined : _0x301ac5.channels) === null || _0x2d1b4e === undefined ? undefined : _0x2d1b4e.web;
    const _0x197266 = function (_0x3fe8ab) {
      if (!(_0x3fe8ab != null)) {
        _0x3fe8ab = _0x833a2b;
      }
      const _0x474150 = _0x2201b0.find(_0x5e8391 => _0x5e8391.isDetected(_0x3fe8ab));
      if (_0x474150) {
        return _0x474150.build();
      } else {
        return new _0x2fa408();
      }
    }(_0x3e27eb == null ? undefined : _0x3e27eb.subchannelsDetection);
    window.FRVR.setChannel(_0x197266);
  }
})(FRVRSDK);
FRVRSDK.version = FRVRSDK.version || {};
FRVRSDK.version.channel = FRVRSDK.version.channel || {};
FRVRSDK.version.channel.v = "11.12.0";
FRVRSDK.version.channel.bts = "1744706485319";
FRVRSDK.version.channel.name = "web"; //# sourceMappingURL=frvr-channel-web.min.js.map